=============================================================

VOS AMIS SONT :

  Doc C++     : https://en.cppreference.com/w/
  Doc SDL2    : https://wiki.libsdl.org/APIByCategory
  Doc Doxygen : https://franckh.developpez.com/tutoriels/outils/doxygen/
  Récap GIT   : https://rogerdudler.github.io/git-guide/index.fr.html
  Hexagones   : https://www.redblobgames.com/grids/hexagons/
  Tuto SDL    : https://lazyfoo.net/tutorials/SDL/
  Récap C++   : https://cpp.developpez.com/cours/polyCpp/

VOS MANTRAS SONT :

  YAGNI       : https://en.wikipedia.org/wiki/You_aren%27t_gonna_need_it
  SOLID       : https://en.wikipedia.org/wiki/SOLID

BONUS :
  Culture G   : https://en.wikipedia.org/wiki/Software_design_pattern
  Bis         : https://en.wikipedia.org/wiki/Anti-pattern

=============================================================

Gestion de la map et des objets :
  - Unordered_Set des objets, hashés par coordonnées
    Attention le hash doit se faire sur les coordonnées de la case 
    et non pas de l'objet
    -> Besoin d'un sous conteneur pour les petit objets qui peuvent
      cohabiter sur une case
  - L'implementation de la map doit être assez souple et transparente
    pour pouvoir ajouter facilement des objets, sans devoir modifier
    tout le programme
  - Toutes les cases sont marchables ou non
  - Pathfinding de base pour les péons
  - Les arbres existent de façon singulière au lieu d'occuper une tuile en entier

  Feuille de route :

    -> Implementer le conteneur de base pour les batiments et les péons
      - Implémenter l'objet générique, et le hashage sur position
      - Créer les conteneurs de base pour les objets type batiments
          et les objets type péons

    -> Gestion des péons (0) :
      - Ajouter les contrôles (0) du péon :
        -> Sélection
        -> Ordre de Déplacement
      - Ajouter la logique de validation des mouvements et positions :
        -> Test des collisions et sortie de terrain
      - Ajouter la logique d'evitement des obstacles (crash and Turn 0)

    -> Ajout de quelques ressources de base :
      - Ajouter Roche et Bois, avec les conteneurs associés
      - Ajouter l'inventaire des péons et des batiments
      - Interaction entre le péon et les gisements de ressources

    -> Automations de comportements (1) :
      - Assignation du péon à un entrepot
      - le péon remplis son inventaire, va à l'entrepot, et recommence
        - Si le gisement est fini il en cherche un autre proche
        - Si l'entrepot est plein, il en cherche un autre proche
        - Si rien de proche il abandonne

    -> Implémentation des chantiers :
      Tout dans l'ordre

    -> En parrallèle : Amelioration de la map et des péons :

      -> Amélioration de la map :
        - Ajout des autre ressources de base
        - Ajout des reliefs
        - Génération procédurale

      -> Amélioration des péons :
        - Ajout de liste d'ordres
        - Amelioration de l'inventaire et du portage de ressources
        - Amelioration du pathfinding :
          - Mémorisation des trajets
          - Précalcul des trajets dans la ligne de vue
          - Transmission des connaissances entre péons

=============================================================

Interface graphique :

  Besoins :
    Utilitaires de gestion des coordonnées dans une carte Héxagonale :
      - Disposition en "Odd-q"
      - Gestion des changements de systèmes de coordonnées :
        Pixel <-> Offset <-> Cube <-> Axial

  Objectif :

    -> Afficher la grille de tuiles et convertir les coordonnées écran <-> tuile
      - Gérer les changements de coordonnée entre grille et affichage
      - Gérer le chargement des ressources graphiques
      - Gérer la fenêtre et le positionnement des sprites

    -> Ajouter les mouvements de la caméra
      - Modifier l'ancrage du rendu du monde :
          (Plus simple en choisissant la position du bas de l'écran ??)
          -> Ancrage par le centre de la vue (qui doit toujours être dans la grille)

    -> Creer la base du module de rendu :
      - Gestion des spriteSheets
      - Boucle de rendu

    -> Afficher les gros objets dans la grille centrés dans la tuile
      - Normalement aussi simple que d'afficher les tuiles
      - Première version avec position des objets hardcodée

    -> Ajouter les petits objets, libres dans la grille
      - Changement de coordonées plus complexes
          On pourra en meme temps gérer les entrée du joueur 
          pour tester les coordonées floatantes

    -> Intégrer le changement d'angle de vue
      - Ajout de rotation de la grille aux utilitaires de changement de coordonées
      - Revoir le système d'ancrage de la caméra
        -> Ancrer un coin de la caméra n'est pas idéal,
           pour rendre la vue à peu près invariante par rotation, il faut
           ancrer la caméra par le centre

    -> Ajouter les premières Fenêtres :
      - Inventaire des batiments et des péons
      - Réfléchir à la mise en avant des actions des péons :
        - Stock de ressource attaché
        - Destination
        - Surbrillance de selection
        - ...