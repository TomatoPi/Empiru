Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 11.60      0.08     0.08  4505825     0.00     0.00  FlatHexPosition::convert(FlatHexPosition::System, FlatHexPosition*) const
 10.15      0.15     0.07  1475904     0.00     0.00  math::mrnd(float)
  5.80      0.19     0.04   737952     0.00     0.00  FlatHexPosition::tile(FlatHexPosition*)
  4.35      0.22     0.03  1029976     0.00     0.00  FlatHexPosition::FlatHexPosition(float, float, float, FlatHexPosition::System)
  4.35      0.25     0.03   743376     0.00     0.00  std::tuple_element<0ul, std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > >::type const& std::get<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > const&)
  4.35      0.28     0.03   284315     0.00     0.00  FlatHexPosition::tile() const
  2.90      0.30     0.02  2815172     0.00     0.00  FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition::System)
  2.90      0.32     0.02   743375     0.00     0.00  std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::operator->() const
  2.90      0.34     0.02   247745     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node(unsigned long, FlatHexPosition const&, unsigned long) const
  2.90      0.36     0.02   247745     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, FlatHexPosition const&, unsigned long) const
  2.90      0.38     0.02   239722     0.00     0.00  World::width() const
  2.90      0.40     0.02   238828     0.00     0.00  TiledObjectRenderer::renderAt(int, int, int, SDL_Renderer*)
  2.17      0.42     0.02  4505825     0.00     0.00  FlatHexPosition::convert(FlatHexPosition::System)
  2.17      0.43     0.02   743376     0.00     0.00  std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> > const&)
  2.17      0.45     0.02   247791     0.00     0.00  SpriteSheet::width() const
  2.17      0.46     0.02   247790     0.00     0.00  SpriteSheet::renderFrame(unsigned int, unsigned int, SDL_Renderer*, SDL_Rect const*)
  2.17      0.48     0.02     4481     0.00     0.01  GameEngine::update()
  1.45      0.49     0.01  1012022     0.00     0.00  FlatHexPosition::FlatHexPosition(FlatHexPosition::System)
  1.45      0.50     0.01   781029     0.00     0.00  HexViewport::tileHeight() const
  1.45      0.51     0.01   743376     0.00     0.00  std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_ptr() const
  1.45      0.52     0.01   486627     0.00     0.00  std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*)
  1.45      0.53     0.01   252327     0.00     0.00  FlatHexPosition::operator*(Matrix22 const&) const
  1.45      0.54     0.01   247746     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(FlatHexPosition const&, unsigned long) const
  1.45      0.55     0.01   247745     0.00     0.00  HCHasher::operator()(FlatHexPosition const&) const
  1.45      0.56     0.01   238860     0.00     0.00  std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::end()
  1.45      0.57     0.01   238846     0.00     0.00  bool std::__detail::operator!=<std::pair<FlatHexPosition const, Tile>, true>(std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&, std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&)
  1.45      0.58     0.01     8966     0.00     0.00  FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition const&)
  1.45      0.59     0.01     8962     0.00     0.00  SmallObjectRenderer::renderAt(int, int, int, SDL_Renderer*)
  1.45      0.60     0.01     4481     0.00     0.00  AbstractCamera::update()
  1.45      0.61     0.01     4481     0.00     0.13  RenderingEngine::render()
  1.45      0.62     0.01     4481     0.00     0.00  Window::update()
  1.45      0.63     0.01     4481     0.00     0.00  HexViewport::upLeftCorner(FlatHexPosition*) const
  1.45      0.64     0.01       16     0.63     0.63  FlatHexPosition::FlatHexPosition(float, float, FlatHexPosition::System)
  1.45      0.65     0.01                             main
  0.72      0.65     0.01   743376     0.00     0.00  std::_Head_base<0ul, SpriteSheet*, false>::_M_head(std::_Head_base<0ul, SpriteSheet*, false> const&)
  0.72      0.66     0.01   743376     0.00     0.00  SpriteSheet* const& std::__get_helper<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> > const&)
  0.72      0.66     0.01    17941     0.00     0.00  std::__detail::_Hash_node_value_base<Peon*>::_M_v()
  0.72      0.67     0.01    13420     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_begin() const
  0.72      0.67     0.01     8962     0.00     0.00  GameEngine::peonTick(Peon*)
  0.72      0.68     0.01     8962     0.00     0.00  FlatHexPosition::distance(FlatHexPosition const&, FlatHexPosition const&)
  0.72      0.68     0.01       11     0.45     0.45  std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>::_M_head(std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>&)
  0.72      0.69     0.01        2     2.50     2.96  std::default_delete<SpriteSheet>& std::__get_helper<1ul, std::default_delete<SpriteSheet>>(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet>>&)
  0.72      0.69     0.01        2     2.50     5.46  std::tuple_element<1ul, std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > >::type& std::get<1ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&)
  0.00      0.69     0.00   743376     0.00     0.00  std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::get() const
  0.00      0.69     0.00   741811     0.00     0.00  FlatHexPosition::operator+(FlatHexPosition const&) const
  0.00      0.69     0.00   486616     0.00     0.00  std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*)
  0.00      0.69     0.00   468835     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::end()
  0.00      0.69     0.00   453637     0.00     0.00  FlatHexPosition::tile()
  0.00      0.69     0.00   270210     0.00     0.00  FlatHexPosition::operator-(FlatHexPosition const&) const
  0.00      0.69     0.00   260707     0.00     0.00  std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const
  0.00      0.69     0.00   260707     0.00     0.00  std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true>::_M_cget() const
  0.00      0.69     0.00   260649     0.00     0.00  std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h2() const
  0.00      0.69     0.00   253382     0.00     0.00  FlatHexPosition::operator*(float const&) const
  0.00      0.69     0.00   247791     0.00     0.00  SpriteSheet::height() const
  0.00      0.69     0.00   247790     0.00     0.00  AbstractCamera::getOrientation()
  0.00      0.69     0.00   247790     0.00     0.00  HexViewport::toPixel(FlatHexPosition const&, int*, int*) const
  0.00      0.69     0.00   247746     0.00     0.00  std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(FlatHexPosition const&, unsigned long, unsigned long) const
  0.00      0.69     0.00   247745     0.00     0.00  std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(FlatHexPosition const&) const
  0.00      0.69     0.00   247745     0.00     0.00  std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h1() const
  0.00      0.69     0.00   247745     0.00     0.00  std::__detail::_Hashtable_ebo_helper<1, HCHasher, true>::_M_cget() const
  0.00      0.69     0.00   247732     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(FlatHexPosition const&)
  0.00      0.69     0.00   247732     0.00     0.00  std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::find(FlatHexPosition const&)
  0.00      0.69     0.00   239029     0.00     0.00  World::height() const
  0.00      0.69     0.00   238834     0.00     0.00  World::getContentAt(FlatHexPosition)
  0.00      0.69     0.00    58253     0.00     0.00  HexViewport::tileWidth() const
  0.00      0.69     0.00    46234     0.00     0.00  std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals(FlatHexPosition const&, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const
  0.00      0.69     0.00    46234     0.00     0.00  std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_Equal_hash_code<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::_S_equals(unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> const&)
  0.00      0.69     0.00    31282     0.00     0.00  bool std::__detail::operator!=<Peon*, false>(std::__detail::_Node_iterator_base<Peon*, false> const&, std::__detail::_Node_iterator_base<Peon*, false> const&)
  0.00      0.69     0.00    26734     0.00     0.00  std::__detail::_Node_iterator_base<Peon*, false>::_Node_iterator_base(std::__detail::_Hash_node<Peon*, false>*)
  0.00      0.69     0.00    26693     0.00     0.00  __gnu_cxx::__aligned_buffer<std::pair<FlatHexPosition const, Tile> >::_M_ptr()
  0.00      0.69     0.00    26693     0.00     0.00  __gnu_cxx::__aligned_buffer<std::pair<FlatHexPosition const, Tile> >::_M_addr()
  0.00      0.69     0.00    26693     0.00     0.00  std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_M_valptr()
  0.00      0.69     0.00    18999     0.00     0.00  Peon::pos() const
  0.00      0.69     0.00    18813     0.00     0.00  FlatHexPosition::operator==(FlatHexPosition const&) const
  0.00      0.69     0.00    17973     0.00     0.00  __gnu_cxx::__aligned_buffer<Peon*>::_M_ptr()
  0.00      0.69     0.00    17973     0.00     0.00  __gnu_cxx::__aligned_buffer<Peon*>::_M_addr()
  0.00      0.69     0.00    17973     0.00     0.00  std::__detail::_Hash_node_value_base<Peon*>::_M_valptr()
  0.00      0.69     0.00    17960     0.00     0.00  std::__detail::_Hash_node<Peon*, false>::_M_next() const
  0.00      0.69     0.00    17937     0.00     0.00  FlatHexPosition::FlatHexPosition()
  0.00      0.69     0.00    17929     0.00     0.00  std::__detail::_Node_iterator_base<Peon*, false>::_M_incr()
  0.00      0.69     0.00    17770     0.00     0.00  decltype ((get<0>)((forward<std::pair<FlatHexPosition const, Tile>&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<FlatHexPosition const, Tile>&>(std::pair<FlatHexPosition const, Tile>&) const
  0.00      0.69     0.00    17770     0.00     0.00  std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_extract() const
  0.00      0.69     0.00    17770     0.00     0.00  std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>::_M_cget() const
  0.00      0.69     0.00    17770     0.00     0.00  FlatHexPosition const& std::__pair_get<0ul>::__get<FlatHexPosition const, Tile>(std::pair<FlatHexPosition const, Tile>&)
  0.00      0.69     0.00    17770     0.00     0.00  std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_M_v()
  0.00      0.69     0.00    17770     0.00     0.00  std::tuple_element<0ul, std::pair<FlatHexPosition const, Tile> >::type& std::get<0ul, FlatHexPosition const, Tile>(std::pair<FlatHexPosition const, Tile>&)
  0.00      0.69     0.00    17770     0.00     0.00  std::pair<FlatHexPosition const, Tile>& std::forward<std::pair<FlatHexPosition const, Tile>&>(std::remove_reference<std::pair<FlatHexPosition const, Tile>&>::type&)
  0.00      0.69     0.00    17757     0.00     0.00  HCEquals::operator()(FlatHexPosition const&, FlatHexPosition const&) const
  0.00      0.69     0.00    17757     0.00     0.00  std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_eq() const
  0.00      0.69     0.00    17757     0.00     0.00  std::__detail::_Hashtable_ebo_helper<0, HCEquals, true>::_M_cget() const
  0.00      0.69     0.00    17744     0.00     0.00  std::__detail::_Node_const_iterator<Peon*, true, false>::_Node_const_iterator(std::__detail::_Hash_node<Peon*, false>*)
  0.00      0.69     0.00    16868     0.00     0.00  Peon::targetPos() const
  0.00      0.69     0.00    12916     0.00     0.00  std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>::_M_next() const
  0.00      0.69     0.00    12903     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const
  0.00      0.69     0.00    12903     0.00     0.00  std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> const*, unsigned long) const
  0.00      0.69     0.00     8990     0.00     0.00  std::__detail::_Node_iterator<Peon*, true, false>::_Node_iterator(std::__detail::_Hash_node<Peon*, false>*)
  0.00      0.69     0.00     8967     0.00     0.00  std::__detail::_Node_const_iterator<Peon*, true, false>::operator*() const
  0.00      0.69     0.00     8967     0.00     0.00  std::__detail::_Node_const_iterator<Peon*, true, false>::operator++()
  0.00      0.69     0.00     8962     0.00     0.00  Peon::pos(FlatHexPosition const&)
  0.00      0.69     0.00     8962     0.00     0.00  std::__detail::_Node_iterator<Peon*, true, false>::operator*() const
  0.00      0.69     0.00     8962     0.00     0.00  std::__detail::_Node_iterator<Peon*, true, false>::operator++()
  0.00      0.69     0.00     8897     0.00     0.00  std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::operator->() const
  0.00      0.69     0.00     8872     0.00     0.00  Tile::getContent() const
  0.00      0.69     0.00     8872     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::end() const
  0.00      0.69     0.00     8872     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::begin() const
  0.00      0.69     0.00     8872     0.00     0.00  std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::end() const
  0.00      0.69     0.00     8872     0.00     0.00  std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::begin() const
  0.00      0.69     0.00     4482     0.00     0.00  SDLHandler::handleSDLEvents()
  0.00      0.69     0.00     4481     0.00     0.00  Window::clear()
  0.00      0.69     0.00     4481     0.00     0.00  HexViewport::viewPortAxis(FlatHexPosition*, FlatHexPosition*) const
  0.00      0.69     0.00     4481     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::end()
  0.00      0.69     0.00     4481     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::begin()
  0.00      0.69     0.00     4481     0.00     0.00  std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::end()
  0.00      0.69     0.00     4481     0.00     0.00  std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::begin()
  0.00      0.69     0.00     2997     0.00     0.00  SDLHandler::handleMouseMovement(SDL_MouseMotionEvent const&)
  0.00      0.69     0.00     1056     0.00     0.00  FlatHexPosition::operator!=(FlatHexPosition const&) const
  0.00      0.69     0.00     1056     0.00     0.00  Peon::direction() const
  0.00      0.69     0.00      224     0.00     0.00  std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)
  0.00      0.69     0.00      112     0.00     0.00  Peon* const& std::forward<Peon* const&>(std::remove_reference<Peon* const&>::type&)
  0.00      0.69     0.00      112     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)
  0.00      0.69     0.00      104     0.00     0.00  Tile&& std::forward<Tile>(std::remove_reference<Tile>::type&)
  0.00      0.69     0.00       92     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_node_allocator()
  0.00      0.69     0.00       92     0.00     0.00  std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::_M_get()
  0.00      0.69     0.00       91     0.00     0.00  FlatHexPosition const& std::forward<FlatHexPosition const&>(std::remove_reference<FlatHexPosition const&>::type&)
  0.00      0.69     0.00       84     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...)
  0.00      0.69     0.00       84     0.00     0.00  bool __gnu_cxx::__is_null_pointer<char>(char*)
  0.00      0.69     0.00       84     0.00     0.00  std::integral_constant<bool, true>::operator bool() const
  0.00      0.69     0.00       84     0.00     0.00  void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*)
  0.00      0.69     0.00       84     0.00     0.00  void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)
  0.00      0.69     0.00       84     0.00     0.00  void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type)
  0.00      0.69     0.00       84     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&)
  0.00      0.69     0.00       84     0.00     0.00  std::__cxx11::to_string(float)
  0.00      0.69     0.00       84     0.00     0.00  std::iterator_traits<char*>::difference_type std::__distance<char*>(char*, char*, std::random_access_iterator_tag)
  0.00      0.69     0.00       84     0.00     0.00  std::iterator_traits<char*>::iterator_category std::__iterator_category<char*>(char* const&)
  0.00      0.69     0.00       84     0.00     0.00  std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*)
  0.00      0.69     0.00       84     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
  0.00      0.69     0.00       58     0.00     0.00  std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h2() const
  0.00      0.69     0.00       58     0.00     0.00  operator new(unsigned long, void*)
  0.00      0.69     0.00       54     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const
  0.00      0.69     0.00       54     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_node_allocator()
  0.00      0.69     0.00       54     0.00     0.00  std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >, true>::_M_get()
  0.00      0.69     0.00       45     0.00     0.00  HexViewport::target(FlatHexPosition const&)
  0.00      0.69     0.00       44     0.00     0.00  HexViewport::target() const
  0.00      0.69     0.00       44     0.00     0.00  std::hash<Peon*>::operator()(Peon*) const
  0.00      0.69     0.00       44     0.00     0.00  std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_extract() const
  0.00      0.69     0.00       44     0.00     0.00  std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h1() const
  0.00      0.69     0.00       44     0.00     0.00  std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Identity, true>::_M_cget() const
  0.00      0.69     0.00       44     0.00     0.00  std::__detail::_Hashtable_ebo_helper<1, std::hash<Peon*>, true>::_M_cget() const
  0.00      0.69     0.00       44     0.00     0.00  std::__detail::_Hash_node_base::_Hash_node_base()
  0.00      0.69     0.00       42     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_bucket_index(Peon* const&, unsigned long) const
  0.00      0.69     0.00       42     0.00     0.00  std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(Peon* const&, unsigned long, unsigned long) const
  0.00      0.69     0.00       41     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long)
  0.00      0.69     0.00       41     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets()
  0.00      0.69     0.00       35     0.00     0.00  Camera::doUpdateUDScroll(float)
  0.00      0.69     0.00       32     0.00     0.00  Peon* const& std::__detail::_Identity::operator()<Peon* const&>(Peon* const&) const
  0.00      0.69     0.00       31     0.00     0.00  std::_Head_base<0ul, SpriteSheet*, false>::_M_head(std::_Head_base<0ul, SpriteSheet*, false>&)
  0.00      0.69     0.00       31     0.00     0.00  std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&)
  0.00      0.69     0.00       30     0.00     0.00  __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::new_allocator()
  0.00      0.69     0.00       30     0.00     0.00  __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::~new_allocator()
  0.00      0.69     0.00       30     0.00     0.00  std::allocator<std::__detail::_Hash_node_base*>::~allocator()
  0.00      0.69     0.00       29     0.00     0.00  std::__detail::_Prime_rehash_policy::_M_state() const
  0.00      0.69     0.00       29     0.00     0.00  bool&& std::forward<bool>(std::remove_reference<bool>::type&)
  0.00      0.69     0.00       28     0.00     0.00  FlatHexPosition::systemString[abi:cxx11](FlatHexPosition::System)
  0.00      0.69     0.00       28     0.00     0.00  FlatHexPosition::toString[abi:cxx11]() const
  0.00      0.69     0.00       28     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_find_before_node(unsigned long, Peon* const&, unsigned long) const
  0.00      0.69     0.00       28     0.00     0.00  std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(Peon* const&) const
  0.00      0.69     0.00       28     0.00     0.00  std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<Peon*, false> >(std::allocator<std::__detail::_Hash_node<Peon*, false> > const&)
  0.00      0.69     0.00       28     0.00     0.00  std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
  0.00      0.69     0.00       27     0.00     0.00  __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::~new_allocator()
  0.00      0.69     0.00       27     0.00     0.00  std::allocator<std::__detail::_Hash_node<Peon*, false> >::~allocator()
  0.00      0.69     0.00       27     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::clear()
  0.00      0.69     0.00       27     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::~_Hashtable()
  0.00      0.69     0.00       27     0.00     0.00  std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::~unordered_set()
  0.00      0.69     0.00       27     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<Peon*, false>*)
  0.00      0.69     0.00       27     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::~_Hashtable_alloc()
  0.00      0.69     0.00       27     0.00     0.00  std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::~_Hashtable_ebo_helper()
  0.00      0.69     0.00       26     0.00     0.00  Tile::~Tile()
  0.00      0.69     0.00       22     0.00     0.00  std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_ptr()
  0.00      0.69     0.00       22     0.00     0.00  SpriteSheet*& std::__get_helper<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&)
  0.00      0.69     0.00       22     0.00     0.00  std::tuple_element<0ul, std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > >::type& std::get<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&)
  0.00      0.69     0.00       19     0.00     0.00  SDLHandler::handleKeyUp(SDL_KeyboardEvent const&)
  0.00      0.69     0.00       19     0.00     0.00  SDLHandler::handleKeyDown(SDL_KeyboardEvent const&)
  0.00      0.69     0.00       18     0.00     0.00  SpriteSheet*&& std::forward<SpriteSheet*>(std::remove_reference<SpriteSheet*>::type&)
  0.00      0.69     0.00       18     0.00     0.00  std::default_delete<SpriteSheet>&& std::forward<std::default_delete<SpriteSheet> >(std::remove_reference<std::default_delete<SpriteSheet> >::type&)
  0.00      0.69     0.00       17     0.00     0.00  Matrix22::Matrix22(float, float, float, float)
  0.00      0.69     0.00       16     0.00     0.00  __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::deallocate(std::__detail::_Hash_node<Peon*, false>*, unsigned long)
  0.00      0.69     0.00       16     0.00     0.00  void __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::destroy<Peon*>(Peon**)
  0.00      0.69     0.00       16     0.00     0.00  __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::allocate(unsigned long, void const*)
  0.00      0.69     0.00       16     0.00     0.00  void __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::construct<Peon*, Peon* const&>(Peon**, Peon* const&)
  0.00      0.69     0.00       16     0.00     0.00  __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::_M_max_size() const
  0.00      0.69     0.00       16     0.00     0.00  __gnu_cxx::__aligned_buffer<Peon*>::_M_ptr() const
  0.00      0.69     0.00       16     0.00     0.00  __gnu_cxx::__aligned_buffer<Peon*>::_M_addr() const
  0.00      0.69     0.00       16     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_find_node(unsigned long, Peon* const&, unsigned long) const
  0.00      0.69     0.00       16     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_bucket_index(std::__detail::_Hash_node<Peon*, false>*) const
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_Hash_node<Peon*, false>* std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::operator()<Peon* const&>(Peon* const&) const
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_store_code(std::__detail::_Hash_node<Peon*, false>*, unsigned long) const
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node<Peon*, false> const*, unsigned long) const
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_Hash_node_value_base<Peon*>::_M_v() const
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_Hash_node_value_base<Peon*>::_M_valptr() const
  0.00      0.69     0.00       16     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Scoped_node::_Scoped_node(std::__detail::_Hash_node<Peon*, false>*, std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >*)
  0.00      0.69     0.00       16     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Scoped_node::~_Scoped_node()
  0.00      0.69     0.00       16     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(Peon* const&, unsigned long, unsigned long, std::__detail::_Hash_node<Peon*, false>*, unsigned long)
  0.00      0.69     0.00       16     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<Peon*, false>*)
  0.00      0.69     0.00       16     0.00     0.00  std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool> std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > >(Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > const&, std::integral_constant<bool, true>, unsigned long)
  0.00      0.69     0.00       16     0.00     0.00  std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::insert(Peon* const&)
  0.00      0.69     0.00       16     0.00     0.00  std::pointer_traits<std::__detail::_Hash_node<Peon*, false>*>::pointer_to(std::__detail::_Hash_node<Peon*, false>&)
  0.00      0.69     0.00       16     0.00     0.00  std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::deallocate(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, std::__detail::_Hash_node<Peon*, false>*, unsigned long)
  0.00      0.69     0.00       16     0.00     0.00  void std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::destroy<Peon*>(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, Peon**)
  0.00      0.69     0.00       16     0.00     0.00  std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::allocate(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, unsigned long)
  0.00      0.69     0.00       16     0.00     0.00  void std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::construct<Peon*, Peon* const&>(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, Peon**, Peon* const&)
  0.00      0.69     0.00       16     0.00     0.00  std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool>::pair<std::__detail::_Node_iterator<Peon*, true, false>&, bool, true>(std::__detail::_Node_iterator<Peon*, true, false>&, bool&&)
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_AllocNode(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&)
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_Hash_node<Peon*, false>::_Hash_node()
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_Insert_base<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_conjure_hashtable()
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_Insert_base<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::insert(Peon* const&)
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_Hash_node<Peon*, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_node<Peon* const&>(Peon* const&)
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_node(std::__detail::_Hash_node<Peon*, false>*)
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<Peon*, false>*)
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_Hash_node_value_base<Peon*>::_Hash_node_value_base()
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_Hash_node<Peon*, false>* std::__addressof<std::__detail::_Hash_node<Peon*, false> >(std::__detail::_Hash_node<Peon*, false>&)
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_Hash_node<Peon*, false>* std::__to_address<std::__detail::_Hash_node<Peon*, false> >(std::__detail::_Hash_node<Peon*, false>*)
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_Node_iterator<Peon*, true, false>& std::forward<std::__detail::_Node_iterator<Peon*, true, false>&>(std::remove_reference<std::__detail::_Node_iterator<Peon*, true, false>&>::type&)
  0.00      0.69     0.00       16     0.00     0.00  std::__detail::_Hash_node<Peon*, false>* std::addressof<std::__detail::_Hash_node<Peon*, false> >(std::__detail::_Hash_node<Peon*, false>&)
  0.00      0.69     0.00       15     0.00     0.00  __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::deallocate(std::__detail::_Hash_node_base**, unsigned long)
  0.00      0.69     0.00       15     0.00     0.00  __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::allocate(unsigned long, void const*)
  0.00      0.69     0.00       15     0.00     0.00  __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::_M_max_size() const
  0.00      0.69     0.00       15     0.00     0.00  std::pointer_traits<std::__detail::_Hash_node_base**>::pointer_to(std::__detail::_Hash_node_base*&)
  0.00      0.69     0.00       15     0.00     0.00  std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::deallocate(std::allocator<std::__detail::_Hash_node_base*>&, std::__detail::_Hash_node_base**, unsigned long)
  0.00      0.69     0.00       15     0.00     0.00  std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::allocate(std::allocator<std::__detail::_Hash_node_base*>&, unsigned long)
  0.00      0.69     0.00       15     0.00     0.00  std::__detail::_Prime_rehash_policy::_Prime_rehash_policy(float)
  0.00      0.69     0.00       15     0.00     0.00  std::__detail::_Hash_node_base** std::__addressof<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base*&)
  0.00      0.69     0.00       15     0.00     0.00  std::__detail::_Hash_node_base** std::__to_address<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base**)
  0.00      0.69     0.00       15     0.00     0.00  std::__detail::_Hash_node_base** std::addressof<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base*&)
  0.00      0.69     0.00       14     0.00     0.00  HexViewport::rotation(Matrix22 const&)
  0.00      0.69     0.00       14     0.00     0.00  World::addObject(Peon*)
  0.00      0.69     0.00       14     0.00     0.00  __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::new_allocator()
  0.00      0.69     0.00       14     0.00     0.00  HexViewport::rotation() const
  0.00      0.69     0.00       14     0.00     0.00  Matrix22::operator*(Matrix22 const&) const
  0.00      0.69     0.00       14     0.00     0.00  std::allocator<std::__detail::_Hash_node<Peon*, false> >::allocator()
  0.00      0.69     0.00       14     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)
  0.00      0.69     0.00       14     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_allocate_buckets(unsigned long)
  0.00      0.69     0.00       14     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash(unsigned long, unsigned long const&)
  0.00      0.69     0.00       14     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable()
  0.00      0.69     0.00       14     0.00     0.00  std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::unordered_set()
  0.00      0.69     0.00       14     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_buckets(unsigned long)
  0.00      0.69     0.00       14     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long)
  0.00      0.69     0.00       14     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_Hashtable_alloc()
  0.00      0.69     0.00       14     0.00     0.00  std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::_Hashtable_ebo_helper()
  0.00      0.69     0.00       14     0.00     0.00  bool std::__detail::operator==<std::pair<FlatHexPosition const, Tile>, true>(std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&, std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&)
  0.00      0.69     0.00       13     0.00     0.00  Tile::Tile(Tile&&)
  0.00      0.69     0.00       13     0.00     0.00  Tile::Tile(FlatHexPosition, Peon*)
  0.00      0.69     0.00       13     0.00     0.00  __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::new_allocator(__gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> > const&)
  0.00      0.69     0.00       13     0.00     0.00  __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::deallocate(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long)
  0.00      0.69     0.00       13     0.00     0.00  void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::destroy<std::pair<FlatHexPosition const, Tile> >(std::pair<FlatHexPosition const, Tile>*)
  0.00      0.69     0.00       13     0.00     0.00  __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::allocate(unsigned long, void const*)
  0.00      0.69     0.00       13     0.00     0.00  void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::construct<std::pair<FlatHexPosition const, Tile>, FlatHexPosition const&, Tile>(std::pair<FlatHexPosition const, Tile>*, FlatHexPosition const&, Tile&&)
  0.00      0.69     0.00       13     0.00     0.00  __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::_M_max_size() const
  0.00      0.69     0.00       13     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_uses_single_bucket() const
  0.00      0.69     0.00       13     0.00     0.00  std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_store_code(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) const
  0.00      0.69     0.00       13     0.00     0.00  std::allocator<std::__detail::_Hash_node<Peon*, false> >::allocator(std::allocator<std::__detail::_Hash_node<Peon*, false> > const&)
  0.00      0.69     0.00       13     0.00     0.00  std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<FlatHexPosition const&, Tile>(std::integral_constant<bool, true>, FlatHexPosition const&, Tile&&)
  0.00      0.69     0.00       13     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Scoped_node::_Scoped_node<FlatHexPosition const&, Tile>(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >*, FlatHexPosition const&, Tile&&)
  0.00      0.69     0.00       13     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Scoped_node::~_Scoped_node()
  0.00      0.69     0.00       13     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(FlatHexPosition const&, unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long)
  0.00      0.69     0.00       13     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*)
  0.00      0.69     0.00       13     0.00     0.00  std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::emplace<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&)
  0.00      0.69     0.00       13     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_base_alloc()
  0.00      0.69     0.00       13     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_reset()
  0.00      0.69     0.00       13     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable(std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >&&)
  0.00      0.69     0.00       13     0.00     0.00  std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::emplace<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&)
  0.00      0.69     0.00       13     0.00     0.00  std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::unordered_set(std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >&&)
  0.00      0.69     0.00       13     0.00     0.00  std::pointer_traits<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*>::pointer_to(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>&)
  0.00      0.69     0.00       13     0.00     0.00  std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::deallocate(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long)
  0.00      0.69     0.00       13     0.00     0.00  void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::destroy<std::pair<FlatHexPosition const, Tile> >(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::pair<FlatHexPosition const, Tile>*)
  0.00      0.69     0.00       13     0.00     0.00  std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::allocate(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, unsigned long)
  0.00      0.69     0.00       13     0.00     0.00  void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::construct<std::pair<FlatHexPosition const, Tile>, FlatHexPosition const&, Tile>(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::pair<FlatHexPosition const, Tile>*, FlatHexPosition const&, Tile&&)
  0.00      0.69     0.00       13     0.00     0.00  std::pair<FlatHexPosition const, Tile>::pair<Tile, true>(FlatHexPosition const&, Tile&&)
  0.00      0.69     0.00       13     0.00     0.00  std::pair<FlatHexPosition const, Tile>::~pair()
  0.00      0.69     0.00       13     0.00     0.00  std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool>::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&, bool, true>(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&, bool&&)
  0.00      0.69     0.00       13     0.00     0.00  std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>::_Hash_node()
  0.00      0.69     0.00       13     0.00     0.00  std::__detail::_Hash_node_base::_Hash_node_base(std::__detail::_Hash_node_base*)
  0.00      0.69     0.00       13     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_Hashtable_alloc(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&&)
  0.00      0.69     0.00       13     0.00     0.00  std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_node<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&)
  0.00      0.69     0.00       13     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*)
  0.00      0.69     0.00       13     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*)
  0.00      0.69     0.00       13     0.00     0.00  std::__detail::_Prime_rehash_policy::_M_reset()
  0.00      0.69     0.00       13     0.00     0.00  std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_Hash_node_value_base()
  0.00      0.69     0.00       13     0.00     0.00  std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::_Hashtable_ebo_helper(std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>&&)
  0.00      0.69     0.00       13     0.00     0.00  std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__addressof<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>&)
  0.00      0.69     0.00       13     0.00     0.00  std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__to_address<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*)
  0.00      0.69     0.00       13     0.00     0.00  std::remove_reference<std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&>::type&& std::move<std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&>(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&)
  0.00      0.69     0.00       13     0.00     0.00  std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>& std::forward<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&>(std::remove_reference<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&>::type&)
  0.00      0.69     0.00       13     0.00     0.00  std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::addressof<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>&)
  0.00      0.69     0.00       12     0.00     0.00  Tile::erase(Peon*)
  0.00      0.69     0.00       12     0.00     0.00  World::removeObject(FlatHexPosition const&, Peon*)
  0.00      0.69     0.00       12     0.00     0.00  Tile::isEmpty() const
  0.00      0.69     0.00       12     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::size() const
  0.00      0.69     0.00       12     0.00     0.00  std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::size() const
  0.00      0.69     0.00       12     0.00     0.00  std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_M_eq() const
  0.00      0.69     0.00       12     0.00     0.00  std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_M_equals(Peon* const&, unsigned long, std::__detail::_Hash_node<Peon*, false>*) const
  0.00      0.69     0.00       12     0.00     0.00  std::__detail::_Hashtable_ebo_helper<0, std::equal_to<Peon*>, true>::_M_cget() const
  0.00      0.69     0.00       12     0.00     0.00  Peon*& std::__detail::_Identity::operator()<Peon*&>(Peon*&) const
  0.00      0.69     0.00       12     0.00     0.00  std::equal_to<Peon*>::operator()(Peon* const&, Peon* const&) const
  0.00      0.69     0.00       12     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_remove_bucket_begin(unsigned long, std::__detail::_Hash_node<Peon*, false>*, unsigned long)
  0.00      0.69     0.00       12     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::erase(Peon* const&)
  0.00      0.69     0.00       12     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(std::integral_constant<bool, true>, Peon* const&)
  0.00      0.69     0.00       12     0.00     0.00  std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<Peon*, false>*)
  0.00      0.69     0.00       12     0.00     0.00  std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::erase(Peon* const&)
  0.00      0.69     0.00       12     0.00     0.00  std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_Equal_hash_code<std::__detail::_Hash_node<Peon*, false> >::_S_equals(unsigned long, std::__detail::_Hash_node<Peon*, false> const&)
  0.00      0.69     0.00       12     0.00     0.00  Peon*& std::forward<Peon*&>(std::remove_reference<Peon*&>::type&)
  0.00      0.69     0.00       11     0.00     0.63  SDLHandler::handleMouseButtonDown(SDL_MouseButtonEvent const&)
  0.00      0.69     0.00       11     0.00     0.63  HexViewport::fromPixel(int, int, FlatHexPosition*) const
  0.00      0.69     0.00       11     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_get_previous_node(unsigned long, std::__detail::_Hash_node_base*)
  0.00      0.69     0.00       11     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_remove_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long)
  0.00      0.69     0.00       11     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>)
  0.00      0.69     0.00       11     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<FlatHexPosition const, Tile>, false, true>)
  0.00      0.69     0.00       11     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*)
  0.00      0.69     0.00       11     0.00     0.99  std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::~unique_ptr()
  0.00      0.69     0.00       11     0.00     0.45  std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&)
  0.00      0.69     0.00       11     0.00     0.00  std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::erase(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>)
  0.00      0.69     0.00       11     0.00     0.00  std::__detail::_Node_const_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::_Node_const_iterator(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true> const&)
  0.00      0.69     0.00       10     0.00     0.00  AbstractCamera::rotateLeft()
  0.00      0.69     0.00       10     0.00     0.00  Camera::doRotateLeft()
  0.00      0.69     0.00        9     0.00     0.00  ControllerState::selectedPeon()
  0.00      0.69     0.00        9     0.00     0.00  Camera::doUpdateLRScroll(float)
  0.00      0.69     0.00        9     0.00     0.00  std::_Head_base<0ul, SpriteSheet*, false>::_Head_base<SpriteSheet*>(SpriteSheet*&&)
  0.00      0.69     0.00        9     0.00     0.00  std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>::_Head_base<std::default_delete<SpriteSheet> >(std::default_delete<SpriteSheet>&&)
  0.00      0.69     0.00        9     0.00     0.45  std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::unique_ptr(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&&)
  0.00      0.69     0.00        9     0.00     0.00  std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_M_tail(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&)
  0.00      0.69     0.00        9     0.00     0.45  std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&&)
  0.00      0.69     0.00        9     0.00     0.45  std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&&)
  0.00      0.69     0.00        9     0.00     0.45  std::__uniq_ptr_data<SpriteSheet, std::default_delete<SpriteSheet>, true, true>::__uniq_ptr_data(std::__uniq_ptr_data<SpriteSheet, std::default_delete<SpriteSheet>, true, true>&&)
  0.00      0.69     0.00        9     0.00     0.45  std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::__uniq_ptr_impl(std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >&&)
  0.00      0.69     0.00        9     0.00     0.45  std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >::tuple(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&&)
  0.00      0.69     0.00        9     0.00     0.00  std::remove_reference<std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&>::type&& std::move<std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&>(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&)
  0.00      0.69     0.00        9     0.00     0.00  std::remove_reference<std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&>::type&& std::move<std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&>(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&)
  0.00      0.69     0.00        6     0.00     0.00  Controller::leftClickAt(FlatHexPosition const&)
  0.00      0.69     0.00        6     0.00     0.00  std::remove_reference<std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&>::type&& std::move<std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&>(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&)
  0.00      0.69     0.00        5     0.00     0.00  Controller::rightClickAt(FlatHexPosition const&)
  0.00      0.69     0.00        5     0.00     0.00  ControllerState::selectPeon(Peon*)
  0.00      0.69     0.00        4     0.00     0.00  AbstractCamera::rotateRight()
  0.00      0.69     0.00        4     0.00     0.00  FlatHexPosition::unit(FlatHexPosition*)
  0.00      0.69     0.00        4     0.00     0.00  FlatHexPosition::unit()
  0.00      0.69     0.00        4     0.00     0.00  Peon::setTargetPos(FlatHexPosition const&)
  0.00      0.69     0.00        4     0.00     0.00  Camera::doRotateRight()
  0.00      0.69     0.00        4     0.00     0.00  unsigned int& std::forward<unsigned int&>(std::remove_reference<unsigned int&>::type&)
  0.00      0.69     0.00        4     0.00     0.00  int&& std::forward<int>(std::remove_reference<int>::type&)
  0.00      0.69     0.00        3     0.00     0.00  SpriteSheet::recut(unsigned int, unsigned int)
  0.00      0.69     0.00        3     0.00     0.00  AbstractCamera::scrollDown()
  0.00      0.69     0.00        3     0.00     0.00  AbstractCamera::stopUDScroll()
  0.00      0.69     0.00        2     0.00     0.00  GameEngine::addPeon(Peon*)
  0.00      0.69     0.00        2     0.00     1.45  SpriteSheet::loadFromFile(char const*, unsigned int, unsigned int, SDL_Renderer*)
  0.00      0.69     0.00        2     0.00     0.00  SpriteSheet::SpriteSheet(SDL_Texture*, int, int, unsigned int, unsigned int)
  0.00      0.69     0.00        2     0.00     0.00  SpriteSheet::~SpriteSheet()
  0.00      0.69     0.00        2     0.00     0.45  AbstractRenderer::AbstractRenderer(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >)
  0.00      0.69     0.00        2     0.00     0.99  AbstractRenderer::~AbstractRenderer()
  0.00      0.69     0.00        2     0.00     0.00  Peon::Peon(FlatHexPosition const&)
  0.00      0.69     0.00        2     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const
  0.00      0.69     0.00        2     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_begin() const
  0.00      0.69     0.00        2     0.00     0.00  std::default_delete<SpriteSheet>::operator()(SpriteSheet*) const
  0.00      0.69     0.00        2     0.00     0.00  std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > const&)
  0.00      0.69     0.00        2     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long)
  0.00      0.69     0.00        2     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets()
  0.00      0.69     0.00        2     0.00     0.00  std::_Head_base<0ul, SpriteSheet*, false>::_Head_base()
  0.00      0.69     0.00        2     0.00     0.00  std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>::_Head_base()
  0.00      0.69     0.00        2     0.00     5.46  std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::get_deleter()
  0.00      0.69     0.00        2     0.00     0.00  std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::unique_ptr<std::default_delete<SpriteSheet>, void>(SpriteSheet*)
  0.00      0.69     0.00        2     0.00     0.00  std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_Tuple_impl()
  0.00      0.69     0.00        2     0.00     0.00  std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_Tuple_impl()
  0.00      0.69     0.00        2     0.00     0.00  std::__uniq_ptr_data<SpriteSheet, std::default_delete<SpriteSheet>, true, true>::__uniq_ptr_impl(SpriteSheet*)
  0.00      0.69     0.00        2     0.00     5.46  std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_deleter()
  0.00      0.69     0.00        2     0.00     0.00  std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::__uniq_ptr_impl(SpriteSheet*)
  0.00      0.69     0.00        2     0.00     0.00  std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >::tuple<true, true>()
  0.00      0.69     0.00        2     0.00     0.00  std::_MakeUniq<SpriteSheet>::__single_object std::make_unique<SpriteSheet, SDL_Texture*&, int, int, unsigned int&, unsigned int&>(SDL_Texture*&, int&&, int&&, unsigned int&, unsigned int&)
  0.00      0.69     0.00        2     0.00     0.00  std::remove_reference<SpriteSheet*&>::type&& std::move<SpriteSheet*&>(SpriteSheet*&)
  0.00      0.69     0.00        2     0.00     0.00  SDL_Texture*& std::forward<SDL_Texture*&>(std::remove_reference<SDL_Texture*&>::type&)
  0.00      0.69     0.00        1     0.00     1.25  _GLOBAL__sub_I__ZN11HexViewport11ROTATE_LEFTE
  0.00      0.69     0.00        1     0.00     1.25  __static_initialization_and_destruction_0(int, int)
  0.00      0.69     0.00        1     0.00     0.00  Controller::Controller(World*)
  0.00      0.69     0.00        1     0.00     0.00  GameEngine::GameEngine(World*)
  0.00      0.69     0.00        1     0.00     0.00  GameEngine::~GameEngine()
  0.00      0.69     0.00        1     0.00     0.00  SDLHandler::SDLHandler(AbstractCamera*, HexViewport*, Controller*)
  0.00      0.69     0.00        1     0.00     0.00  HexViewport::HexViewport(int, int, int, int)
  0.00      0.69     0.00        1     0.00     2.89  SpriteAsset::loadFromFile(char const*, SDL_Renderer*)
  0.00      0.69     0.00        1     0.00     0.00  AbstractCamera::scrollRight()
  0.00      0.69     0.00        1     0.00     0.00  AbstractCamera::stopLRScroll()
  0.00      0.69     0.00        1     0.00     0.00  AbstractCamera::AbstractCamera(float, float, int)
  0.00      0.69     0.00        1     0.00     0.00  ControllerState::deselectPeon()
  0.00      0.69     0.00        1     0.00     0.00  ControllerState::ControllerState()
  0.00      0.69     0.00        1     0.00     0.00  FlatHexPosition::FlatHexPosition(float, float, float, float, FlatHexPosition::System)
  0.00      0.69     0.00        1     0.00     0.00  RenderingEngine::RenderingEngine(Window*, HexViewport*, AbstractCamera*, World*, AbstractRenderer*, AbstractRenderer*)
  0.00      0.69     0.00        1     0.00     1.90  SmallObjectRenderer::SmallObjectRenderer(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >)
  0.00      0.69     0.00        1     0.00     0.99  SmallObjectRenderer::~SmallObjectRenderer()
  0.00      0.69     0.00        1     0.00     1.90  TiledObjectRenderer::TiledObjectRenderer(HexViewport*, std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >)
  0.00      0.69     0.00        1     0.00     0.99  TiledObjectRenderer::~TiledObjectRenderer()
  0.00      0.69     0.00        1     0.00     0.00  Tile::insert(Peon*)
  0.00      0.69     0.00        1     0.00     0.00  World::World(int, int)
  0.00      0.69     0.00        1     0.00     0.00  World::~World()
  0.00      0.69     0.00        1     0.00     0.00  Camera::Camera(int, int, int, int, int, int)
  0.00      0.69     0.00        1     0.00     0.00  Window::createWindow(int, int)
  0.00      0.69     0.00        1     0.00     0.00  Window::Window(SDL_Window*, SDL_Renderer*, int, int)
  0.00      0.69     0.00        1     0.00     0.00  Window::~Window()
  0.00      0.69     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::new_allocator()
  0.00      0.69     0.00        1     0.00     0.00  __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::~new_allocator()
  0.00      0.69     0.00        1     0.00     0.00  std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::operator bool() const
  0.00      0.69     0.00        1     0.00     0.00  std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::allocator()
  0.00      0.69     0.00        1     0.00     0.00  std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::~allocator()
  0.00      0.69     0.00        1     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>)
  0.00      0.69     0.00        1     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_allocate_buckets(unsigned long)
  0.00      0.69     0.00        1     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear()
  0.00      0.69     0.00        1     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash(unsigned long, unsigned long const&)
  0.00      0.69     0.00        1     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Hashtable()
  0.00      0.69     0.00        1     0.00     0.00  std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable()
  0.00      0.69     0.00        1     0.00     0.00  std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::unordered_map()
  0.00      0.69     0.00        1     0.00     0.00  std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::~unordered_map()
  0.00      0.69     0.00        1     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_buckets(unsigned long)
  0.00      0.69     0.00        1     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*)
  0.00      0.69     0.00        1     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long)
  0.00      0.69     0.00        1     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_Hashtable_alloc()
  0.00      0.69     0.00        1     0.00     0.00  std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::~_Hashtable_alloc()
  0.00      0.69     0.00        1     0.00     0.00  std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >, true>::_Hashtable_ebo_helper()
  0.00      0.69     0.00        1     0.00     0.00  std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >, true>::~_Hashtable_ebo_helper()

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 1.45% of 0.69 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]     99.8    0.01    0.68                 main [1]
                0.01    0.58    4481/4481        RenderingEngine::render() [2]
                0.02    0.03    4481/4481        GameEngine::update() [23]
                0.01    0.00    4481/4481        AbstractCamera::update() [46]
                0.01    0.00    4481/4481        Window::update() [52]
                0.00    0.01    4482/4482        SDLHandler::handleSDLEvents() [56]
                0.00    0.00       4/11          std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::~unique_ptr() [38]
                0.00    0.00       1/1           SpriteAsset::loadFromFile(char const*, SDL_Renderer*) [73]
                0.00    0.00       1/1           TiledObjectRenderer::TiledObjectRenderer(HexViewport*, std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [79]
                0.00    0.00       1/1           SmallObjectRenderer::SmallObjectRenderer(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [78]
                0.00    0.00       3/16          FlatHexPosition::FlatHexPosition(float, float, FlatHexPosition::System) [47]
                0.00    0.00       1/2           SpriteSheet::loadFromFile(char const*, unsigned int, unsigned int, SDL_Renderer*) [74]
                0.00    0.00       1/1           SmallObjectRenderer::~SmallObjectRenderer() [86]
                0.00    0.00       1/1           TiledObjectRenderer::~TiledObjectRenderer() [87]
                0.00    0.00       2/9           std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::unique_ptr(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&&) [65]
                0.00    0.00       2/2           GameEngine::addPeon(Peon*) [112]
                0.00    0.00       1/1           World::~World() [142]
                0.00    0.00       1/1           GameEngine::~GameEngine() [148]
                0.00    0.00       1/1           Camera::Camera(int, int, int, int, int, int) [152]
                0.00    0.00       2/2           Peon::Peon(FlatHexPosition const&) [156]
                0.00    0.00    4481/4481        Window::clear() [208]
                0.00    0.00       2/6           std::remove_reference<std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&>::type&& std::move<std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&>(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&) [376]
                0.00    0.00       1/1           Window::createWindow(int, int) [412]
                0.00    0.00       1/1           World::World(int, int) [411]
                0.00    0.00       1/1           GameEngine::GameEngine(World*) [403]
                0.00    0.00       1/1           Controller::Controller(World*) [402]
                0.00    0.00       1/1           SDLHandler::SDLHandler(AbstractCamera*, HexViewport*, Controller*) [404]
                0.00    0.00       1/45          HexViewport::target(FlatHexPosition const&) [238]
                0.00    0.00       1/1           RenderingEngine::RenderingEngine(Window*, HexViewport*, AbstractCamera*, World*, AbstractRenderer*, AbstractRenderer*) [410]
                0.00    0.00       1/1           Window::~Window() [414]
-----------------------------------------------
                0.01    0.58    4481/4481        main [1]
[2]     86.1    0.01    0.58    4481         RenderingEngine::render() [2]
                0.00    0.17  238828/238834      World::getContentAt(FlatHexPosition) [3]
                0.02    0.11  238828/238828      TiledObjectRenderer::renderAt(int, int, int, SDL_Renderer*) [6]
                0.00    0.08  247790/247790      HexViewport::toPixel(FlatHexPosition const&, int*, int*) const [12]
                0.00    0.08  452581/453637      FlatHexPosition::tile() [16]
                0.00    0.05  492910/741811      FlatHexPosition::operator+(FlatHexPosition const&) const [17]
                0.02    0.00  239722/239722      World::width() const [31]
                0.01    0.00    8962/8962        SmallObjectRenderer::renderAt(int, int, int, SDL_Renderer*) [37]
                0.01    0.00    4481/4481        HexViewport::upLeftCorner(FlatHexPosition*) const [42]
                0.00    0.01  448100/4505825     FlatHexPosition::convert(FlatHexPosition::System) [8]
                0.01    0.00  542201/781029      HexViewport::tileHeight() const [48]
                0.00    0.00    8867/8872        std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::begin() const [72]
                0.00    0.00    8962/8967        std::__detail::_Node_const_iterator<Peon*, true, false>::operator*() const [75]
                0.00    0.00    8962/270210      FlatHexPosition::operator-(FlatHexPosition const&) const [27]
                0.00    0.00   17924/17937       FlatHexPosition::FlatHexPosition() [89]
                0.00    0.00  247790/247790      AbstractCamera::getOrientation() [168]
                0.00    0.00  239029/239029      World::height() const [172]
                0.00    0.00   58253/58253       HexViewport::tileWidth() const [173]
                0.00    0.00   17829/31282       bool std::__detail::operator!=<Peon*, false>(std::__detail::_Node_iterator_base<Peon*, false> const&, std::__detail::_Node_iterator_base<Peon*, false> const&) [175]
                0.00    0.00    8962/18999       Peon::pos() const [180]
                0.00    0.00    8962/8967        std::__detail::_Node_const_iterator<Peon*, true, false>::operator++() [201]
                0.00    0.00    8867/8872        std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::end() const [207]
                0.00    0.00    4481/4481        HexViewport::viewPortAxis(FlatHexPosition*, FlatHexPosition*) const [209]
-----------------------------------------------
                0.00    0.00       6/238834      Controller::leftClickAt(FlatHexPosition const&) [108]
                0.00    0.17  238828/238834      RenderingEngine::render() [2]
[3]     25.3    0.00    0.17  238834         World::getContentAt(FlatHexPosition) [3]
                0.00    0.15  247706/247732      std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::find(FlatHexPosition const&) [5]
                0.01    0.00  238834/238860      std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::end() [36]
                0.01    0.00  238834/238846      bool std::__detail::operator!=<std::pair<FlatHexPosition const, Tile>, true>(std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&, std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&) [51]
                0.00    0.00    8872/8897        std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::operator->() const [204]
                0.00    0.00    8872/8872        Tile::getContent() const [205]
-----------------------------------------------
                0.00    0.15  247732/247732      std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::find(FlatHexPosition const&) [5]
[4]     21.7    0.00    0.15  247732         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(FlatHexPosition const&) [4]
                0.00    0.08  247732/247745      std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(FlatHexPosition const&) const [11]
                0.02    0.03  247732/247745      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node(unsigned long, FlatHexPosition const&, unsigned long) const [22]
                0.01    0.00  247732/247746      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(FlatHexPosition const&, unsigned long) const [50]
                0.00    0.00  229975/468835      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::end() [54]
                0.00    0.00   17757/486616      std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [53]
-----------------------------------------------
                0.00    0.00      12/247732      World::removeObject(FlatHexPosition const&, Peon*) [95]
                0.00    0.00      14/247732      World::addObject(Peon*) [91]
                0.00    0.15  247706/247732      World::getContentAt(FlatHexPosition) [3]
[5]     21.7    0.00    0.15  247732         std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::find(FlatHexPosition const&) [5]
                0.00    0.15  247732/247732      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(FlatHexPosition const&) [4]
-----------------------------------------------
                0.02    0.11  238828/238828      RenderingEngine::render() [2]
[6]     19.4    0.02    0.11  238828         TiledObjectRenderer::renderAt(int, int, int, SDL_Renderer*) [6]
                0.02    0.06  716484/743375      std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::operator->() const [9]
                0.01    0.00  238828/247790      SpriteSheet::renderFrame(unsigned int, unsigned int, SDL_Renderer*, SDL_Rect const*) [35]
                0.01    0.00  238828/247791      SpriteSheet::width() const [34]
                0.00    0.00  238828/781029      HexViewport::tileHeight() const [48]
                0.00    0.00  238828/247791      SpriteSheet::height() const [167]
-----------------------------------------------
                0.02    0.03  284315/737952      FlatHexPosition::tile() const [15]
                0.02    0.05  453637/737952      FlatHexPosition::tile() [16]
[7]     18.2    0.04    0.09  737952         FlatHexPosition::tile(FlatHexPosition*) [7]
                0.07    0.00 1475904/1475904     math::mrnd(float) [18]
                0.00    0.01  737952/4505825     FlatHexPosition::convert(FlatHexPosition::System) [8]
-----------------------------------------------
                0.00    0.00       1/4505825     FlatHexPosition::FlatHexPosition(float, float, float, float, FlatHexPosition::System) [157]
                0.00    0.00       4/4505825     FlatHexPosition::unit(FlatHexPosition*) [154]
                0.00    0.00      11/4505825     SDLHandler::handleMouseButtonDown(SDL_MouseButtonEvent const&) [57]
                0.00    0.00      18/4505825     Camera::doUpdateLRScroll(float) [135]
                0.00    0.00      70/4505825     Camera::doUpdateUDScroll(float) [113]
                0.00    0.00    8962/4505825     FlatHexPosition::distance(FlatHexPosition const&, FlatHexPosition const&) [33]
                0.00    0.00  247745/4505825     HCHasher::operator()(FlatHexPosition const&) const [10]
                0.00    0.00  247790/4505825     HexViewport::toPixel(FlatHexPosition const&, int*, int*) const [12]
                0.00    0.01  448100/4505825     RenderingEngine::render() [2]
                0.00    0.01  737952/4505825     FlatHexPosition::tile(FlatHexPosition*) [7]
                0.01    0.05 2815172/4505825     FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition::System) [14]
[8]     13.8    0.02    0.08 4505825         FlatHexPosition::convert(FlatHexPosition::System) [8]
                0.08    0.00 4505825/4505825     FlatHexPosition::convert(FlatHexPosition::System, FlatHexPosition*) const [13]
-----------------------------------------------
                0.00    0.00       2/743375      SpriteSheet::loadFromFile(char const*, unsigned int, unsigned int, SDL_Renderer*) [74]
                0.00    0.00       3/743375      SpriteAsset::loadFromFile(char const*, SDL_Renderer*) [73]
                0.00    0.00   26886/743375      SmallObjectRenderer::renderAt(int, int, int, SDL_Renderer*) [37]
                0.02    0.06  716484/743375      TiledObjectRenderer::renderAt(int, int, int, SDL_Renderer*) [6]
[9]     12.3    0.02    0.07  743375         std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::operator->() const [9]
                0.00    0.07  743375/743376      std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::get() const [19]
-----------------------------------------------
                0.01    0.07  247745/247745      std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(FlatHexPosition const&) const [11]
[10]    12.1    0.01    0.07  247745         HCHasher::operator()(FlatHexPosition const&) const [10]
                0.03    0.04  247745/284315      FlatHexPosition::tile() const [15]
                0.00    0.00  247745/4505825     FlatHexPosition::convert(FlatHexPosition::System) [8]
-----------------------------------------------
                0.00    0.00      13/247745      std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<FlatHexPosition const&, Tile>(std::integral_constant<bool, true>, FlatHexPosition const&, Tile&&) [92]
                0.00    0.08  247732/247745      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(FlatHexPosition const&) [4]
[11]    12.1    0.00    0.08  247745         std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(FlatHexPosition const&) const [11]
                0.01    0.07  247745/247745      HCHasher::operator()(FlatHexPosition const&) const [10]
                0.00    0.00  247745/247745      std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h1() const [170]
-----------------------------------------------
                0.00    0.08  247790/247790      RenderingEngine::render() [2]
[12]    12.1    0.00    0.08  247790         HexViewport::toPixel(FlatHexPosition const&, int*, int*) const [12]
                0.00    0.02  247790/270210      FlatHexPosition::operator-(FlatHexPosition const&) const [27]
                0.00    0.02  247790/741811      FlatHexPosition::operator+(FlatHexPosition const&) const [17]
                0.01    0.01  247790/252327      FlatHexPosition::operator*(Matrix22 const&) const [32]
                0.00    0.01  247790/2815172     FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition::System) [14]
                0.00    0.01  247790/253382      FlatHexPosition::operator*(float const&) const [55]
                0.00    0.00  247790/4505825     FlatHexPosition::convert(FlatHexPosition::System) [8]
-----------------------------------------------
                0.08    0.00 4505825/4505825     FlatHexPosition::convert(FlatHexPosition::System) [8]
[13]    11.6    0.08    0.00 4505825         FlatHexPosition::convert(FlatHexPosition::System, FlatHexPosition*) const [13]
-----------------------------------------------
                0.00    0.00       5/2815172     Controller::leftClickAt(FlatHexPosition const&) [108]
                0.00    0.00   37626/2815172     FlatHexPosition::operator==(FlatHexPosition const&) const [85]
                0.00    0.01  247790/2815172     HexViewport::toPixel(FlatHexPosition const&, int*, int*) const [12]
                0.00    0.01  252327/2815172     FlatHexPosition::operator*(Matrix22 const&) const [32]
                0.00    0.01  253382/2815172     FlatHexPosition::operator*(float const&) const [55]
                0.00    0.01  540420/2815172     FlatHexPosition::operator-(FlatHexPosition const&) const [27]
                0.01    0.03 1483622/2815172     FlatHexPosition::operator+(FlatHexPosition const&) const [17]
[14]    11.5    0.02    0.06 2815172         FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition::System) [14]
                0.01    0.05 2815172/4505825     FlatHexPosition::convert(FlatHexPosition::System) [8]
-----------------------------------------------
                0.00    0.00    1056/284315      GameEngine::peonTick(Peon*) [29]
                0.00    0.01   35514/284315      HCEquals::operator()(FlatHexPosition const&, FlatHexPosition const&) const [45]
                0.03    0.04  247745/284315      HCHasher::operator()(FlatHexPosition const&) const [10]
[15]    11.4    0.03    0.05  284315         FlatHexPosition::tile() const [15]
                0.02    0.03  284315/737952      FlatHexPosition::tile(FlatHexPosition*) [7]
-----------------------------------------------
                0.00    0.00    1056/453637      GameEngine::peonTick(Peon*) [29]
                0.00    0.08  452581/453637      RenderingEngine::render() [2]
[16]    11.2    0.00    0.08  453637         FlatHexPosition::tile() [16]
                0.02    0.05  453637/737952      FlatHexPosition::tile(FlatHexPosition*) [7]
-----------------------------------------------
                0.00    0.00       9/741811      Camera::doUpdateLRScroll(float) [135]
                0.00    0.00      11/741811      HexViewport::fromPixel(int, int, FlatHexPosition*) const [58]
                0.00    0.00      35/741811      Camera::doUpdateUDScroll(float) [113]
                0.00    0.00    1056/741811      GameEngine::peonTick(Peon*) [29]
                0.00    0.02  247790/741811      HexViewport::toPixel(FlatHexPosition const&, int*, int*) const [12]
                0.00    0.05  492910/741811      RenderingEngine::render() [2]
[17]    10.3    0.00    0.07  741811         FlatHexPosition::operator+(FlatHexPosition const&) const [17]
                0.01    0.03 1483622/2815172     FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition::System) [14]
                0.01    0.02  741811/1012022     FlatHexPosition::FlatHexPosition(FlatHexPosition::System) [24]
-----------------------------------------------
                0.07    0.00 1475904/1475904     FlatHexPosition::tile(FlatHexPosition*) [7]
[18]    10.1    0.07    0.00 1475904         math::mrnd(float) [18]
-----------------------------------------------
                0.00    0.00       1/743376      std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::operator bool() const [153]
                0.00    0.07  743375/743376      std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::operator->() const [9]
[19]     9.4    0.00    0.07  743376         std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::get() const [19]
                0.01    0.06  743376/743376      std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_ptr() const [20]
-----------------------------------------------
                0.01    0.06  743376/743376      std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::get() const [19]
[20]     9.4    0.01    0.06  743376         std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_ptr() const [20]
                0.03    0.03  743376/743376      std::tuple_element<0ul, std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > >::type const& std::get<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > const&) [21]
-----------------------------------------------
                0.03    0.03  743376/743376      std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_ptr() const [20]
[21]     8.0    0.03    0.03  743376         std::tuple_element<0ul, std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > >::type const& std::get<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > const&) [21]
                0.01    0.02  743376/743376      SpriteSheet* const& std::__get_helper<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> > const&) [28]
-----------------------------------------------
                0.00    0.00      13/247745      std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<FlatHexPosition const&, Tile>(std::integral_constant<bool, true>, FlatHexPosition const&, Tile&&) [92]
                0.02    0.03  247732/247745      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(FlatHexPosition const&) [4]
[22]     7.4    0.02    0.03  247745         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node(unsigned long, FlatHexPosition const&, unsigned long) const [22]
                0.02    0.01  247745/247745      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, FlatHexPosition const&, unsigned long) const [25]
-----------------------------------------------
                0.02    0.03    4481/4481        main [1]
[23]     5.9    0.02    0.03    4481         GameEngine::update() [23]
                0.01    0.02    8962/8962        GameEngine::peonTick(Peon*) [29]
                0.00    0.00    8962/8962        std::__detail::_Node_iterator<Peon*, true, false>::operator*() const [76]
                0.00    0.00    4481/4481        std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::begin() [81]
                0.00    0.00   13443/31282       bool std::__detail::operator!=<Peon*, false>(std::__detail::_Node_iterator_base<Peon*, false> const&, std::__detail::_Node_iterator_base<Peon*, false> const&) [175]
                0.00    0.00    8962/8962        std::__detail::_Node_iterator<Peon*, true, false>::operator++() [203]
                0.00    0.00    4481/4481        std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::end() [211]
-----------------------------------------------
                0.00    0.00       1/1012022     HexViewport::HexViewport(int, int, int, int) [151]
                0.00    0.01  270210/1012022     FlatHexPosition::operator-(FlatHexPosition const&) const [27]
                0.01    0.02  741811/1012022     FlatHexPosition::operator+(FlatHexPosition const&) const [17]
[24]     5.7    0.01    0.03 1012022         FlatHexPosition::FlatHexPosition(FlatHexPosition::System) [24]
                0.03    0.00 1012022/1029976     FlatHexPosition::FlatHexPosition(float, float, float, FlatHexPosition::System) [26]
-----------------------------------------------
                0.02    0.01  247745/247745      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node(unsigned long, FlatHexPosition const&, unsigned long) const [22]
[25]     4.5    0.02    0.01  247745         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, FlatHexPosition const&, unsigned long) const [25]
                0.00    0.01   46234/46234       std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals(FlatHexPosition const&, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const [44]
                0.00    0.00   12872/12916       std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>::_M_next() const [197]
                0.00    0.00   12872/12903       std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const [198]
-----------------------------------------------
                0.00    0.00       1/1029976     FlatHexPosition::FlatHexPosition(float, float, float, float, FlatHexPosition::System) [157]
                0.00    0.00      16/1029976     FlatHexPosition::FlatHexPosition(float, float, FlatHexPosition::System) [47]
                0.00    0.00   17937/1029976     FlatHexPosition::FlatHexPosition() [89]
                0.03    0.00 1012022/1029976     FlatHexPosition::FlatHexPosition(FlatHexPosition::System) [24]
[26]     4.3    0.03    0.00 1029976         FlatHexPosition::FlatHexPosition(float, float, float, FlatHexPosition::System) [26]
-----------------------------------------------
                0.00    0.00      11/270210      HexViewport::fromPixel(int, int, FlatHexPosition*) const [58]
                0.00    0.00    4481/270210      HexViewport::upLeftCorner(FlatHexPosition*) const [42]
                0.00    0.00    8962/270210      RenderingEngine::render() [2]
                0.00    0.00    8966/270210      FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition const&) [43]
                0.00    0.02  247790/270210      HexViewport::toPixel(FlatHexPosition const&, int*, int*) const [12]
[27]     3.7    0.00    0.03  270210         FlatHexPosition::operator-(FlatHexPosition const&) const [27]
                0.00    0.01  540420/2815172     FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition::System) [14]
                0.00    0.01  270210/1012022     FlatHexPosition::FlatHexPosition(FlatHexPosition::System) [24]
-----------------------------------------------
                0.01    0.02  743376/743376      std::tuple_element<0ul, std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > >::type const& std::get<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > const&) [21]
[28]     3.6    0.01    0.02  743376         SpriteSheet* const& std::__get_helper<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> > const&) [28]
                0.02    0.01  743376/743376      std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> > const&) [30]
-----------------------------------------------
                0.01    0.02    8962/8962        GameEngine::update() [23]
[29]     3.2    0.01    0.02    8962         GameEngine::peonTick(Peon*) [29]
                0.01    0.01    8962/8962        FlatHexPosition::distance(FlatHexPosition const&, FlatHexPosition const&) [33]
                0.00    0.00    1056/284315      FlatHexPosition::tile() const [15]
                0.00    0.00    1056/453637      FlatHexPosition::tile() [16]
                0.00    0.00    1056/741811      FlatHexPosition::operator+(FlatHexPosition const&) const [17]
                0.00    0.00    1056/1056        FlatHexPosition::operator!=(FlatHexPosition const&) const [90]
                0.00    0.00      12/14          World::addObject(Peon*) [91]
                0.00    0.00    1056/253382      FlatHexPosition::operator*(float const&) const [55]
                0.00    0.00      12/12          World::removeObject(FlatHexPosition const&, Peon*) [95]
                0.00    0.00   16868/16868       Peon::targetPos() const [196]
                0.00    0.00   10018/18999       Peon::pos() const [180]
                0.00    0.00    8962/8962        Peon::pos(FlatHexPosition const&) [202]
                0.00    0.00    1056/1056        Peon::direction() const [213]
-----------------------------------------------
                0.02    0.01  743376/743376      SpriteSheet* const& std::__get_helper<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> > const&) [28]
[30]     2.9    0.02    0.01  743376         std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> > const&) [30]
                0.01    0.00  743376/743376      std::_Head_base<0ul, SpriteSheet*, false>::_M_head(std::_Head_base<0ul, SpriteSheet*, false> const&) [60]
-----------------------------------------------
                0.02    0.00  239722/239722      RenderingEngine::render() [2]
[31]     2.9    0.02    0.00  239722         World::width() const [31]
-----------------------------------------------
                0.00    0.00       8/252327      Camera::doRotateRight() [141]
                0.00    0.00      20/252327      Camera::doRotateLeft() [132]
                0.00    0.00      28/252327      HexViewport::rotation(Matrix22 const&) [134]
                0.00    0.00    4481/252327      HexViewport::upLeftCorner(FlatHexPosition*) const [42]
                0.01    0.01  247790/252327      HexViewport::toPixel(FlatHexPosition const&, int*, int*) const [12]
[32]     2.5    0.01    0.01  252327         FlatHexPosition::operator*(Matrix22 const&) const [32]
                0.00    0.01  252327/2815172     FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition::System) [14]
-----------------------------------------------
                0.01    0.01    8962/8962        GameEngine::peonTick(Peon*) [29]
[33]     2.3    0.01    0.01    8962         FlatHexPosition::distance(FlatHexPosition const&, FlatHexPosition const&) [33]
                0.01    0.00    8962/8966        FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition const&) [43]
                0.00    0.00    8962/4505825     FlatHexPosition::convert(FlatHexPosition::System) [8]
-----------------------------------------------
                0.00    0.00       1/247791      SpriteAsset::loadFromFile(char const*, SDL_Renderer*) [73]
                0.00    0.00    8962/247791      SmallObjectRenderer::renderAt(int, int, int, SDL_Renderer*) [37]
                0.01    0.00  238828/247791      TiledObjectRenderer::renderAt(int, int, int, SDL_Renderer*) [6]
[34]     2.2    0.02    0.00  247791         SpriteSheet::width() const [34]
-----------------------------------------------
                0.00    0.00    8962/247790      SmallObjectRenderer::renderAt(int, int, int, SDL_Renderer*) [37]
                0.01    0.00  238828/247790      TiledObjectRenderer::renderAt(int, int, int, SDL_Renderer*) [6]
[35]     2.2    0.02    0.00  247790         SpriteSheet::renderFrame(unsigned int, unsigned int, SDL_Renderer*, SDL_Rect const*) [35]
-----------------------------------------------
                0.00    0.00      12/238860      World::removeObject(FlatHexPosition const&, Peon*) [95]
                0.00    0.00      14/238860      World::addObject(Peon*) [91]
                0.01    0.00  238834/238860      World::getContentAt(FlatHexPosition) [3]
[36]     2.2    0.01    0.00  238860         std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::end() [36]
                0.00    0.00  238860/468835      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::end() [54]
-----------------------------------------------
                0.01    0.00    8962/8962        RenderingEngine::render() [2]
[37]     2.1    0.01    0.00    8962         SmallObjectRenderer::renderAt(int, int, int, SDL_Renderer*) [37]
                0.00    0.00   26886/743375      std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::operator->() const [9]
                0.00    0.00    8962/247790      SpriteSheet::renderFrame(unsigned int, unsigned int, SDL_Renderer*, SDL_Rect const*) [35]
                0.00    0.00    8962/247791      SpriteSheet::width() const [34]
                0.00    0.00    8962/247791      SpriteSheet::height() const [167]
-----------------------------------------------
                0.00    0.00       1/11          SmallObjectRenderer::SmallObjectRenderer(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [78]
                0.00    0.00       1/11          TiledObjectRenderer::TiledObjectRenderer(HexViewport*, std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [79]
                0.00    0.00       1/11          SpriteAsset::loadFromFile(char const*, SDL_Renderer*) [73]
                0.00    0.00       2/11          AbstractRenderer::~AbstractRenderer() [77]
                0.00    0.00       2/11          SpriteSheet::loadFromFile(char const*, unsigned int, unsigned int, SDL_Renderer*) [74]
                0.00    0.00       4/11          main [1]
[38]     1.6    0.00    0.01      11         std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::~unique_ptr() [38]
                0.00    0.01       2/2           std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::get_deleter() [39]
                0.00    0.00      11/22          std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_ptr() [268]
                0.00    0.00       2/2           std::remove_reference<SpriteSheet*&>::type&& std::move<SpriteSheet*&>(SpriteSheet*&) [400]
                0.00    0.00       2/2           std::default_delete<SpriteSheet>::operator()(SpriteSheet*) const [387]
-----------------------------------------------
                0.00    0.01       2/2           std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::~unique_ptr() [38]
[39]     1.6    0.00    0.01       2         std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::get_deleter() [39]
                0.00    0.01       2/2           std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_deleter() [40]
-----------------------------------------------
                0.00    0.01       2/2           std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::get_deleter() [39]
[40]     1.6    0.00    0.01       2         std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_deleter() [40]
                0.01    0.01       2/2           std::tuple_element<1ul, std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > >::type& std::get<1ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&) [41]
-----------------------------------------------
                0.01    0.01       2/2           std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_deleter() [40]
[41]     1.6    0.01    0.01       2         std::tuple_element<1ul, std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > >::type& std::get<1ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&) [41]
                0.01    0.00       2/2           std::default_delete<SpriteSheet>& std::__get_helper<1ul, std::default_delete<SpriteSheet>>(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet>>&) [59]
-----------------------------------------------
                0.01    0.00    4481/4481        RenderingEngine::render() [2]
[42]     1.6    0.01    0.00    4481         HexViewport::upLeftCorner(FlatHexPosition*) const [42]
                0.00    0.00    4481/270210      FlatHexPosition::operator-(FlatHexPosition const&) const [27]
                0.00    0.00    4481/252327      FlatHexPosition::operator*(Matrix22 const&) const [32]
                0.00    0.00    4481/253382      FlatHexPosition::operator*(float const&) const [55]
-----------------------------------------------
                0.00    0.00       4/8966        Peon::setTargetPos(FlatHexPosition const&) [119]
                0.01    0.00    8962/8966        FlatHexPosition::distance(FlatHexPosition const&, FlatHexPosition const&) [33]
[43]     1.6    0.01    0.00    8966         FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition const&) [43]
                0.00    0.00    8966/270210      FlatHexPosition::operator-(FlatHexPosition const&) const [27]
-----------------------------------------------
                0.00    0.01   46234/46234       std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, FlatHexPosition const&, unsigned long) const [25]
[44]     1.6    0.00    0.01   46234         std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals(FlatHexPosition const&, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const [44]
                0.00    0.01   17757/17757       HCEquals::operator()(FlatHexPosition const&, FlatHexPosition const&) const [45]
                0.00    0.00   46234/46234       std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_Equal_hash_code<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::_S_equals(unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> const&) [174]
                0.00    0.00   17757/17757       std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_eq() const [193]
                0.00    0.00   17757/17770       std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_extract() const [187]
                0.00    0.00   17757/17770       decltype ((get<0>)((forward<std::pair<FlatHexPosition const, Tile>&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<FlatHexPosition const, Tile>&>(std::pair<FlatHexPosition const, Tile>&) const [186]
                0.00    0.00   17757/17770       std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_M_v() [190]
-----------------------------------------------
                0.00    0.01   17757/17757       std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals(FlatHexPosition const&, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const [44]
[45]     1.6    0.00    0.01   17757         HCEquals::operator()(FlatHexPosition const&, FlatHexPosition const&) const [45]
                0.00    0.01   35514/284315      FlatHexPosition::tile() const [15]
                0.00    0.00   17757/18813       FlatHexPosition::operator==(FlatHexPosition const&) const [85]
-----------------------------------------------
                0.01    0.00    4481/4481        main [1]
[46]     1.5    0.01    0.00    4481         AbstractCamera::update() [46]
                0.00    0.00      35/35          Camera::doUpdateUDScroll(float) [113]
                0.00    0.00       9/9           Camera::doUpdateLRScroll(float) [135]
-----------------------------------------------
                0.00    0.00       2/16          __static_initialization_and_destruction_0(int, int) [83]
                0.00    0.00       3/16          main [1]
                0.01    0.00      11/16          HexViewport::fromPixel(int, int, FlatHexPosition*) const [58]
[47]     1.4    0.01    0.00      16         FlatHexPosition::FlatHexPosition(float, float, FlatHexPosition::System) [47]
                0.00    0.00      16/1029976     FlatHexPosition::FlatHexPosition(float, float, float, FlatHexPosition::System) [26]
-----------------------------------------------
                0.00    0.00  238828/781029      TiledObjectRenderer::renderAt(int, int, int, SDL_Renderer*) [6]
                0.01    0.00  542201/781029      RenderingEngine::render() [2]
[48]     1.4    0.01    0.00  781029         HexViewport::tileHeight() const [48]
-----------------------------------------------
                0.00    0.00      11/486627      std::__detail::_Node_const_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::_Node_const_iterator(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true> const&) [150]
                0.01    0.00  486616/486627      std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [53]
[49]     1.4    0.01    0.00  486627         std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [49]
-----------------------------------------------
                0.00    0.00       1/247746      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(FlatHexPosition const&, unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [149]
                0.00    0.00      13/247746      std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<FlatHexPosition const&, Tile>(std::integral_constant<bool, true>, FlatHexPosition const&, Tile&&) [92]
                0.01    0.00  247732/247746      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(FlatHexPosition const&) [4]
[50]     1.4    0.01    0.00  247746         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(FlatHexPosition const&, unsigned long) const [50]
                0.00    0.00  247746/247746      std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(FlatHexPosition const&, unsigned long, unsigned long) const [169]
-----------------------------------------------
                0.00    0.00      12/238846      World::removeObject(FlatHexPosition const&, Peon*) [95]
                0.01    0.00  238834/238846      World::getContentAt(FlatHexPosition) [3]
[51]     1.4    0.01    0.00  238846         bool std::__detail::operator!=<std::pair<FlatHexPosition const, Tile>, true>(std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&, std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&) [51]
-----------------------------------------------
                0.01    0.00    4481/4481        main [1]
[52]     1.4    0.01    0.00    4481         Window::update() [52]
-----------------------------------------------
                0.00    0.00      11/486616      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [127]
                0.00    0.00      13/486616      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(FlatHexPosition const&, unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [149]
                0.00    0.00   17757/486616      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(FlatHexPosition const&) [4]
                0.00    0.01  468835/486616      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::end() [54]
[53]     1.4    0.00    0.01  486616         std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [53]
                0.01    0.00  486616/486627      std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [49]
-----------------------------------------------
                0.00    0.00  229975/468835      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(FlatHexPosition const&) [4]
                0.00    0.00  238860/468835      std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::end() [36]
[54]     1.4    0.00    0.01  468835         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::end() [54]
                0.00    0.01  468835/486616      std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [53]
-----------------------------------------------
                0.00    0.00       9/253382      Camera::doUpdateLRScroll(float) [135]
                0.00    0.00      11/253382      HexViewport::fromPixel(int, int, FlatHexPosition*) const [58]
                0.00    0.00      35/253382      Camera::doUpdateUDScroll(float) [113]
                0.00    0.00    1056/253382      GameEngine::peonTick(Peon*) [29]
                0.00    0.00    4481/253382      HexViewport::upLeftCorner(FlatHexPosition*) const [42]
                0.00    0.01  247790/253382      HexViewport::toPixel(FlatHexPosition const&, int*, int*) const [12]
[55]     1.0    0.00    0.01  253382         FlatHexPosition::operator*(float const&) const [55]
                0.00    0.01  253382/2815172     FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition::System) [14]
-----------------------------------------------
                0.00    0.01    4482/4482        main [1]
[56]     1.0    0.00    0.01    4482         SDLHandler::handleSDLEvents() [56]
                0.00    0.01      11/11          SDLHandler::handleMouseButtonDown(SDL_MouseButtonEvent const&) [57]
                0.00    0.00      19/19          SDLHandler::handleKeyDown(SDL_KeyboardEvent const&) [128]
                0.00    0.00    2997/2997        SDLHandler::handleMouseMovement(SDL_MouseMotionEvent const&) [212]
                0.00    0.00      19/19          SDLHandler::handleKeyUp(SDL_KeyboardEvent const&) [271]
-----------------------------------------------
                0.00    0.01      11/11          SDLHandler::handleSDLEvents() [56]
[57]     1.0    0.00    0.01      11         SDLHandler::handleMouseButtonDown(SDL_MouseButtonEvent const&) [57]
                0.00    0.01      11/11          HexViewport::fromPixel(int, int, FlatHexPosition*) const [58]
                0.00    0.00       6/6           Controller::leftClickAt(FlatHexPosition const&) [108]
                0.00    0.00       5/5           Controller::rightClickAt(FlatHexPosition const&) [118]
                0.00    0.00      11/17937       FlatHexPosition::FlatHexPosition() [89]
                0.00    0.00      11/4505825     FlatHexPosition::convert(FlatHexPosition::System) [8]
-----------------------------------------------
                0.00    0.01      11/11          SDLHandler::handleMouseButtonDown(SDL_MouseButtonEvent const&) [57]
[58]     1.0    0.00    0.01      11         HexViewport::fromPixel(int, int, FlatHexPosition*) const [58]
                0.01    0.00      11/16          FlatHexPosition::FlatHexPosition(float, float, FlatHexPosition::System) [47]
                0.00    0.00      11/270210      FlatHexPosition::operator-(FlatHexPosition const&) const [27]
                0.00    0.00      11/741811      FlatHexPosition::operator+(FlatHexPosition const&) const [17]
                0.00    0.00      11/253382      FlatHexPosition::operator*(float const&) const [55]
-----------------------------------------------
                0.01    0.00       2/2           std::tuple_element<1ul, std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > >::type& std::get<1ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&) [41]
[59]     0.9    0.01    0.00       2         std::default_delete<SpriteSheet>& std::__get_helper<1ul, std::default_delete<SpriteSheet>>(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet>>&) [59]
                0.00    0.00       2/11          std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&) [64]
-----------------------------------------------
                0.01    0.00  743376/743376      std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> > const&) [30]
[60]     0.7    0.01    0.00  743376         std::_Head_base<0ul, SpriteSheet*, false>::_M_head(std::_Head_base<0ul, SpriteSheet*, false> const&) [60]
-----------------------------------------------
                0.00    0.00      12/17941       std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_M_equals(Peon* const&, unsigned long, std::__detail::_Hash_node<Peon*, false>*) const [130]
                0.00    0.00    8962/17941       std::__detail::_Node_iterator<Peon*, true, false>::operator*() const [76]
                0.00    0.00    8967/17941       std::__detail::_Node_const_iterator<Peon*, true, false>::operator*() const [75]
[61]     0.7    0.01    0.00   17941         std::__detail::_Hash_node_value_base<Peon*>::_M_v() [61]
                0.00    0.00   17941/17973       std::__detail::_Hash_node_value_base<Peon*>::_M_valptr() [183]
-----------------------------------------------
                0.00    0.00      14/13420       std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) [116]
                0.00    0.00      26/13420       std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable(std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >&&) [103]
                0.00    0.00      27/13420       std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::clear() [96]
                0.00    0.00    4481/13420       std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::begin() [80]
                0.00    0.00    8872/13420       std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::begin() const [71]
[62]     0.7    0.01    0.00   13420         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_begin() const [62]
-----------------------------------------------
                0.01    0.00      11/11          std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&) [64]
[63]     0.7    0.01    0.00      11         std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>::_M_head(std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>&) [63]
-----------------------------------------------
                0.00    0.00       2/11          std::default_delete<SpriteSheet>& std::__get_helper<1ul, std::default_delete<SpriteSheet>>(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet>>&) [59]
                0.00    0.00       9/11          std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&&) [67]
[64]     0.7    0.00    0.01      11         std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&) [64]
                0.01    0.00      11/11          std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>::_M_head(std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>&) [63]
-----------------------------------------------
                0.00    0.00       1/9           SmallObjectRenderer::SmallObjectRenderer(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [78]
                0.00    0.00       1/9           TiledObjectRenderer::TiledObjectRenderer(HexViewport*, std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [79]
                0.00    0.00       1/9           SpriteAsset::loadFromFile(char const*, SDL_Renderer*) [73]
                0.00    0.00       2/9           main [1]
                0.00    0.00       2/9           AbstractRenderer::AbstractRenderer(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [88]
                0.00    0.00       2/9           SpriteSheet::loadFromFile(char const*, unsigned int, unsigned int, SDL_Renderer*) [74]
[65]     0.6    0.00    0.00       9         std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::unique_ptr(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&&) [65]
                0.00    0.00       9/9           std::__uniq_ptr_data<SpriteSheet, std::default_delete<SpriteSheet>, true, true>::__uniq_ptr_data(std::__uniq_ptr_data<SpriteSheet, std::default_delete<SpriteSheet>, true, true>&&) [68]
-----------------------------------------------
                0.00    0.00       9/9           std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >::tuple(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&&) [70]
[66]     0.6    0.00    0.00       9         std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&&) [66]
                0.00    0.00       9/9           std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&&) [67]
                0.00    0.00       9/9           std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_M_tail(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&) [373]
                0.00    0.00       9/9           std::remove_reference<std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&>::type&& std::move<std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&>(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&) [374]
                0.00    0.00       9/18          SpriteSheet*&& std::forward<SpriteSheet*>(std::remove_reference<SpriteSheet*>::type&) [272]
                0.00    0.00       9/31          std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&) [252]
                0.00    0.00       9/9           std::_Head_base<0ul, SpriteSheet*, false>::_Head_base<SpriteSheet*>(SpriteSheet*&&) [371]
-----------------------------------------------
                0.00    0.00       9/9           std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&&) [66]
[67]     0.6    0.00    0.00       9         std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&&) [67]
                0.00    0.00       9/11          std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&) [64]
                0.00    0.00       9/18          std::default_delete<SpriteSheet>&& std::forward<std::default_delete<SpriteSheet> >(std::remove_reference<std::default_delete<SpriteSheet> >::type&) [273]
                0.00    0.00       9/9           std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>::_Head_base<std::default_delete<SpriteSheet> >(std::default_delete<SpriteSheet>&&) [372]
-----------------------------------------------
                0.00    0.00       9/9           std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::unique_ptr(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&&) [65]
[68]     0.6    0.00    0.00       9         std::__uniq_ptr_data<SpriteSheet, std::default_delete<SpriteSheet>, true, true>::__uniq_ptr_data(std::__uniq_ptr_data<SpriteSheet, std::default_delete<SpriteSheet>, true, true>&&) [68]
                0.00    0.00       9/9           std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::__uniq_ptr_impl(std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >&&) [69]
-----------------------------------------------
                0.00    0.00       9/9           std::__uniq_ptr_data<SpriteSheet, std::default_delete<SpriteSheet>, true, true>::__uniq_ptr_data(std::__uniq_ptr_data<SpriteSheet, std::default_delete<SpriteSheet>, true, true>&&) [68]
[69]     0.6    0.00    0.00       9         std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::__uniq_ptr_impl(std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >&&) [69]
                0.00    0.00       9/9           std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >::tuple(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&&) [70]
                0.00    0.00       9/9           std::remove_reference<std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&>::type&& std::move<std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&>(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&) [375]
                0.00    0.00       9/22          std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_ptr() [268]
-----------------------------------------------
                0.00    0.00       9/9           std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::__uniq_ptr_impl(std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >&&) [69]
[70]     0.6    0.00    0.00       9         std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >::tuple(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&&) [70]
                0.00    0.00       9/9           std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&&) [66]
-----------------------------------------------
                0.00    0.00    8872/8872        std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::begin() const [72]
[71]     0.5    0.00    0.00    8872         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::begin() const [71]
                0.00    0.00    8872/13420       std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_begin() const [62]
                0.00    0.00    8872/17744       std::__detail::_Node_const_iterator<Peon*, true, false>::_Node_const_iterator(std::__detail::_Hash_node<Peon*, false>*) [195]
-----------------------------------------------
                0.00    0.00       5/8872        Controller::leftClickAt(FlatHexPosition const&) [108]
                0.00    0.00    8867/8872        RenderingEngine::render() [2]
[72]     0.5    0.00    0.00    8872         std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::begin() const [72]
                0.00    0.00    8872/8872        std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::begin() const [71]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[73]     0.4    0.00    0.00       1         SpriteAsset::loadFromFile(char const*, SDL_Renderer*) [73]
                0.00    0.00       1/2           SpriteSheet::loadFromFile(char const*, unsigned int, unsigned int, SDL_Renderer*) [74]
                0.00    0.00       1/11          std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::~unique_ptr() [38]
                0.00    0.00       1/9           std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::unique_ptr(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&&) [65]
                0.00    0.00       3/743375      std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::operator->() const [9]
                0.00    0.00       1/1           std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::operator bool() const [153]
                0.00    0.00       1/247791      SpriteSheet::width() const [34]
                0.00    0.00       1/247791      SpriteSheet::height() const [167]
                0.00    0.00       1/3           SpriteSheet::recut(unsigned int, unsigned int) [380]
-----------------------------------------------
                0.00    0.00       1/2           main [1]
                0.00    0.00       1/2           SpriteAsset::loadFromFile(char const*, SDL_Renderer*) [73]
[74]     0.4    0.00    0.00       2         SpriteSheet::loadFromFile(char const*, unsigned int, unsigned int, SDL_Renderer*) [74]
                0.00    0.00       2/11          std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::~unique_ptr() [38]
                0.00    0.00       2/9           std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::unique_ptr(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&&) [65]
                0.00    0.00       2/743375      std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::operator->() const [9]
                0.00    0.00       2/2           std::_MakeUniq<SpriteSheet>::__single_object std::make_unique<SpriteSheet, SDL_Texture*&, int, int, unsigned int&, unsigned int&>(SDL_Texture*&, int&&, int&&, unsigned int&, unsigned int&) [399]
                0.00    0.00       2/3           SpriteSheet::recut(unsigned int, unsigned int) [380]
-----------------------------------------------
                0.00    0.00       5/8967        Controller::leftClickAt(FlatHexPosition const&) [108]
                0.00    0.00    8962/8967        RenderingEngine::render() [2]
[75]     0.4    0.00    0.00    8967         std::__detail::_Node_const_iterator<Peon*, true, false>::operator*() const [75]
                0.00    0.00    8967/17941       std::__detail::_Hash_node_value_base<Peon*>::_M_v() [61]
-----------------------------------------------
                0.00    0.00    8962/8962        GameEngine::update() [23]
[76]     0.4    0.00    0.00    8962         std::__detail::_Node_iterator<Peon*, true, false>::operator*() const [76]
                0.00    0.00    8962/17941       std::__detail::_Hash_node_value_base<Peon*>::_M_v() [61]
-----------------------------------------------
                0.00    0.00       1/2           TiledObjectRenderer::~TiledObjectRenderer() [87]
                0.00    0.00       1/2           SmallObjectRenderer::~SmallObjectRenderer() [86]
[77]     0.3    0.00    0.00       2         AbstractRenderer::~AbstractRenderer() [77]
                0.00    0.00       2/11          std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::~unique_ptr() [38]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[78]     0.3    0.00    0.00       1         SmallObjectRenderer::SmallObjectRenderer(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [78]
                0.00    0.00       1/11          std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::~unique_ptr() [38]
                0.00    0.00       1/9           std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::unique_ptr(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&&) [65]
                0.00    0.00       1/2           AbstractRenderer::AbstractRenderer(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [88]
                0.00    0.00       1/6           std::remove_reference<std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&>::type&& std::move<std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&>(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&) [376]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[79]     0.3    0.00    0.00       1         TiledObjectRenderer::TiledObjectRenderer(HexViewport*, std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [79]
                0.00    0.00       1/11          std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::~unique_ptr() [38]
                0.00    0.00       1/9           std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::unique_ptr(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&&) [65]
                0.00    0.00       1/2           AbstractRenderer::AbstractRenderer(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [88]
                0.00    0.00       1/6           std::remove_reference<std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&>::type&& std::move<std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&>(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&) [376]
-----------------------------------------------
                0.00    0.00    4481/4481        std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::begin() [81]
[80]     0.2    0.00    0.00    4481         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::begin() [80]
                0.00    0.00    4481/13420       std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_begin() const [62]
                0.00    0.00    4481/8990        std::__detail::_Node_iterator<Peon*, true, false>::_Node_iterator(std::__detail::_Hash_node<Peon*, false>*) [200]
-----------------------------------------------
                0.00    0.00    4481/4481        GameEngine::update() [23]
[81]     0.2    0.00    0.00    4481         std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::begin() [81]
                0.00    0.00    4481/4481        std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::begin() [80]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [84]
[82]     0.2    0.00    0.00       1         _GLOBAL__sub_I__ZN11HexViewport11ROTATE_LEFTE [82]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [83]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I__ZN11HexViewport11ROTATE_LEFTE [82]
[83]     0.2    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [83]
                0.00    0.00       2/16          FlatHexPosition::FlatHexPosition(float, float, FlatHexPosition::System) [47]
                0.00    0.00       2/17          Matrix22::Matrix22(float, float, float, float) [274]
-----------------------------------------------
                                                 <spontaneous>
[84]     0.2    0.00    0.00                 __libc_csu_init [84]
                0.00    0.00       1/1           _GLOBAL__sub_I__ZN11HexViewport11ROTATE_LEFTE [82]
-----------------------------------------------
                0.00    0.00    1056/18813       FlatHexPosition::operator!=(FlatHexPosition const&) const [90]
                0.00    0.00   17757/18813       HCEquals::operator()(FlatHexPosition const&, FlatHexPosition const&) const [45]
[85]     0.2    0.00    0.00   18813         FlatHexPosition::operator==(FlatHexPosition const&) const [85]
                0.00    0.00   37626/2815172     FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition::System) [14]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[86]     0.1    0.00    0.00       1         SmallObjectRenderer::~SmallObjectRenderer() [86]
                0.00    0.00       1/2           AbstractRenderer::~AbstractRenderer() [77]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[87]     0.1    0.00    0.00       1         TiledObjectRenderer::~TiledObjectRenderer() [87]
                0.00    0.00       1/2           AbstractRenderer::~AbstractRenderer() [77]
-----------------------------------------------
                0.00    0.00       1/2           SmallObjectRenderer::SmallObjectRenderer(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [78]
                0.00    0.00       1/2           TiledObjectRenderer::TiledObjectRenderer(HexViewport*, std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [79]
[88]     0.1    0.00    0.00       2         AbstractRenderer::AbstractRenderer(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [88]
                0.00    0.00       2/9           std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::unique_ptr(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&&) [65]
                0.00    0.00       2/6           std::remove_reference<std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&>::type&& std::move<std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&>(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&) [376]
-----------------------------------------------
                0.00    0.00       2/17937       Peon::Peon(FlatHexPosition const&) [156]
                0.00    0.00      11/17937       SDLHandler::handleMouseButtonDown(SDL_MouseButtonEvent const&) [57]
                0.00    0.00   17924/17937       RenderingEngine::render() [2]
[89]     0.1    0.00    0.00   17937         FlatHexPosition::FlatHexPosition() [89]
                0.00    0.00   17937/1029976     FlatHexPosition::FlatHexPosition(float, float, float, FlatHexPosition::System) [26]
-----------------------------------------------
                0.00    0.00    1056/1056        GameEngine::peonTick(Peon*) [29]
[90]     0.0    0.00    0.00    1056         FlatHexPosition::operator!=(FlatHexPosition const&) const [90]
                0.00    0.00    1056/18813       FlatHexPosition::operator==(FlatHexPosition const&) const [85]
-----------------------------------------------
                0.00    0.00       2/14          GameEngine::addPeon(Peon*) [112]
                0.00    0.00      12/14          GameEngine::peonTick(Peon*) [29]
[91]     0.0    0.00    0.00      14         World::addObject(Peon*) [91]
                0.00    0.00      13/13          std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::emplace<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [94]
                0.00    0.00      14/247732      std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::find(FlatHexPosition const&) [5]
                0.00    0.00      13/13          Tile::Tile(FlatHexPosition, Peon*) [114]
                0.00    0.00      13/26          Tile::~Tile() [99]
                0.00    0.00      14/238860      std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::end() [36]
                0.00    0.00       1/1           Tile::insert(Peon*) [147]
                0.00    0.00      14/18999       Peon::pos() const [180]
                0.00    0.00      14/14          bool std::__detail::operator==<std::pair<FlatHexPosition const, Tile>, true>(std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&, std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&) [329]
                0.00    0.00       1/8897        std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::operator->() const [204]
-----------------------------------------------
                0.00    0.00      13/13          std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::emplace<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [93]
[92]     0.0    0.00    0.00      13         std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<FlatHexPosition const&, Tile>(std::integral_constant<bool, true>, FlatHexPosition const&, Tile&&) [92]
                0.00    0.00      13/13          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Scoped_node::_Scoped_node<FlatHexPosition const&, Tile>(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >*, FlatHexPosition const&, Tile&&) [102]
                0.00    0.00      13/247745      std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(FlatHexPosition const&) const [11]
                0.00    0.00      13/247745      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node(unsigned long, FlatHexPosition const&, unsigned long) const [22]
                0.00    0.00      13/247746      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(FlatHexPosition const&, unsigned long) const [50]
                0.00    0.00      13/13          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(FlatHexPosition const&, unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [149]
                0.00    0.00      13/91          FlatHexPosition const& std::forward<FlatHexPosition const&>(std::remove_reference<FlatHexPosition const&>::type&) [220]
                0.00    0.00      13/104         Tile&& std::forward<Tile>(std::remove_reference<Tile>::type&) [217]
                0.00    0.00      13/17770       std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_extract() const [187]
                0.00    0.00      13/17770       std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_M_v() [190]
                0.00    0.00      13/17770       decltype ((get<0>)((forward<std::pair<FlatHexPosition const, Tile>&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<FlatHexPosition const, Tile>&>(std::pair<FlatHexPosition const, Tile>&) const [186]
                0.00    0.00      13/13          std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool>::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&, bool, true>(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&, bool&&) [344]
                0.00    0.00      13/13          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Scoped_node::~_Scoped_node() [337]
-----------------------------------------------
                0.00    0.00      13/13          std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::emplace<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [94]
[93]     0.0    0.00    0.00      13         std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::emplace<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [93]
                0.00    0.00      13/13          std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<FlatHexPosition const&, Tile>(std::integral_constant<bool, true>, FlatHexPosition const&, Tile&&) [92]
                0.00    0.00      13/104         Tile&& std::forward<Tile>(std::remove_reference<Tile>::type&) [217]
                0.00    0.00      13/91          FlatHexPosition const& std::forward<FlatHexPosition const&>(std::remove_reference<FlatHexPosition const&>::type&) [220]
-----------------------------------------------
                0.00    0.00      13/13          World::addObject(Peon*) [91]
[94]     0.0    0.00    0.00      13         std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::emplace<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [94]
                0.00    0.00      13/13          std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::emplace<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [93]
                0.00    0.00      13/104         Tile&& std::forward<Tile>(std::remove_reference<Tile>::type&) [217]
                0.00    0.00      13/91          FlatHexPosition const& std::forward<FlatHexPosition const&>(std::remove_reference<FlatHexPosition const&>::type&) [220]
-----------------------------------------------
                0.00    0.00      12/12          GameEngine::peonTick(Peon*) [29]
[95]     0.0    0.00    0.00      12         World::removeObject(FlatHexPosition const&, Peon*) [95]
                0.00    0.00      12/247732      std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::find(FlatHexPosition const&) [5]
                0.00    0.00      11/11          std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::erase(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>) [125]
                0.00    0.00      12/12          Tile::erase(Peon*) [136]
                0.00    0.00      12/238860      std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::end() [36]
                0.00    0.00      12/238846      bool std::__detail::operator!=<std::pair<FlatHexPosition const, Tile>, true>(std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&, std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&) [51]
                0.00    0.00      24/8897        std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::operator->() const [204]
                0.00    0.00      12/12          Tile::isEmpty() const [357]
-----------------------------------------------
                0.00    0.00      27/27          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::~_Hashtable() [97]
[96]     0.0    0.00    0.00      27         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::clear() [96]
                0.00    0.00      27/13420       std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_begin() const [62]
                0.00    0.00      27/27          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<Peon*, false>*) [265]
-----------------------------------------------
                0.00    0.00      27/27          std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::~unordered_set() [98]
[97]     0.0    0.00    0.00      27         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::~_Hashtable() [97]
                0.00    0.00      27/27          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::clear() [96]
                0.00    0.00      27/27          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::~_Hashtable_alloc() [266]
                0.00    0.00      27/41          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets() [249]
-----------------------------------------------
                0.00    0.00       1/27          GameEngine::~GameEngine() [148]
                0.00    0.00      26/27          Tile::~Tile() [99]
[98]     0.0    0.00    0.00      27         std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::~unordered_set() [98]
                0.00    0.00      27/27          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::~_Hashtable() [97]
-----------------------------------------------
                0.00    0.00      13/26          std::pair<FlatHexPosition const, Tile>::~pair() [122]
                0.00    0.00      13/26          World::addObject(Peon*) [91]
[99]     0.0    0.00    0.00      26         Tile::~Tile() [99]
                0.00    0.00      26/27          std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::~unordered_set() [98]
-----------------------------------------------
                0.00    0.00      13/13          std::pair<FlatHexPosition const, Tile>::pair<Tile, true>(FlatHexPosition const&, Tile&&) [106]
[100]    0.0    0.00    0.00      13         Tile::Tile(Tile&&) [100]
                0.00    0.00      13/13          std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::unordered_set(std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >&&) [104]
-----------------------------------------------
                0.00    0.00      13/13          void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::construct<std::pair<FlatHexPosition const, Tile>, FlatHexPosition const&, Tile>(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::pair<FlatHexPosition const, Tile>*, FlatHexPosition const&, Tile&&) [105]
[101]    0.0    0.00    0.00      13         void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::construct<std::pair<FlatHexPosition const, Tile>, FlatHexPosition const&, Tile>(std::pair<FlatHexPosition const, Tile>*, FlatHexPosition const&, Tile&&) [101]
                0.00    0.00      13/13          std::pair<FlatHexPosition const, Tile>::pair<Tile, true>(FlatHexPosition const&, Tile&&) [106]
                0.00    0.00      13/91          FlatHexPosition const& std::forward<FlatHexPosition const&>(std::remove_reference<FlatHexPosition const&>::type&) [220]
                0.00    0.00      13/104         Tile&& std::forward<Tile>(std::remove_reference<Tile>::type&) [217]
                0.00    0.00      13/58          operator new(unsigned long, void*) [234]
-----------------------------------------------
                0.00    0.00      13/13          std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<FlatHexPosition const&, Tile>(std::integral_constant<bool, true>, FlatHexPosition const&, Tile&&) [92]
[102]    0.0    0.00    0.00      13         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Scoped_node::_Scoped_node<FlatHexPosition const&, Tile>(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >*, FlatHexPosition const&, Tile&&) [102]
                0.00    0.00      13/13          std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_node<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [107]
                0.00    0.00      13/104         Tile&& std::forward<Tile>(std::remove_reference<Tile>::type&) [217]
                0.00    0.00      13/91          FlatHexPosition const& std::forward<FlatHexPosition const&>(std::remove_reference<FlatHexPosition const&>::type&) [220]
-----------------------------------------------
                0.00    0.00      13/13          std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::unordered_set(std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >&&) [104]
[103]    0.0    0.00    0.00      13         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable(std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >&&) [103]
                0.00    0.00      26/13420       std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_begin() const [62]
                0.00    0.00      13/13          std::remove_reference<std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&>::type&& std::move<std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&>(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&) [354]
                0.00    0.00      13/13          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_base_alloc() [339]
                0.00    0.00      13/13          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_Hashtable_alloc(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&&) [347]
                0.00    0.00      13/13          std::__detail::_Hash_node_base::_Hash_node_base(std::__detail::_Hash_node_base*) [346]
                0.00    0.00      13/13          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_uses_single_bucket() const [334]
                0.00    0.00      13/16          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_bucket_index(std::__detail::_Hash_node<Peon*, false>*) const [282]
                0.00    0.00      13/13          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_reset() [340]
-----------------------------------------------
                0.00    0.00      13/13          Tile::Tile(Tile&&) [100]
[104]    0.0    0.00    0.00      13         std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::unordered_set(std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >&&) [104]
                0.00    0.00      13/13          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable(std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >&&) [103]
-----------------------------------------------
                0.00    0.00      13/13          std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_node<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [107]
[105]    0.0    0.00    0.00      13         void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::construct<std::pair<FlatHexPosition const, Tile>, FlatHexPosition const&, Tile>(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::pair<FlatHexPosition const, Tile>*, FlatHexPosition const&, Tile&&) [105]
                0.00    0.00      13/13          void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::construct<std::pair<FlatHexPosition const, Tile>, FlatHexPosition const&, Tile>(std::pair<FlatHexPosition const, Tile>*, FlatHexPosition const&, Tile&&) [101]
                0.00    0.00      13/104         Tile&& std::forward<Tile>(std::remove_reference<Tile>::type&) [217]
                0.00    0.00      13/91          FlatHexPosition const& std::forward<FlatHexPosition const&>(std::remove_reference<FlatHexPosition const&>::type&) [220]
-----------------------------------------------
                0.00    0.00      13/13          void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::construct<std::pair<FlatHexPosition const, Tile>, FlatHexPosition const&, Tile>(std::pair<FlatHexPosition const, Tile>*, FlatHexPosition const&, Tile&&) [101]
[106]    0.0    0.00    0.00      13         std::pair<FlatHexPosition const, Tile>::pair<Tile, true>(FlatHexPosition const&, Tile&&) [106]
                0.00    0.00      13/13          Tile::Tile(Tile&&) [100]
                0.00    0.00      13/104         Tile&& std::forward<Tile>(std::remove_reference<Tile>::type&) [217]
-----------------------------------------------
                0.00    0.00      13/13          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Scoped_node::_Scoped_node<FlatHexPosition const&, Tile>(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >*, FlatHexPosition const&, Tile&&) [102]
[107]    0.0    0.00    0.00      13         std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_node<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [107]
                0.00    0.00      13/13          void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::construct<std::pair<FlatHexPosition const, Tile>, FlatHexPosition const&, Tile>(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::pair<FlatHexPosition const, Tile>*, FlatHexPosition const&, Tile&&) [105]
                0.00    0.00      26/54          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_node_allocator() [236]
                0.00    0.00      13/13          std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::allocate(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, unsigned long) [343]
                0.00    0.00      13/13          std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__to_address<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [353]
                0.00    0.00      13/58          operator new(unsigned long, void*) [234]
                0.00    0.00      13/104         Tile&& std::forward<Tile>(std::remove_reference<Tile>::type&) [217]
                0.00    0.00      13/13          std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>::_Hash_node() [345]
                0.00    0.00      13/91          FlatHexPosition const& std::forward<FlatHexPosition const&>(std::remove_reference<FlatHexPosition const&>::type&) [220]
                0.00    0.00      13/26693       std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_M_valptr() [179]
-----------------------------------------------
                0.00    0.00       6/6           SDLHandler::handleMouseButtonDown(SDL_MouseButtonEvent const&) [57]
[108]    0.0    0.00    0.00       6         Controller::leftClickAt(FlatHexPosition const&) [108]
                0.00    0.00       6/238834      World::getContentAt(FlatHexPosition) [3]
                0.00    0.00       5/8872        std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::begin() const [72]
                0.00    0.00       5/8967        std::__detail::_Node_const_iterator<Peon*, true, false>::operator*() const [75]
                0.00    0.00       5/2815172     FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition::System) [14]
                0.00    0.00      10/31282       bool std::__detail::operator!=<Peon*, false>(std::__detail::_Node_iterator_base<Peon*, false> const&, std::__detail::_Node_iterator_base<Peon*, false> const&) [175]
                0.00    0.00       5/8872        std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::end() const [207]
                0.00    0.00       5/18999       Peon::pos() const [180]
                0.00    0.00       5/5           ControllerState::selectPeon(Peon*) [377]
                0.00    0.00       5/8967        std::__detail::_Node_const_iterator<Peon*, true, false>::operator++() [201]
                0.00    0.00       1/1           ControllerState::deselectPeon() [408]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Insert_base<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::insert(Peon* const&) [111]
[109]    0.0    0.00    0.00      16         std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool> std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > >(Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > const&, std::integral_constant<bool, true>, unsigned long) [109]
                0.00    0.00      16/16          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(Peon* const&, unsigned long, unsigned long, std::__detail::_Hash_node<Peon*, false>*, unsigned long) [115]
                0.00    0.00      16/16          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_find_node(unsigned long, Peon* const&, unsigned long) const [133]
                0.00    0.00      16/44          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_extract() const [241]
                0.00    0.00      16/32          Peon* const& std::__detail::_Identity::operator()<Peon* const&>(Peon* const&) const [250]
                0.00    0.00      16/28          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(Peon* const&) const [260]
                0.00    0.00      16/42          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_bucket_index(Peon* const&, unsigned long) const [246]
                0.00    0.00      16/112         Peon* const& std::forward<Peon* const&>(std::remove_reference<Peon* const&>::type&) [215]
                0.00    0.00      16/16          std::__detail::_Hash_node<Peon*, false>* std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::operator()<Peon* const&>(Peon* const&) const [283]
                0.00    0.00      16/16          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Scoped_node::_Scoped_node(std::__detail::_Hash_node<Peon*, false>*, std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >*) [288]
                0.00    0.00      16/16          std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool>::pair<std::__detail::_Node_iterator<Peon*, true, false>&, bool, true>(std::__detail::_Node_iterator<Peon*, true, false>&, bool&&) [296]
                0.00    0.00      16/16          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Scoped_node::~_Scoped_node() [289]
-----------------------------------------------
                0.00    0.00       1/16          Tile::insert(Peon*) [147]
                0.00    0.00       2/16          GameEngine::addPeon(Peon*) [112]
                0.00    0.00      13/16          Tile::Tile(FlatHexPosition, Peon*) [114]
[110]    0.0    0.00    0.00      16         std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::insert(Peon* const&) [110]
                0.00    0.00      16/16          std::__detail::_Insert_base<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::insert(Peon* const&) [111]
-----------------------------------------------
                0.00    0.00      16/16          std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::insert(Peon* const&) [110]
[111]    0.0    0.00    0.00      16         std::__detail::_Insert_base<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::insert(Peon* const&) [111]
                0.00    0.00      16/16          std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool> std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > >(Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > const&, std::integral_constant<bool, true>, unsigned long) [109]
                0.00    0.00      16/16          std::__detail::_Insert_base<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_conjure_hashtable() [299]
                0.00    0.00      16/16          std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_AllocNode(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&) [297]
-----------------------------------------------
                0.00    0.00       2/2           main [1]
[112]    0.0    0.00    0.00       2         GameEngine::addPeon(Peon*) [112]
                0.00    0.00       2/14          World::addObject(Peon*) [91]
                0.00    0.00       2/16          std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::insert(Peon* const&) [110]
-----------------------------------------------
                0.00    0.00      35/35          AbstractCamera::update() [46]
[113]    0.0    0.00    0.00      35         Camera::doUpdateUDScroll(float) [113]
                0.00    0.00      35/741811      FlatHexPosition::operator+(FlatHexPosition const&) const [17]
                0.00    0.00      70/4505825     FlatHexPosition::convert(FlatHexPosition::System) [8]
                0.00    0.00      35/253382      FlatHexPosition::operator*(float const&) const [55]
                0.00    0.00      35/44          HexViewport::target() const [239]
                0.00    0.00      35/45          HexViewport::target(FlatHexPosition const&) [238]
-----------------------------------------------
                0.00    0.00      13/13          World::addObject(Peon*) [91]
[114]    0.0    0.00    0.00      13         Tile::Tile(FlatHexPosition, Peon*) [114]
                0.00    0.00      13/16          std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::insert(Peon* const&) [110]
                0.00    0.00      13/14          std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::unordered_set() [324]
-----------------------------------------------
                0.00    0.00      16/16          std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool> std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > >(Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > const&, std::integral_constant<bool, true>, unsigned long) [109]
[115]    0.0    0.00    0.00      16         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(Peon* const&, unsigned long, unsigned long, std::__detail::_Hash_node<Peon*, false>*, unsigned long) [115]
                0.00    0.00      14/14          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash(unsigned long, unsigned long const&) [117]
                0.00    0.00      16/29          std::__detail::_Prime_rehash_policy::_M_state() const [256]
                0.00    0.00      16/16          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_store_code(std::__detail::_Hash_node<Peon*, false>*, unsigned long) const [284]
                0.00    0.00      16/16          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<Peon*, false>*) [290]
                0.00    0.00      16/8990        std::__detail::_Node_iterator<Peon*, true, false>::_Node_iterator(std::__detail::_Hash_node<Peon*, false>*) [200]
                0.00    0.00      14/42          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_bucket_index(Peon* const&, unsigned long) const [246]
-----------------------------------------------
                0.00    0.00      14/14          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash(unsigned long, unsigned long const&) [117]
[116]    0.0    0.00    0.00      14         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) [116]
                0.00    0.00      14/13420       std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_begin() const [62]
                0.00    0.00      14/14          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_allocate_buckets(unsigned long) [322]
                0.00    0.00      14/41          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets() [249]
-----------------------------------------------
                0.00    0.00      14/14          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(Peon* const&, unsigned long, unsigned long, std::__detail::_Hash_node<Peon*, false>*, unsigned long) [115]
[117]    0.0    0.00    0.00      14         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash(unsigned long, unsigned long const&) [117]
                0.00    0.00      14/14          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) [116]
-----------------------------------------------
                0.00    0.00       5/5           SDLHandler::handleMouseButtonDown(SDL_MouseButtonEvent const&) [57]
[118]    0.0    0.00    0.00       5         Controller::rightClickAt(FlatHexPosition const&) [118]
                0.00    0.00       4/4           Peon::setTargetPos(FlatHexPosition const&) [119]
                0.00    0.00       9/9           ControllerState::selectedPeon() [370]
-----------------------------------------------
                0.00    0.00       4/4           Controller::rightClickAt(FlatHexPosition const&) [118]
[119]    0.0    0.00    0.00       4         Peon::setTargetPos(FlatHexPosition const&) [119]
                0.00    0.00       4/8966        FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition const&) [43]
                0.00    0.00       4/4           FlatHexPosition::unit() [155]
-----------------------------------------------
                0.00    0.00      13/13          void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::destroy<std::pair<FlatHexPosition const, Tile> >(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::pair<FlatHexPosition const, Tile>*) [121]
[120]    0.0    0.00    0.00      13         void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::destroy<std::pair<FlatHexPosition const, Tile> >(std::pair<FlatHexPosition const, Tile>*) [120]
                0.00    0.00      13/13          std::pair<FlatHexPosition const, Tile>::~pair() [122]
-----------------------------------------------
                0.00    0.00      13/13          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [123]
[121]    0.0    0.00    0.00      13         void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::destroy<std::pair<FlatHexPosition const, Tile> >(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::pair<FlatHexPosition const, Tile>*) [121]
                0.00    0.00      13/13          void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::destroy<std::pair<FlatHexPosition const, Tile> >(std::pair<FlatHexPosition const, Tile>*) [120]
-----------------------------------------------
                0.00    0.00      13/13          void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::destroy<std::pair<FlatHexPosition const, Tile> >(std::pair<FlatHexPosition const, Tile>*) [120]
[122]    0.0    0.00    0.00      13         std::pair<FlatHexPosition const, Tile>::~pair() [122]
                0.00    0.00      13/26          Tile::~Tile() [99]
-----------------------------------------------
                0.00    0.00       2/13          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [146]
                0.00    0.00      11/13          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [127]
[123]    0.0    0.00    0.00      13         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [123]
                0.00    0.00      13/13          void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::destroy<std::pair<FlatHexPosition const, Tile> >(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::pair<FlatHexPosition const, Tile>*) [121]
                0.00    0.00      13/26693       std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_M_valptr() [179]
                0.00    0.00      13/54          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_node_allocator() [236]
                0.00    0.00      13/13          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [348]
-----------------------------------------------
                0.00    0.00      11/11          std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::erase(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>) [125]
[124]    0.0    0.00    0.00      11         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>) [124]
                0.00    0.00      11/11          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<FlatHexPosition const, Tile>, false, true>) [126]
                0.00    0.00      11/11          std::__detail::_Node_const_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::_Node_const_iterator(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true> const&) [150]
-----------------------------------------------
                0.00    0.00      11/11          World::removeObject(FlatHexPosition const&, Peon*) [95]
[125]    0.0    0.00    0.00      11         std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::erase(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>) [125]
                0.00    0.00      11/11          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>) [124]
-----------------------------------------------
                0.00    0.00      11/11          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>) [124]
[126]    0.0    0.00    0.00      11         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<FlatHexPosition const, Tile>, false, true>) [126]
                0.00    0.00      11/11          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [127]
                0.00    0.00      11/12903       std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const [198]
                0.00    0.00      11/11          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_get_previous_node(unsigned long, std::__detail::_Hash_node_base*) [368]
-----------------------------------------------
                0.00    0.00      11/11          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<FlatHexPosition const, Tile>, false, true>) [126]
[127]    0.0    0.00    0.00      11         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [127]
                0.00    0.00      11/13          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [123]
                0.00    0.00      11/486616      std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [53]
                0.00    0.00      30/12916       std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>::_M_next() const [197]
                0.00    0.00      11/11          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_remove_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [369]
                0.00    0.00       8/12903       std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const [198]
-----------------------------------------------
                0.00    0.00      19/19          SDLHandler::handleSDLEvents() [56]
[128]    0.0    0.00    0.00      19         SDLHandler::handleKeyDown(SDL_KeyboardEvent const&) [128]
                0.00    0.00      10/10          AbstractCamera::rotateLeft() [131]
                0.00    0.00       4/4           AbstractCamera::rotateRight() [140]
                0.00    0.00       3/3           AbstractCamera::scrollDown() [381]
                0.00    0.00       1/1           AbstractCamera::scrollRight() [405]
-----------------------------------------------
                0.00    0.00      12/28          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(std::integral_constant<bool, true>, Peon* const&) [138]
                0.00    0.00      16/28          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_find_node(unsigned long, Peon* const&, unsigned long) const [133]
[129]    0.0    0.00    0.00      28         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_find_before_node(unsigned long, Peon* const&, unsigned long) const [129]
                0.00    0.00      12/12          std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_M_equals(Peon* const&, unsigned long, std::__detail::_Hash_node<Peon*, false>*) const [130]
-----------------------------------------------
                0.00    0.00      12/12          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_find_before_node(unsigned long, Peon* const&, unsigned long) const [129]
[130]    0.0    0.00    0.00      12         std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_M_equals(Peon* const&, unsigned long, std::__detail::_Hash_node<Peon*, false>*) const [130]
                0.00    0.00      12/17941       std::__detail::_Hash_node_value_base<Peon*>::_M_v() [61]
                0.00    0.00      12/12          std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_Equal_hash_code<std::__detail::_Hash_node<Peon*, false> >::_S_equals(unsigned long, std::__detail::_Hash_node<Peon*, false> const&) [366]
                0.00    0.00      12/12          std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_M_eq() const [360]
                0.00    0.00      12/44          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_extract() const [241]
                0.00    0.00      12/12          Peon*& std::__detail::_Identity::operator()<Peon*&>(Peon*&) const [362]
                0.00    0.00      12/12          std::equal_to<Peon*>::operator()(Peon* const&, Peon* const&) const [363]
-----------------------------------------------
                0.00    0.00      10/10          SDLHandler::handleKeyDown(SDL_KeyboardEvent const&) [128]
[131]    0.0    0.00    0.00      10         AbstractCamera::rotateLeft() [131]
                0.00    0.00      10/10          Camera::doRotateLeft() [132]
-----------------------------------------------
                0.00    0.00      10/10          AbstractCamera::rotateLeft() [131]
[132]    0.0    0.00    0.00      10         Camera::doRotateLeft() [132]
                0.00    0.00      10/14          HexViewport::rotation(Matrix22 const&) [134]
                0.00    0.00      20/252327      FlatHexPosition::operator*(Matrix22 const&) const [32]
                0.00    0.00      10/14          HexViewport::rotation() const [319]
                0.00    0.00      10/14          Matrix22::operator*(Matrix22 const&) const [320]
-----------------------------------------------
                0.00    0.00      16/16          std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool> std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > >(Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > const&, std::integral_constant<bool, true>, unsigned long) [109]
[133]    0.0    0.00    0.00      16         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_find_node(unsigned long, Peon* const&, unsigned long) const [133]
                0.00    0.00      16/28          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_find_before_node(unsigned long, Peon* const&, unsigned long) const [129]
-----------------------------------------------
                0.00    0.00       4/14          Camera::doRotateRight() [141]
                0.00    0.00      10/14          Camera::doRotateLeft() [132]
[134]    0.0    0.00    0.00      14         HexViewport::rotation(Matrix22 const&) [134]
                0.00    0.00      28/252327      FlatHexPosition::operator*(Matrix22 const&) const [32]
                0.00    0.00      28/28          FlatHexPosition::toString[abi:cxx11]() const [259]
-----------------------------------------------
                0.00    0.00       9/9           AbstractCamera::update() [46]
[135]    0.0    0.00    0.00       9         Camera::doUpdateLRScroll(float) [135]
                0.00    0.00       9/741811      FlatHexPosition::operator+(FlatHexPosition const&) const [17]
                0.00    0.00      18/4505825     FlatHexPosition::convert(FlatHexPosition::System) [8]
                0.00    0.00       9/253382      FlatHexPosition::operator*(float const&) const [55]
                0.00    0.00       9/44          HexViewport::target() const [239]
                0.00    0.00       9/45          HexViewport::target(FlatHexPosition const&) [238]
-----------------------------------------------
                0.00    0.00      12/12          World::removeObject(FlatHexPosition const&, Peon*) [95]
[136]    0.0    0.00    0.00      12         Tile::erase(Peon*) [136]
                0.00    0.00      12/12          std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::erase(Peon* const&) [139]
-----------------------------------------------
                0.00    0.00      12/12          std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::erase(Peon* const&) [139]
[137]    0.0    0.00    0.00      12         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::erase(Peon* const&) [137]
                0.00    0.00      12/12          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(std::integral_constant<bool, true>, Peon* const&) [138]
-----------------------------------------------
                0.00    0.00      12/12          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::erase(Peon* const&) [137]
[138]    0.0    0.00    0.00      12         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(std::integral_constant<bool, true>, Peon* const&) [138]
                0.00    0.00      12/28          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_find_before_node(unsigned long, Peon* const&, unsigned long) const [129]
                0.00    0.00      12/28          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(Peon* const&) const [260]
                0.00    0.00      12/42          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_bucket_index(Peon* const&, unsigned long) const [246]
                0.00    0.00      12/12          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<Peon*, false>*) [365]
-----------------------------------------------
                0.00    0.00      12/12          Tile::erase(Peon*) [136]
[139]    0.0    0.00    0.00      12         std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::erase(Peon* const&) [139]
                0.00    0.00      12/12          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::erase(Peon* const&) [137]
-----------------------------------------------
                0.00    0.00       4/4           SDLHandler::handleKeyDown(SDL_KeyboardEvent const&) [128]
[140]    0.0    0.00    0.00       4         AbstractCamera::rotateRight() [140]
                0.00    0.00       4/4           Camera::doRotateRight() [141]
-----------------------------------------------
                0.00    0.00       4/4           AbstractCamera::rotateRight() [140]
[141]    0.0    0.00    0.00       4         Camera::doRotateRight() [141]
                0.00    0.00       8/252327      FlatHexPosition::operator*(Matrix22 const&) const [32]
                0.00    0.00       4/14          HexViewport::rotation(Matrix22 const&) [134]
                0.00    0.00       4/14          HexViewport::rotation() const [319]
                0.00    0.00       4/14          Matrix22::operator*(Matrix22 const&) const [320]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[142]    0.0    0.00    0.00       1         World::~World() [142]
                0.00    0.00       1/1           std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::~unordered_map() [145]
-----------------------------------------------
                0.00    0.00       1/1           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable() [144]
[143]    0.0    0.00    0.00       1         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear() [143]
                0.00    0.00       1/1           std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [146]
                0.00    0.00       1/2           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_begin() const [386]
-----------------------------------------------
                0.00    0.00       1/1           std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::~unordered_map() [145]
[144]    0.0    0.00    0.00       1         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable() [144]
                0.00    0.00       1/1           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear() [143]
                0.00    0.00       1/1           std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::~_Hashtable_alloc() [427]
                0.00    0.00       1/2           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets() [390]
-----------------------------------------------
                0.00    0.00       1/1           World::~World() [142]
[145]    0.0    0.00    0.00       1         std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::~unordered_map() [145]
                0.00    0.00       1/1           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable() [144]
-----------------------------------------------
                0.00    0.00       1/1           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear() [143]
[146]    0.0    0.00    0.00       1         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [146]
                0.00    0.00       2/13          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [123]
                0.00    0.00       2/12916       std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>::_M_next() const [197]
-----------------------------------------------
                0.00    0.00       1/1           World::addObject(Peon*) [91]
[147]    0.0    0.00    0.00       1         Tile::insert(Peon*) [147]
                0.00    0.00       1/16          std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::insert(Peon* const&) [110]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[148]    0.0    0.00    0.00       1         GameEngine::~GameEngine() [148]
                0.00    0.00       1/27          std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::~unordered_set() [98]
-----------------------------------------------
                0.00    0.00      13/13          std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<FlatHexPosition const&, Tile>(std::integral_constant<bool, true>, FlatHexPosition const&, Tile&&) [92]
[149]    0.0    0.00    0.00      13         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(FlatHexPosition const&, unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [149]
                0.00    0.00      13/486616      std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [53]
                0.00    0.00       1/247746      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(FlatHexPosition const&, unsigned long) const [50]
                0.00    0.00      13/29          std::__detail::_Prime_rehash_policy::_M_state() const [256]
                0.00    0.00      13/13          std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_store_code(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) const [335]
                0.00    0.00      13/13          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [338]
                0.00    0.00       1/1           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash(unsigned long, unsigned long const&) [421]
-----------------------------------------------
                0.00    0.00      11/11          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>) [124]
[150]    0.0    0.00    0.00      11         std::__detail::_Node_const_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::_Node_const_iterator(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true> const&) [150]
                0.00    0.00      11/486627      std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [49]
-----------------------------------------------
                0.00    0.00       1/1           Camera::Camera(int, int, int, int, int, int) [152]
[151]    0.0    0.00    0.00       1         HexViewport::HexViewport(int, int, int, int) [151]
                0.00    0.00       1/1           FlatHexPosition::FlatHexPosition(float, float, float, float, FlatHexPosition::System) [157]
                0.00    0.00       1/1012022     FlatHexPosition::FlatHexPosition(FlatHexPosition::System) [24]
                0.00    0.00       1/17          Matrix22::Matrix22(float, float, float, float) [274]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[152]    0.0    0.00    0.00       1         Camera::Camera(int, int, int, int, int, int) [152]
                0.00    0.00       1/1           HexViewport::HexViewport(int, int, int, int) [151]
                0.00    0.00       1/1           AbstractCamera::AbstractCamera(float, float, int) [407]
-----------------------------------------------
                0.00    0.00       1/1           SpriteAsset::loadFromFile(char const*, SDL_Renderer*) [73]
[153]    0.0    0.00    0.00       1         std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::operator bool() const [153]
                0.00    0.00       1/743376      std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::get() const [19]
-----------------------------------------------
                0.00    0.00       4/4           FlatHexPosition::unit() [155]
[154]    0.0    0.00    0.00       4         FlatHexPosition::unit(FlatHexPosition*) [154]
                0.00    0.00       4/4505825     FlatHexPosition::convert(FlatHexPosition::System) [8]
-----------------------------------------------
                0.00    0.00       4/4           Peon::setTargetPos(FlatHexPosition const&) [119]
[155]    0.0    0.00    0.00       4         FlatHexPosition::unit() [155]
                0.00    0.00       4/4           FlatHexPosition::unit(FlatHexPosition*) [154]
-----------------------------------------------
                0.00    0.00       2/2           main [1]
[156]    0.0    0.00    0.00       2         Peon::Peon(FlatHexPosition const&) [156]
                0.00    0.00       2/17937       FlatHexPosition::FlatHexPosition() [89]
-----------------------------------------------
                0.00    0.00       1/1           HexViewport::HexViewport(int, int, int, int) [151]
[157]    0.0    0.00    0.00       1         FlatHexPosition::FlatHexPosition(float, float, float, float, FlatHexPosition::System) [157]
                0.00    0.00       1/1029976     FlatHexPosition::FlatHexPosition(float, float, float, FlatHexPosition::System) [26]
                0.00    0.00       1/4505825     FlatHexPosition::convert(FlatHexPosition::System) [8]
-----------------------------------------------
                0.00    0.00      16/260707      std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node<Peon*, false> const*, unsigned long) const [285]
                0.00    0.00      42/260707      std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(Peon* const&, unsigned long, unsigned long) const [247]
                0.00    0.00   12903/260707      std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> const*, unsigned long) const [199]
                0.00    0.00  247746/260707      std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(FlatHexPosition const&, unsigned long, unsigned long) const [169]
[164]    0.0    0.00    0.00  260707         std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const [164]
-----------------------------------------------
                0.00    0.00      58/260707      std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h2() const [233]
                0.00    0.00  260649/260707      std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h2() const [166]
[165]    0.0    0.00    0.00  260707         std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true>::_M_cget() const [165]
-----------------------------------------------
                0.00    0.00   12903/260649      std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> const*, unsigned long) const [199]
                0.00    0.00  247746/260649      std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(FlatHexPosition const&, unsigned long, unsigned long) const [169]
[166]    0.0    0.00    0.00  260649         std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h2() const [166]
                0.00    0.00  260649/260707      std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true>::_M_cget() const [165]
-----------------------------------------------
                0.00    0.00       1/247791      SpriteAsset::loadFromFile(char const*, SDL_Renderer*) [73]
                0.00    0.00    8962/247791      SmallObjectRenderer::renderAt(int, int, int, SDL_Renderer*) [37]
                0.00    0.00  238828/247791      TiledObjectRenderer::renderAt(int, int, int, SDL_Renderer*) [6]
[167]    0.0    0.00    0.00  247791         SpriteSheet::height() const [167]
-----------------------------------------------
                0.00    0.00  247790/247790      RenderingEngine::render() [2]
[168]    0.0    0.00    0.00  247790         AbstractCamera::getOrientation() [168]
-----------------------------------------------
                0.00    0.00  247746/247746      std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(FlatHexPosition const&, unsigned long) const [50]
[169]    0.0    0.00    0.00  247746         std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(FlatHexPosition const&, unsigned long, unsigned long) const [169]
                0.00    0.00  247746/260649      std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h2() const [166]
                0.00    0.00  247746/260707      std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const [164]
-----------------------------------------------
                0.00    0.00  247745/247745      std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(FlatHexPosition const&) const [11]
[170]    0.0    0.00    0.00  247745         std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h1() const [170]
                0.00    0.00  247745/247745      std::__detail::_Hashtable_ebo_helper<1, HCHasher, true>::_M_cget() const [171]
-----------------------------------------------
                0.00    0.00  247745/247745      std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h1() const [170]
[171]    0.0    0.00    0.00  247745         std::__detail::_Hashtable_ebo_helper<1, HCHasher, true>::_M_cget() const [171]
-----------------------------------------------
                0.00    0.00  239029/239029      RenderingEngine::render() [2]
[172]    0.0    0.00    0.00  239029         World::height() const [172]
-----------------------------------------------
                0.00    0.00   58253/58253       RenderingEngine::render() [2]
[173]    0.0    0.00    0.00   58253         HexViewport::tileWidth() const [173]
-----------------------------------------------
                0.00    0.00   46234/46234       std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals(FlatHexPosition const&, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const [44]
[174]    0.0    0.00    0.00   46234         std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_Equal_hash_code<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::_S_equals(unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> const&) [174]
-----------------------------------------------
                0.00    0.00      10/31282       Controller::leftClickAt(FlatHexPosition const&) [108]
                0.00    0.00   13443/31282       GameEngine::update() [23]
                0.00    0.00   17829/31282       RenderingEngine::render() [2]
[175]    0.0    0.00    0.00   31282         bool std::__detail::operator!=<Peon*, false>(std::__detail::_Node_iterator_base<Peon*, false> const&, std::__detail::_Node_iterator_base<Peon*, false> const&) [175]
-----------------------------------------------
                0.00    0.00    8990/26734       std::__detail::_Node_iterator<Peon*, true, false>::_Node_iterator(std::__detail::_Hash_node<Peon*, false>*) [200]
                0.00    0.00   17744/26734       std::__detail::_Node_const_iterator<Peon*, true, false>::_Node_const_iterator(std::__detail::_Hash_node<Peon*, false>*) [195]
[176]    0.0    0.00    0.00   26734         std::__detail::_Node_iterator_base<Peon*, false>::_Node_iterator_base(std::__detail::_Hash_node<Peon*, false>*) [176]
-----------------------------------------------
                0.00    0.00   26693/26693       std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_M_valptr() [179]
[177]    0.0    0.00    0.00   26693         __gnu_cxx::__aligned_buffer<std::pair<FlatHexPosition const, Tile> >::_M_ptr() [177]
                0.00    0.00   26693/26693       __gnu_cxx::__aligned_buffer<std::pair<FlatHexPosition const, Tile> >::_M_addr() [178]
-----------------------------------------------
                0.00    0.00   26693/26693       __gnu_cxx::__aligned_buffer<std::pair<FlatHexPosition const, Tile> >::_M_ptr() [177]
[178]    0.0    0.00    0.00   26693         __gnu_cxx::__aligned_buffer<std::pair<FlatHexPosition const, Tile> >::_M_addr() [178]
-----------------------------------------------
                0.00    0.00      13/26693       std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [123]
                0.00    0.00      13/26693       std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_node<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [107]
                0.00    0.00    8897/26693       std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::operator->() const [204]
                0.00    0.00   17770/26693       std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_M_v() [190]
[179]    0.0    0.00    0.00   26693         std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_M_valptr() [179]
                0.00    0.00   26693/26693       __gnu_cxx::__aligned_buffer<std::pair<FlatHexPosition const, Tile> >::_M_ptr() [177]
-----------------------------------------------
                0.00    0.00       5/18999       Controller::leftClickAt(FlatHexPosition const&) [108]
                0.00    0.00      14/18999       World::addObject(Peon*) [91]
                0.00    0.00    8962/18999       RenderingEngine::render() [2]
                0.00    0.00   10018/18999       GameEngine::peonTick(Peon*) [29]
[180]    0.0    0.00    0.00   18999         Peon::pos() const [180]
-----------------------------------------------
                0.00    0.00   17973/17973       std::__detail::_Hash_node_value_base<Peon*>::_M_valptr() [183]
[181]    0.0    0.00    0.00   17973         __gnu_cxx::__aligned_buffer<Peon*>::_M_ptr() [181]
                0.00    0.00   17973/17973       __gnu_cxx::__aligned_buffer<Peon*>::_M_addr() [182]
-----------------------------------------------
                0.00    0.00   17973/17973       __gnu_cxx::__aligned_buffer<Peon*>::_M_ptr() [181]
[182]    0.0    0.00    0.00   17973         __gnu_cxx::__aligned_buffer<Peon*>::_M_addr() [182]
-----------------------------------------------
                0.00    0.00      16/17973       std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_node(std::__detail::_Hash_node<Peon*, false>*) [301]
                0.00    0.00      16/17973       std::__detail::_Hash_node<Peon*, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_node<Peon* const&>(Peon* const&) [300]
                0.00    0.00   17941/17973       std::__detail::_Hash_node_value_base<Peon*>::_M_v() [61]
[183]    0.0    0.00    0.00   17973         std::__detail::_Hash_node_value_base<Peon*>::_M_valptr() [183]
                0.00    0.00   17973/17973       __gnu_cxx::__aligned_buffer<Peon*>::_M_ptr() [181]
-----------------------------------------------
                0.00    0.00       2/17960       std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<Peon*, false>*) [290]
                0.00    0.00       4/17960       std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<Peon*, false>*) [265]
                0.00    0.00      25/17960       std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<Peon*, false>*) [365]
                0.00    0.00   17929/17960       std::__detail::_Node_iterator_base<Peon*, false>::_M_incr() [185]
[184]    0.0    0.00    0.00   17960         std::__detail::_Hash_node<Peon*, false>::_M_next() const [184]
-----------------------------------------------
                0.00    0.00    8962/17929       std::__detail::_Node_iterator<Peon*, true, false>::operator++() [203]
                0.00    0.00    8967/17929       std::__detail::_Node_const_iterator<Peon*, true, false>::operator++() [201]
[185]    0.0    0.00    0.00   17929         std::__detail::_Node_iterator_base<Peon*, false>::_M_incr() [185]
                0.00    0.00   17929/17960       std::__detail::_Hash_node<Peon*, false>::_M_next() const [184]
-----------------------------------------------
                0.00    0.00      13/17770       std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<FlatHexPosition const&, Tile>(std::integral_constant<bool, true>, FlatHexPosition const&, Tile&&) [92]
                0.00    0.00   17757/17770       std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals(FlatHexPosition const&, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const [44]
[186]    0.0    0.00    0.00   17770         decltype ((get<0>)((forward<std::pair<FlatHexPosition const, Tile>&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<FlatHexPosition const, Tile>&>(std::pair<FlatHexPosition const, Tile>&) const [186]
                0.00    0.00   17770/17770       std::pair<FlatHexPosition const, Tile>& std::forward<std::pair<FlatHexPosition const, Tile>&>(std::remove_reference<std::pair<FlatHexPosition const, Tile>&>::type&) [192]
                0.00    0.00   17770/17770       std::tuple_element<0ul, std::pair<FlatHexPosition const, Tile> >::type& std::get<0ul, FlatHexPosition const, Tile>(std::pair<FlatHexPosition const, Tile>&) [191]
-----------------------------------------------
                0.00    0.00      13/17770       std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<FlatHexPosition const&, Tile>(std::integral_constant<bool, true>, FlatHexPosition const&, Tile&&) [92]
                0.00    0.00   17757/17770       std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals(FlatHexPosition const&, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const [44]
[187]    0.0    0.00    0.00   17770         std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_extract() const [187]
                0.00    0.00   17770/17770       std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>::_M_cget() const [188]
-----------------------------------------------
                0.00    0.00   17770/17770       std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_extract() const [187]
[188]    0.0    0.00    0.00   17770         std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>::_M_cget() const [188]
-----------------------------------------------
                0.00    0.00   17770/17770       std::tuple_element<0ul, std::pair<FlatHexPosition const, Tile> >::type& std::get<0ul, FlatHexPosition const, Tile>(std::pair<FlatHexPosition const, Tile>&) [191]
[189]    0.0    0.00    0.00   17770         FlatHexPosition const& std::__pair_get<0ul>::__get<FlatHexPosition const, Tile>(std::pair<FlatHexPosition const, Tile>&) [189]
-----------------------------------------------
                0.00    0.00      13/17770       std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<FlatHexPosition const&, Tile>(std::integral_constant<bool, true>, FlatHexPosition const&, Tile&&) [92]
                0.00    0.00   17757/17770       std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals(FlatHexPosition const&, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const [44]
[190]    0.0    0.00    0.00   17770         std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_M_v() [190]
                0.00    0.00   17770/26693       std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_M_valptr() [179]
-----------------------------------------------
                0.00    0.00   17770/17770       decltype ((get<0>)((forward<std::pair<FlatHexPosition const, Tile>&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<FlatHexPosition const, Tile>&>(std::pair<FlatHexPosition const, Tile>&) const [186]
[191]    0.0    0.00    0.00   17770         std::tuple_element<0ul, std::pair<FlatHexPosition const, Tile> >::type& std::get<0ul, FlatHexPosition const, Tile>(std::pair<FlatHexPosition const, Tile>&) [191]
                0.00    0.00   17770/17770       FlatHexPosition const& std::__pair_get<0ul>::__get<FlatHexPosition const, Tile>(std::pair<FlatHexPosition const, Tile>&) [189]
-----------------------------------------------
                0.00    0.00   17770/17770       decltype ((get<0>)((forward<std::pair<FlatHexPosition const, Tile>&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<FlatHexPosition const, Tile>&>(std::pair<FlatHexPosition const, Tile>&) const [186]
[192]    0.0    0.00    0.00   17770         std::pair<FlatHexPosition const, Tile>& std::forward<std::pair<FlatHexPosition const, Tile>&>(std::remove_reference<std::pair<FlatHexPosition const, Tile>&>::type&) [192]
-----------------------------------------------
                0.00    0.00   17757/17757       std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals(FlatHexPosition const&, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const [44]
[193]    0.0    0.00    0.00   17757         std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_eq() const [193]
                0.00    0.00   17757/17757       std::__detail::_Hashtable_ebo_helper<0, HCEquals, true>::_M_cget() const [194]
-----------------------------------------------
                0.00    0.00   17757/17757       std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_eq() const [193]
[194]    0.0    0.00    0.00   17757         std::__detail::_Hashtable_ebo_helper<0, HCEquals, true>::_M_cget() const [194]
-----------------------------------------------
                0.00    0.00    8872/17744       std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::begin() const [71]
                0.00    0.00    8872/17744       std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::end() const [206]
[195]    0.0    0.00    0.00   17744         std::__detail::_Node_const_iterator<Peon*, true, false>::_Node_const_iterator(std::__detail::_Hash_node<Peon*, false>*) [195]
                0.00    0.00   17744/26734       std::__detail::_Node_iterator_base<Peon*, false>::_Node_iterator_base(std::__detail::_Hash_node<Peon*, false>*) [176]
-----------------------------------------------
                0.00    0.00   16868/16868       GameEngine::peonTick(Peon*) [29]
[196]    0.0    0.00    0.00   16868         Peon::targetPos() const [196]
-----------------------------------------------
                0.00    0.00       2/12916       std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [146]
                0.00    0.00      12/12916       std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [338]
                0.00    0.00      30/12916       std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [127]
                0.00    0.00   12872/12916       std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, FlatHexPosition const&, unsigned long) const [25]
[197]    0.0    0.00    0.00   12916         std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>::_M_next() const [197]
-----------------------------------------------
                0.00    0.00       8/12903       std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [127]
                0.00    0.00      11/12903       std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<FlatHexPosition const, Tile>, false, true>) [126]
                0.00    0.00      12/12903       std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [338]
                0.00    0.00   12872/12903       std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, FlatHexPosition const&, unsigned long) const [25]
[198]    0.0    0.00    0.00   12903         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const [198]
                0.00    0.00   12903/12903       std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> const*, unsigned long) const [199]
-----------------------------------------------
                0.00    0.00   12903/12903       std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const [198]
[199]    0.0    0.00    0.00   12903         std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> const*, unsigned long) const [199]
                0.00    0.00   12903/260649      std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h2() const [166]
                0.00    0.00   12903/260707      std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const [164]
-----------------------------------------------
                0.00    0.00      12/8990        std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<Peon*, false>*) [365]
                0.00    0.00      16/8990        std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(Peon* const&, unsigned long, unsigned long, std::__detail::_Hash_node<Peon*, false>*, unsigned long) [115]
                0.00    0.00    4481/8990        std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::begin() [80]
                0.00    0.00    4481/8990        std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::end() [210]
[200]    0.0    0.00    0.00    8990         std::__detail::_Node_iterator<Peon*, true, false>::_Node_iterator(std::__detail::_Hash_node<Peon*, false>*) [200]
                0.00    0.00    8990/26734       std::__detail::_Node_iterator_base<Peon*, false>::_Node_iterator_base(std::__detail::_Hash_node<Peon*, false>*) [176]
-----------------------------------------------
                0.00    0.00       5/8967        Controller::leftClickAt(FlatHexPosition const&) [108]
                0.00    0.00    8962/8967        RenderingEngine::render() [2]
[201]    0.0    0.00    0.00    8967         std::__detail::_Node_const_iterator<Peon*, true, false>::operator++() [201]
                0.00    0.00    8967/17929       std::__detail::_Node_iterator_base<Peon*, false>::_M_incr() [185]
-----------------------------------------------
                0.00    0.00    8962/8962        GameEngine::peonTick(Peon*) [29]
[202]    0.0    0.00    0.00    8962         Peon::pos(FlatHexPosition const&) [202]
-----------------------------------------------
                0.00    0.00    8962/8962        GameEngine::update() [23]
[203]    0.0    0.00    0.00    8962         std::__detail::_Node_iterator<Peon*, true, false>::operator++() [203]
                0.00    0.00    8962/17929       std::__detail::_Node_iterator_base<Peon*, false>::_M_incr() [185]
-----------------------------------------------
                0.00    0.00       1/8897        World::addObject(Peon*) [91]
                0.00    0.00      24/8897        World::removeObject(FlatHexPosition const&, Peon*) [95]
                0.00    0.00    8872/8897        World::getContentAt(FlatHexPosition) [3]
[204]    0.0    0.00    0.00    8897         std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::operator->() const [204]
                0.00    0.00    8897/26693       std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_M_valptr() [179]
-----------------------------------------------
                0.00    0.00    8872/8872        World::getContentAt(FlatHexPosition) [3]
[205]    0.0    0.00    0.00    8872         Tile::getContent() const [205]
-----------------------------------------------
                0.00    0.00    8872/8872        std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::end() const [207]
[206]    0.0    0.00    0.00    8872         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::end() const [206]
                0.00    0.00    8872/17744       std::__detail::_Node_const_iterator<Peon*, true, false>::_Node_const_iterator(std::__detail::_Hash_node<Peon*, false>*) [195]
-----------------------------------------------
                0.00    0.00       5/8872        Controller::leftClickAt(FlatHexPosition const&) [108]
                0.00    0.00    8867/8872        RenderingEngine::render() [2]
[207]    0.0    0.00    0.00    8872         std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::end() const [207]
                0.00    0.00    8872/8872        std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::end() const [206]
-----------------------------------------------
                0.00    0.00    4481/4481        main [1]
[208]    0.0    0.00    0.00    4481         Window::clear() [208]
-----------------------------------------------
                0.00    0.00    4481/4481        RenderingEngine::render() [2]
[209]    0.0    0.00    0.00    4481         HexViewport::viewPortAxis(FlatHexPosition*, FlatHexPosition*) const [209]
-----------------------------------------------
                0.00    0.00    4481/4481        std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::end() [211]
[210]    0.0    0.00    0.00    4481         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::end() [210]
                0.00    0.00    4481/8990        std::__detail::_Node_iterator<Peon*, true, false>::_Node_iterator(std::__detail::_Hash_node<Peon*, false>*) [200]
-----------------------------------------------
                0.00    0.00    4481/4481        GameEngine::update() [23]
[211]    0.0    0.00    0.00    4481         std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::end() [211]
                0.00    0.00    4481/4481        std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::end() [210]
-----------------------------------------------
                0.00    0.00    2997/2997        SDLHandler::handleSDLEvents() [56]
[212]    0.0    0.00    0.00    2997         SDLHandler::handleMouseMovement(SDL_MouseMotionEvent const&) [212]
-----------------------------------------------
                0.00    0.00    1056/1056        GameEngine::peonTick(Peon*) [29]
[213]    0.0    0.00    0.00    1056         Peon::direction() const [213]
-----------------------------------------------
                0.00    0.00      28/224         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [262]
                0.00    0.00      84/224         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [232]
                0.00    0.00     112/224         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*) [216]
[214]    0.0    0.00    0.00     224         std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) [214]
-----------------------------------------------
                0.00    0.00      16/112         std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool> std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > >(Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > const&, std::integral_constant<bool, true>, unsigned long) [109]
                0.00    0.00      16/112         std::__detail::_Hash_node<Peon*, false>* std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::operator()<Peon* const&>(Peon* const&) const [283]
                0.00    0.00      16/112         std::__detail::_Hash_node<Peon*, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_node<Peon* const&>(Peon* const&) [300]
                0.00    0.00      16/112         void std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::construct<Peon*, Peon* const&>(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, Peon**, Peon* const&) [295]
                0.00    0.00      16/112         void __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::construct<Peon*, Peon* const&>(Peon**, Peon* const&) [278]
                0.00    0.00      32/112         Peon* const& std::__detail::_Identity::operator()<Peon* const&>(Peon* const&) const [250]
[215]    0.0    0.00    0.00     112         Peon* const& std::forward<Peon* const&>(std::remove_reference<Peon* const&>::type&) [215]
-----------------------------------------------
                0.00    0.00     112/112         FlatHexPosition::toString[abi:cxx11]() const [259]
[216]    0.0    0.00    0.00     112         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*) [216]
                0.00    0.00     112/224         std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) [214]
-----------------------------------------------
                0.00    0.00      13/104         std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::emplace<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [94]
                0.00    0.00      13/104         std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::emplace<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [93]
                0.00    0.00      13/104         std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<FlatHexPosition const&, Tile>(std::integral_constant<bool, true>, FlatHexPosition const&, Tile&&) [92]
                0.00    0.00      13/104         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Scoped_node::_Scoped_node<FlatHexPosition const&, Tile>(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >*, FlatHexPosition const&, Tile&&) [102]
                0.00    0.00      13/104         std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_node<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [107]
                0.00    0.00      13/104         void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::construct<std::pair<FlatHexPosition const, Tile>, FlatHexPosition const&, Tile>(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::pair<FlatHexPosition const, Tile>*, FlatHexPosition const&, Tile&&) [105]
                0.00    0.00      13/104         void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::construct<std::pair<FlatHexPosition const, Tile>, FlatHexPosition const&, Tile>(std::pair<FlatHexPosition const, Tile>*, FlatHexPosition const&, Tile&&) [101]
                0.00    0.00      13/104         std::pair<FlatHexPosition const, Tile>::pair<Tile, true>(FlatHexPosition const&, Tile&&) [106]
[217]    0.0    0.00    0.00     104         Tile&& std::forward<Tile>(std::remove_reference<Tile>::type&) [217]
-----------------------------------------------
                0.00    0.00      14/92          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [326]
                0.00    0.00      14/92          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_buckets(unsigned long) [325]
                0.00    0.00      16/92          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_node(std::__detail::_Hash_node<Peon*, false>*) [301]
                0.00    0.00      16/92          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<Peon*, false>*) [302]
                0.00    0.00      32/92          std::__detail::_Hash_node<Peon*, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_node<Peon* const&>(Peon* const&) [300]
[218]    0.0    0.00    0.00      92         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_node_allocator() [218]
                0.00    0.00      92/92          std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::_M_get() [219]
-----------------------------------------------
                0.00    0.00      92/92          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_node_allocator() [218]
[219]    0.0    0.00    0.00      92         std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::_M_get() [219]
-----------------------------------------------
                0.00    0.00      13/91          std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::emplace<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [94]
                0.00    0.00      13/91          std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::emplace<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [93]
                0.00    0.00      13/91          std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<FlatHexPosition const&, Tile>(std::integral_constant<bool, true>, FlatHexPosition const&, Tile&&) [92]
                0.00    0.00      13/91          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Scoped_node::_Scoped_node<FlatHexPosition const&, Tile>(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >*, FlatHexPosition const&, Tile&&) [102]
                0.00    0.00      13/91          std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_node<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [107]
                0.00    0.00      13/91          void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::construct<std::pair<FlatHexPosition const, Tile>, FlatHexPosition const&, Tile>(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::pair<FlatHexPosition const, Tile>*, FlatHexPosition const&, Tile&&) [105]
                0.00    0.00      13/91          void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::construct<std::pair<FlatHexPosition const, Tile>, FlatHexPosition const&, Tile>(std::pair<FlatHexPosition const, Tile>*, FlatHexPosition const&, Tile&&) [101]
[220]    0.0    0.00    0.00      91         FlatHexPosition const& std::forward<FlatHexPosition const&>(std::remove_reference<FlatHexPosition const&>::type&) [220]
-----------------------------------------------
                0.00    0.00      84/84          std::__cxx11::to_string(float) [228]
[221]    0.0    0.00    0.00      84         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [221]
                0.00    0.00      84/84          std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&) [227]
-----------------------------------------------
                0.00    0.00      84/84          void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [225]
[222]    0.0    0.00    0.00      84         bool __gnu_cxx::__is_null_pointer<char>(char*) [222]
-----------------------------------------------
                0.00    0.00      84/84          std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [232]
[223]    0.0    0.00    0.00      84         std::integral_constant<bool, true>::operator bool() const [223]
-----------------------------------------------
                0.00    0.00      84/84          std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&) [227]
[224]    0.0    0.00    0.00      84         void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*) [224]
                0.00    0.00      84/84          void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type) [226]
-----------------------------------------------
                0.00    0.00      84/84          void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type) [226]
[225]    0.0    0.00    0.00      84         void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [225]
                0.00    0.00      84/84          bool __gnu_cxx::__is_null_pointer<char>(char*) [222]
                0.00    0.00      84/84          std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*) [231]
-----------------------------------------------
                0.00    0.00      84/84          void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*) [224]
[226]    0.0    0.00    0.00      84         void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type) [226]
                0.00    0.00      84/84          void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [225]
-----------------------------------------------
                0.00    0.00      84/84          std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [221]
[227]    0.0    0.00    0.00      84         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&) [227]
                0.00    0.00      84/84          void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*) [224]
-----------------------------------------------
                0.00    0.00      84/84          FlatHexPosition::toString[abi:cxx11]() const [259]
[228]    0.0    0.00    0.00      84         std::__cxx11::to_string(float) [228]
                0.00    0.00      84/84          std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [221]
-----------------------------------------------
                0.00    0.00      84/84          std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*) [231]
[229]    0.0    0.00    0.00      84         std::iterator_traits<char*>::difference_type std::__distance<char*>(char*, char*, std::random_access_iterator_tag) [229]
-----------------------------------------------
                0.00    0.00      84/84          std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*) [231]
[230]    0.0    0.00    0.00      84         std::iterator_traits<char*>::iterator_category std::__iterator_category<char*>(char* const&) [230]
-----------------------------------------------
                0.00    0.00      84/84          void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag) [225]
[231]    0.0    0.00    0.00      84         std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*) [231]
                0.00    0.00      84/84          std::iterator_traits<char*>::iterator_category std::__iterator_category<char*>(char* const&) [230]
                0.00    0.00      84/84          std::iterator_traits<char*>::difference_type std::__distance<char*>(char*, char*, std::random_access_iterator_tag) [229]
-----------------------------------------------
                0.00    0.00      84/84          FlatHexPosition::toString[abi:cxx11]() const [259]
[232]    0.0    0.00    0.00      84         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [232]
                0.00    0.00      84/84          std::integral_constant<bool, true>::operator bool() const [223]
                0.00    0.00      84/224         std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) [214]
-----------------------------------------------
                0.00    0.00      16/58          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node<Peon*, false> const*, unsigned long) const [285]
                0.00    0.00      42/58          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(Peon* const&, unsigned long, unsigned long) const [247]
[233]    0.0    0.00    0.00      58         std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h2() const [233]
                0.00    0.00      58/260707      std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true>::_M_cget() const [165]
-----------------------------------------------
                0.00    0.00      13/58          std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_node<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [107]
                0.00    0.00      13/58          void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::construct<std::pair<FlatHexPosition const, Tile>, FlatHexPosition const&, Tile>(std::pair<FlatHexPosition const, Tile>*, FlatHexPosition const&, Tile&&) [101]
                0.00    0.00      16/58          std::__detail::_Hash_node<Peon*, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_node<Peon* const&>(Peon* const&) [300]
                0.00    0.00      16/58          void __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::construct<Peon*, Peon* const&>(Peon**, Peon* const&) [278]
[234]    0.0    0.00    0.00      58         operator new(unsigned long, void*) [234]
-----------------------------------------------
                0.00    0.00      13/54          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_uses_single_bucket() const [334]
                0.00    0.00      41/54          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [248]
[235]    0.0    0.00    0.00      54         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const [235]
-----------------------------------------------
                0.00    0.00       1/54          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [425]
                0.00    0.00       1/54          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_buckets(unsigned long) [424]
                0.00    0.00      13/54          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [123]
                0.00    0.00      13/54          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [348]
                0.00    0.00      26/54          std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_node<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [107]
[236]    0.0    0.00    0.00      54         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_node_allocator() [236]
                0.00    0.00      54/54          std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >, true>::_M_get() [237]
-----------------------------------------------
                0.00    0.00      54/54          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_node_allocator() [236]
[237]    0.0    0.00    0.00      54         std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >, true>::_M_get() [237]
-----------------------------------------------
                0.00    0.00       1/45          main [1]
                0.00    0.00       9/45          Camera::doUpdateLRScroll(float) [135]
                0.00    0.00      35/45          Camera::doUpdateUDScroll(float) [113]
[238]    0.0    0.00    0.00      45         HexViewport::target(FlatHexPosition const&) [238]
-----------------------------------------------
                0.00    0.00       9/44          Camera::doUpdateLRScroll(float) [135]
                0.00    0.00      35/44          Camera::doUpdateUDScroll(float) [113]
[239]    0.0    0.00    0.00      44         HexViewport::target() const [239]
-----------------------------------------------
                0.00    0.00      16/44          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node<Peon*, false> const*, unsigned long) const [285]
                0.00    0.00      28/44          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(Peon* const&) const [260]
[240]    0.0    0.00    0.00      44         std::hash<Peon*>::operator()(Peon*) const [240]
-----------------------------------------------
                0.00    0.00      12/44          std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_M_equals(Peon* const&, unsigned long, std::__detail::_Hash_node<Peon*, false>*) const [130]
                0.00    0.00      16/44          std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool> std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > >(Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > const&, std::integral_constant<bool, true>, unsigned long) [109]
                0.00    0.00      16/44          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node<Peon*, false> const*, unsigned long) const [285]
[241]    0.0    0.00    0.00      44         std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_extract() const [241]
                0.00    0.00      44/44          std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Identity, true>::_M_cget() const [243]
-----------------------------------------------
                0.00    0.00      16/44          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node<Peon*, false> const*, unsigned long) const [285]
                0.00    0.00      28/44          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(Peon* const&) const [260]
[242]    0.0    0.00    0.00      44         std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h1() const [242]
                0.00    0.00      44/44          std::__detail::_Hashtable_ebo_helper<1, std::hash<Peon*>, true>::_M_cget() const [244]
-----------------------------------------------
                0.00    0.00      44/44          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_extract() const [241]
[243]    0.0    0.00    0.00      44         std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Identity, true>::_M_cget() const [243]
-----------------------------------------------
                0.00    0.00      44/44          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h1() const [242]
[244]    0.0    0.00    0.00      44         std::__detail::_Hashtable_ebo_helper<1, std::hash<Peon*>, true>::_M_cget() const [244]
-----------------------------------------------
                0.00    0.00       1/44          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Hashtable() [422]
                0.00    0.00      13/44          std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_Hash_node_value_base() [350]
                0.00    0.00      14/44          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable() [323]
                0.00    0.00      16/44          std::__detail::_Hash_node_value_base<Peon*>::_Hash_node_value_base() [303]
[245]    0.0    0.00    0.00      44         std::__detail::_Hash_node_base::_Hash_node_base() [245]
-----------------------------------------------
                0.00    0.00      12/42          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(std::integral_constant<bool, true>, Peon* const&) [138]
                0.00    0.00      14/42          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(Peon* const&, unsigned long, unsigned long, std::__detail::_Hash_node<Peon*, false>*, unsigned long) [115]
                0.00    0.00      16/42          std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool> std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > >(Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > const&, std::integral_constant<bool, true>, unsigned long) [109]
[246]    0.0    0.00    0.00      42         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_bucket_index(Peon* const&, unsigned long) const [246]
                0.00    0.00      42/42          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(Peon* const&, unsigned long, unsigned long) const [247]
-----------------------------------------------
                0.00    0.00      42/42          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_bucket_index(Peon* const&, unsigned long) const [246]
[247]    0.0    0.00    0.00      42         std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(Peon* const&, unsigned long, unsigned long) const [247]
                0.00    0.00      42/58          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h2() const [233]
                0.00    0.00      42/260707      std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const [164]
-----------------------------------------------
                0.00    0.00      41/41          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets() [249]
[248]    0.0    0.00    0.00      41         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [248]
                0.00    0.00      41/54          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const [235]
                0.00    0.00      14/14          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [326]
-----------------------------------------------
                0.00    0.00      14/41          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) [116]
                0.00    0.00      27/41          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::~_Hashtable() [97]
[249]    0.0    0.00    0.00      41         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets() [249]
                0.00    0.00      41/41          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [248]
-----------------------------------------------
                0.00    0.00      16/32          std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool> std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > >(Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > const&, std::integral_constant<bool, true>, unsigned long) [109]
                0.00    0.00      16/32          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node<Peon*, false> const*, unsigned long) const [285]
[250]    0.0    0.00    0.00      32         Peon* const& std::__detail::_Identity::operator()<Peon* const&>(Peon* const&) const [250]
                0.00    0.00      32/112         Peon* const& std::forward<Peon* const&>(std::remove_reference<Peon* const&>::type&) [215]
-----------------------------------------------
                0.00    0.00      31/31          std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&) [252]
[251]    0.0    0.00    0.00      31         std::_Head_base<0ul, SpriteSheet*, false>::_M_head(std::_Head_base<0ul, SpriteSheet*, false>&) [251]
-----------------------------------------------
                0.00    0.00       9/31          std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&&) [66]
                0.00    0.00      22/31          SpriteSheet*& std::__get_helper<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&) [269]
[252]    0.0    0.00    0.00      31         std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&) [252]
                0.00    0.00      31/31          std::_Head_base<0ul, SpriteSheet*, false>::_M_head(std::_Head_base<0ul, SpriteSheet*, false>&) [251]
-----------------------------------------------
                0.00    0.00       2/30          std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > const&) [388]
                0.00    0.00      28/30          std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<Peon*, false> >(std::allocator<std::__detail::_Hash_node<Peon*, false> > const&) [261]
[253]    0.0    0.00    0.00      30         __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::new_allocator() [253]
-----------------------------------------------
                0.00    0.00      30/30          std::allocator<std::__detail::_Hash_node_base*>::~allocator() [255]
[254]    0.0    0.00    0.00      30         __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::~new_allocator() [254]
-----------------------------------------------
                0.00    0.00       1/30          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [425]
                0.00    0.00       1/30          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_buckets(unsigned long) [424]
                0.00    0.00      14/30          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [326]
                0.00    0.00      14/30          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_buckets(unsigned long) [325]
[255]    0.0    0.00    0.00      30         std::allocator<std::__detail::_Hash_node_base*>::~allocator() [255]
                0.00    0.00      30/30          __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::~new_allocator() [254]
-----------------------------------------------
                0.00    0.00      13/29          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(FlatHexPosition const&, unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [149]
                0.00    0.00      16/29          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(Peon* const&, unsigned long, unsigned long, std::__detail::_Hash_node<Peon*, false>*, unsigned long) [115]
[256]    0.0    0.00    0.00      29         std::__detail::_Prime_rehash_policy::_M_state() const [256]
-----------------------------------------------
                0.00    0.00      13/29          std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool>::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&, bool, true>(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&, bool&&) [344]
                0.00    0.00      16/29          std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool>::pair<std::__detail::_Node_iterator<Peon*, true, false>&, bool, true>(std::__detail::_Node_iterator<Peon*, true, false>&, bool&&) [296]
[257]    0.0    0.00    0.00      29         bool&& std::forward<bool>(std::remove_reference<bool>::type&) [257]
-----------------------------------------------
                0.00    0.00      28/28          FlatHexPosition::toString[abi:cxx11]() const [259]
[258]    0.0    0.00    0.00      28         FlatHexPosition::systemString[abi:cxx11](FlatHexPosition::System) [258]
-----------------------------------------------
                0.00    0.00      28/28          HexViewport::rotation(Matrix22 const&) [134]
[259]    0.0    0.00    0.00      28         FlatHexPosition::toString[abi:cxx11]() const [259]
                0.00    0.00     112/112         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*) [216]
                0.00    0.00      84/84          std::__cxx11::to_string(float) [228]
                0.00    0.00      84/84          std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [232]
                0.00    0.00      28/28          FlatHexPosition::systemString[abi:cxx11](FlatHexPosition::System) [258]
                0.00    0.00      28/28          std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [262]
-----------------------------------------------
                0.00    0.00      12/28          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(std::integral_constant<bool, true>, Peon* const&) [138]
                0.00    0.00      16/28          std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool> std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > >(Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > const&, std::integral_constant<bool, true>, unsigned long) [109]
[260]    0.0    0.00    0.00      28         std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(Peon* const&) const [260]
                0.00    0.00      28/44          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h1() const [242]
                0.00    0.00      28/44          std::hash<Peon*>::operator()(Peon*) const [240]
-----------------------------------------------
                0.00    0.00      14/28          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [326]
                0.00    0.00      14/28          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_buckets(unsigned long) [325]
[261]    0.0    0.00    0.00      28         std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<Peon*, false> >(std::allocator<std::__detail::_Hash_node<Peon*, false> > const&) [261]
                0.00    0.00      28/30          __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::new_allocator() [253]
-----------------------------------------------
                0.00    0.00      28/28          FlatHexPosition::toString[abi:cxx11]() const [259]
[262]    0.0    0.00    0.00      28         std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) [262]
                0.00    0.00      28/224         std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) [214]
-----------------------------------------------
                0.00    0.00      27/27          std::allocator<std::__detail::_Hash_node<Peon*, false> >::~allocator() [264]
[263]    0.0    0.00    0.00      27         __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::~new_allocator() [263]
-----------------------------------------------
                0.00    0.00      27/27          std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::~_Hashtable_ebo_helper() [267]
[264]    0.0    0.00    0.00      27         std::allocator<std::__detail::_Hash_node<Peon*, false> >::~allocator() [264]
                0.00    0.00      27/27          __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::~new_allocator() [263]
-----------------------------------------------
                0.00    0.00      27/27          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::clear() [96]
[265]    0.0    0.00    0.00      27         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<Peon*, false>*) [265]
                0.00    0.00       4/17960       std::__detail::_Hash_node<Peon*, false>::_M_next() const [184]
                0.00    0.00       4/16          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_node(std::__detail::_Hash_node<Peon*, false>*) [301]
-----------------------------------------------
                0.00    0.00      27/27          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::~_Hashtable() [97]
[266]    0.0    0.00    0.00      27         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::~_Hashtable_alloc() [266]
                0.00    0.00      27/27          std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::~_Hashtable_ebo_helper() [267]
-----------------------------------------------
                0.00    0.00      27/27          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::~_Hashtable_alloc() [266]
[267]    0.0    0.00    0.00      27         std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::~_Hashtable_ebo_helper() [267]
                0.00    0.00      27/27          std::allocator<std::__detail::_Hash_node<Peon*, false> >::~allocator() [264]
-----------------------------------------------
                0.00    0.00       2/22          std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::__uniq_ptr_impl(SpriteSheet*) [397]
                0.00    0.00       9/22          std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::__uniq_ptr_impl(std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >&&) [69]
                0.00    0.00      11/22          std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::~unique_ptr() [38]
[268]    0.0    0.00    0.00      22         std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_ptr() [268]
                0.00    0.00      22/22          std::tuple_element<0ul, std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > >::type& std::get<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&) [270]
-----------------------------------------------
                0.00    0.00      22/22          std::tuple_element<0ul, std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > >::type& std::get<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&) [270]
[269]    0.0    0.00    0.00      22         SpriteSheet*& std::__get_helper<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&) [269]
                0.00    0.00      22/31          std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&) [252]
-----------------------------------------------
                0.00    0.00      22/22          std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_ptr() [268]
[270]    0.0    0.00    0.00      22         std::tuple_element<0ul, std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > >::type& std::get<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&) [270]
                0.00    0.00      22/22          SpriteSheet*& std::__get_helper<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&) [269]
-----------------------------------------------
                0.00    0.00      19/19          SDLHandler::handleSDLEvents() [56]
[271]    0.0    0.00    0.00      19         SDLHandler::handleKeyUp(SDL_KeyboardEvent const&) [271]
                0.00    0.00       3/3           AbstractCamera::stopUDScroll() [382]
                0.00    0.00       1/1           AbstractCamera::stopLRScroll() [406]
-----------------------------------------------
                0.00    0.00       9/18          std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&&) [66]
                0.00    0.00       9/18          std::_Head_base<0ul, SpriteSheet*, false>::_Head_base<SpriteSheet*>(SpriteSheet*&&) [371]
[272]    0.0    0.00    0.00      18         SpriteSheet*&& std::forward<SpriteSheet*>(std::remove_reference<SpriteSheet*>::type&) [272]
-----------------------------------------------
                0.00    0.00       9/18          std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&&) [67]
                0.00    0.00       9/18          std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>::_Head_base<std::default_delete<SpriteSheet> >(std::default_delete<SpriteSheet>&&) [372]
[273]    0.0    0.00    0.00      18         std::default_delete<SpriteSheet>&& std::forward<std::default_delete<SpriteSheet> >(std::remove_reference<std::default_delete<SpriteSheet> >::type&) [273]
-----------------------------------------------
                0.00    0.00       1/17          HexViewport::HexViewport(int, int, int, int) [151]
                0.00    0.00       2/17          __static_initialization_and_destruction_0(int, int) [83]
                0.00    0.00      14/17          Matrix22::operator*(Matrix22 const&) const [320]
[274]    0.0    0.00    0.00      17         Matrix22::Matrix22(float, float, float, float) [274]
-----------------------------------------------
                0.00    0.00      16/16          std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::deallocate(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, std::__detail::_Hash_node<Peon*, false>*, unsigned long) [292]
[275]    0.0    0.00    0.00      16         __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::deallocate(std::__detail::_Hash_node<Peon*, false>*, unsigned long) [275]
-----------------------------------------------
                0.00    0.00      16/16          void std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::destroy<Peon*>(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, Peon**) [293]
[276]    0.0    0.00    0.00      16         void __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::destroy<Peon*>(Peon**) [276]
-----------------------------------------------
                0.00    0.00      16/16          std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::allocate(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, unsigned long) [294]
[277]    0.0    0.00    0.00      16         __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::allocate(unsigned long, void const*) [277]
                0.00    0.00      16/16          __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::_M_max_size() const [279]
-----------------------------------------------
                0.00    0.00      16/16          void std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::construct<Peon*, Peon* const&>(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, Peon**, Peon* const&) [295]
[278]    0.0    0.00    0.00      16         void __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::construct<Peon*, Peon* const&>(Peon**, Peon* const&) [278]
                0.00    0.00      16/112         Peon* const& std::forward<Peon* const&>(std::remove_reference<Peon* const&>::type&) [215]
                0.00    0.00      16/58          operator new(unsigned long, void*) [234]
-----------------------------------------------
                0.00    0.00      16/16          __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::allocate(unsigned long, void const*) [277]
[279]    0.0    0.00    0.00      16         __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::_M_max_size() const [279]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Hash_node_value_base<Peon*>::_M_valptr() const [287]
[280]    0.0    0.00    0.00      16         __gnu_cxx::__aligned_buffer<Peon*>::_M_ptr() const [280]
                0.00    0.00      16/16          __gnu_cxx::__aligned_buffer<Peon*>::_M_addr() const [281]
-----------------------------------------------
                0.00    0.00      16/16          __gnu_cxx::__aligned_buffer<Peon*>::_M_ptr() const [280]
[281]    0.0    0.00    0.00      16         __gnu_cxx::__aligned_buffer<Peon*>::_M_addr() const [281]
-----------------------------------------------
                0.00    0.00       1/16          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<Peon*, false>*) [365]
                0.00    0.00       2/16          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<Peon*, false>*) [290]
                0.00    0.00      13/16          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable(std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >&&) [103]
[282]    0.0    0.00    0.00      16         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_bucket_index(std::__detail::_Hash_node<Peon*, false>*) const [282]
                0.00    0.00      16/16          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node<Peon*, false> const*, unsigned long) const [285]
-----------------------------------------------
                0.00    0.00      16/16          std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool> std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > >(Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > const&, std::integral_constant<bool, true>, unsigned long) [109]
[283]    0.0    0.00    0.00      16         std::__detail::_Hash_node<Peon*, false>* std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::operator()<Peon* const&>(Peon* const&) const [283]
                0.00    0.00      16/16          std::__detail::_Hash_node<Peon*, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_node<Peon* const&>(Peon* const&) [300]
                0.00    0.00      16/112         Peon* const& std::forward<Peon* const&>(std::remove_reference<Peon* const&>::type&) [215]
-----------------------------------------------
                0.00    0.00      16/16          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(Peon* const&, unsigned long, unsigned long, std::__detail::_Hash_node<Peon*, false>*, unsigned long) [115]
[284]    0.0    0.00    0.00      16         std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_store_code(std::__detail::_Hash_node<Peon*, false>*, unsigned long) const [284]
-----------------------------------------------
                0.00    0.00      16/16          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_bucket_index(std::__detail::_Hash_node<Peon*, false>*) const [282]
[285]    0.0    0.00    0.00      16         std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node<Peon*, false> const*, unsigned long) const [285]
                0.00    0.00      16/58          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h2() const [233]
                0.00    0.00      16/44          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h1() const [242]
                0.00    0.00      16/44          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_extract() const [241]
                0.00    0.00      16/16          std::__detail::_Hash_node_value_base<Peon*>::_M_v() const [286]
                0.00    0.00      16/44          std::hash<Peon*>::operator()(Peon*) const [240]
                0.00    0.00      16/32          Peon* const& std::__detail::_Identity::operator()<Peon* const&>(Peon* const&) const [250]
                0.00    0.00      16/260707      std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const [164]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node<Peon*, false> const*, unsigned long) const [285]
[286]    0.0    0.00    0.00      16         std::__detail::_Hash_node_value_base<Peon*>::_M_v() const [286]
                0.00    0.00      16/16          std::__detail::_Hash_node_value_base<Peon*>::_M_valptr() const [287]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Hash_node_value_base<Peon*>::_M_v() const [286]
[287]    0.0    0.00    0.00      16         std::__detail::_Hash_node_value_base<Peon*>::_M_valptr() const [287]
                0.00    0.00      16/16          __gnu_cxx::__aligned_buffer<Peon*>::_M_ptr() const [280]
-----------------------------------------------
                0.00    0.00      16/16          std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool> std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > >(Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > const&, std::integral_constant<bool, true>, unsigned long) [109]
[288]    0.0    0.00    0.00      16         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Scoped_node::_Scoped_node(std::__detail::_Hash_node<Peon*, false>*, std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >*) [288]
-----------------------------------------------
                0.00    0.00      16/16          std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool> std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > >(Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > const&, std::integral_constant<bool, true>, unsigned long) [109]
[289]    0.0    0.00    0.00      16         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Scoped_node::~_Scoped_node() [289]
-----------------------------------------------
                0.00    0.00      16/16          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(Peon* const&, unsigned long, unsigned long, std::__detail::_Hash_node<Peon*, false>*, unsigned long) [115]
[290]    0.0    0.00    0.00      16         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<Peon*, false>*) [290]
                0.00    0.00       2/17960       std::__detail::_Hash_node<Peon*, false>::_M_next() const [184]
                0.00    0.00       2/16          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_bucket_index(std::__detail::_Hash_node<Peon*, false>*) const [282]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<Peon*, false>*) [302]
[291]    0.0    0.00    0.00      16         std::pointer_traits<std::__detail::_Hash_node<Peon*, false>*>::pointer_to(std::__detail::_Hash_node<Peon*, false>&) [291]
                0.00    0.00      16/16          std::__detail::_Hash_node<Peon*, false>* std::addressof<std::__detail::_Hash_node<Peon*, false> >(std::__detail::_Hash_node<Peon*, false>&) [307]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<Peon*, false>*) [302]
[292]    0.0    0.00    0.00      16         std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::deallocate(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, std::__detail::_Hash_node<Peon*, false>*, unsigned long) [292]
                0.00    0.00      16/16          __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::deallocate(std::__detail::_Hash_node<Peon*, false>*, unsigned long) [275]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_node(std::__detail::_Hash_node<Peon*, false>*) [301]
[293]    0.0    0.00    0.00      16         void std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::destroy<Peon*>(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, Peon**) [293]
                0.00    0.00      16/16          void __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::destroy<Peon*>(Peon**) [276]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Hash_node<Peon*, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_node<Peon* const&>(Peon* const&) [300]
[294]    0.0    0.00    0.00      16         std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::allocate(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, unsigned long) [294]
                0.00    0.00      16/16          __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::allocate(unsigned long, void const*) [277]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Hash_node<Peon*, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_node<Peon* const&>(Peon* const&) [300]
[295]    0.0    0.00    0.00      16         void std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::construct<Peon*, Peon* const&>(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, Peon**, Peon* const&) [295]
                0.00    0.00      16/112         Peon* const& std::forward<Peon* const&>(std::remove_reference<Peon* const&>::type&) [215]
                0.00    0.00      16/16          void __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::construct<Peon*, Peon* const&>(Peon**, Peon* const&) [278]
-----------------------------------------------
                0.00    0.00      16/16          std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool> std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > >(Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > const&, std::integral_constant<bool, true>, unsigned long) [109]
[296]    0.0    0.00    0.00      16         std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool>::pair<std::__detail::_Node_iterator<Peon*, true, false>&, bool, true>(std::__detail::_Node_iterator<Peon*, true, false>&, bool&&) [296]
                0.00    0.00      16/16          std::__detail::_Node_iterator<Peon*, true, false>& std::forward<std::__detail::_Node_iterator<Peon*, true, false>&>(std::remove_reference<std::__detail::_Node_iterator<Peon*, true, false>&>::type&) [306]
                0.00    0.00      16/29          bool&& std::forward<bool>(std::remove_reference<bool>::type&) [257]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Insert_base<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::insert(Peon* const&) [111]
[297]    0.0    0.00    0.00      16         std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_AllocNode(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&) [297]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Hash_node<Peon*, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_node<Peon* const&>(Peon* const&) [300]
[298]    0.0    0.00    0.00      16         std::__detail::_Hash_node<Peon*, false>::_Hash_node() [298]
                0.00    0.00      16/16          std::__detail::_Hash_node_value_base<Peon*>::_Hash_node_value_base() [303]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Insert_base<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::insert(Peon* const&) [111]
[299]    0.0    0.00    0.00      16         std::__detail::_Insert_base<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_conjure_hashtable() [299]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Hash_node<Peon*, false>* std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::operator()<Peon* const&>(Peon* const&) const [283]
[300]    0.0    0.00    0.00      16         std::__detail::_Hash_node<Peon*, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_node<Peon* const&>(Peon* const&) [300]
                0.00    0.00      32/92          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_node_allocator() [218]
                0.00    0.00      16/16          std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::allocate(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, unsigned long) [294]
                0.00    0.00      16/16          std::__detail::_Hash_node<Peon*, false>* std::__to_address<std::__detail::_Hash_node<Peon*, false> >(std::__detail::_Hash_node<Peon*, false>*) [305]
                0.00    0.00      16/58          operator new(unsigned long, void*) [234]
                0.00    0.00      16/16          std::__detail::_Hash_node<Peon*, false>::_Hash_node() [298]
                0.00    0.00      16/112         Peon* const& std::forward<Peon* const&>(std::remove_reference<Peon* const&>::type&) [215]
                0.00    0.00      16/17973       std::__detail::_Hash_node_value_base<Peon*>::_M_valptr() [183]
                0.00    0.00      16/16          void std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::construct<Peon*, Peon* const&>(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, Peon**, Peon* const&) [295]
-----------------------------------------------
                0.00    0.00       4/16          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<Peon*, false>*) [265]
                0.00    0.00      12/16          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<Peon*, false>*) [365]
[301]    0.0    0.00    0.00      16         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_node(std::__detail::_Hash_node<Peon*, false>*) [301]
                0.00    0.00      16/17973       std::__detail::_Hash_node_value_base<Peon*>::_M_valptr() [183]
                0.00    0.00      16/92          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_node_allocator() [218]
                0.00    0.00      16/16          void std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::destroy<Peon*>(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, Peon**) [293]
                0.00    0.00      16/16          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<Peon*, false>*) [302]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_node(std::__detail::_Hash_node<Peon*, false>*) [301]
[302]    0.0    0.00    0.00      16         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<Peon*, false>*) [302]
                0.00    0.00      16/16          std::pointer_traits<std::__detail::_Hash_node<Peon*, false>*>::pointer_to(std::__detail::_Hash_node<Peon*, false>&) [291]
                0.00    0.00      16/92          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_node_allocator() [218]
                0.00    0.00      16/16          std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::deallocate(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, std::__detail::_Hash_node<Peon*, false>*, unsigned long) [292]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Hash_node<Peon*, false>::_Hash_node() [298]
[303]    0.0    0.00    0.00      16         std::__detail::_Hash_node_value_base<Peon*>::_Hash_node_value_base() [303]
                0.00    0.00      16/44          std::__detail::_Hash_node_base::_Hash_node_base() [245]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Hash_node<Peon*, false>* std::addressof<std::__detail::_Hash_node<Peon*, false> >(std::__detail::_Hash_node<Peon*, false>&) [307]
[304]    0.0    0.00    0.00      16         std::__detail::_Hash_node<Peon*, false>* std::__addressof<std::__detail::_Hash_node<Peon*, false> >(std::__detail::_Hash_node<Peon*, false>&) [304]
-----------------------------------------------
                0.00    0.00      16/16          std::__detail::_Hash_node<Peon*, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_node<Peon* const&>(Peon* const&) [300]
[305]    0.0    0.00    0.00      16         std::__detail::_Hash_node<Peon*, false>* std::__to_address<std::__detail::_Hash_node<Peon*, false> >(std::__detail::_Hash_node<Peon*, false>*) [305]
-----------------------------------------------
                0.00    0.00      16/16          std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool>::pair<std::__detail::_Node_iterator<Peon*, true, false>&, bool, true>(std::__detail::_Node_iterator<Peon*, true, false>&, bool&&) [296]
[306]    0.0    0.00    0.00      16         std::__detail::_Node_iterator<Peon*, true, false>& std::forward<std::__detail::_Node_iterator<Peon*, true, false>&>(std::remove_reference<std::__detail::_Node_iterator<Peon*, true, false>&>::type&) [306]
-----------------------------------------------
                0.00    0.00      16/16          std::pointer_traits<std::__detail::_Hash_node<Peon*, false>*>::pointer_to(std::__detail::_Hash_node<Peon*, false>&) [291]
[307]    0.0    0.00    0.00      16         std::__detail::_Hash_node<Peon*, false>* std::addressof<std::__detail::_Hash_node<Peon*, false> >(std::__detail::_Hash_node<Peon*, false>&) [307]
                0.00    0.00      16/16          std::__detail::_Hash_node<Peon*, false>* std::__addressof<std::__detail::_Hash_node<Peon*, false> >(std::__detail::_Hash_node<Peon*, false>&) [304]
-----------------------------------------------
                0.00    0.00      15/15          std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::deallocate(std::allocator<std::__detail::_Hash_node_base*>&, std::__detail::_Hash_node_base**, unsigned long) [312]
[308]    0.0    0.00    0.00      15         __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::deallocate(std::__detail::_Hash_node_base**, unsigned long) [308]
-----------------------------------------------
                0.00    0.00      15/15          std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::allocate(std::allocator<std::__detail::_Hash_node_base*>&, unsigned long) [313]
[309]    0.0    0.00    0.00      15         __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::allocate(unsigned long, void const*) [309]
                0.00    0.00      15/15          __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::_M_max_size() const [310]
-----------------------------------------------
                0.00    0.00      15/15          __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::allocate(unsigned long, void const*) [309]
[310]    0.0    0.00    0.00      15         __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::_M_max_size() const [310]
-----------------------------------------------
                0.00    0.00       1/15          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [425]
                0.00    0.00      14/15          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [326]
[311]    0.0    0.00    0.00      15         std::pointer_traits<std::__detail::_Hash_node_base**>::pointer_to(std::__detail::_Hash_node_base*&) [311]
                0.00    0.00      15/15          std::__detail::_Hash_node_base** std::addressof<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base*&) [317]
-----------------------------------------------
                0.00    0.00       1/15          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [425]
                0.00    0.00      14/15          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [326]
[312]    0.0    0.00    0.00      15         std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::deallocate(std::allocator<std::__detail::_Hash_node_base*>&, std::__detail::_Hash_node_base**, unsigned long) [312]
                0.00    0.00      15/15          __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::deallocate(std::__detail::_Hash_node_base**, unsigned long) [308]
-----------------------------------------------
                0.00    0.00       1/15          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_buckets(unsigned long) [424]
                0.00    0.00      14/15          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_buckets(unsigned long) [325]
[313]    0.0    0.00    0.00      15         std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::allocate(std::allocator<std::__detail::_Hash_node_base*>&, unsigned long) [313]
                0.00    0.00      15/15          __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::allocate(unsigned long, void const*) [309]
-----------------------------------------------
                0.00    0.00       1/15          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Hashtable() [422]
                0.00    0.00      14/15          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable() [323]
[314]    0.0    0.00    0.00      15         std::__detail::_Prime_rehash_policy::_Prime_rehash_policy(float) [314]
-----------------------------------------------
                0.00    0.00      15/15          std::__detail::_Hash_node_base** std::addressof<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base*&) [317]
[315]    0.0    0.00    0.00      15         std::__detail::_Hash_node_base** std::__addressof<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base*&) [315]
-----------------------------------------------
                0.00    0.00       1/15          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_buckets(unsigned long) [424]
                0.00    0.00      14/15          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_buckets(unsigned long) [325]
[316]    0.0    0.00    0.00      15         std::__detail::_Hash_node_base** std::__to_address<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base**) [316]
-----------------------------------------------
                0.00    0.00      15/15          std::pointer_traits<std::__detail::_Hash_node_base**>::pointer_to(std::__detail::_Hash_node_base*&) [311]
[317]    0.0    0.00    0.00      15         std::__detail::_Hash_node_base** std::addressof<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base*&) [317]
                0.00    0.00      15/15          std::__detail::_Hash_node_base** std::__addressof<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base*&) [315]
-----------------------------------------------
                0.00    0.00      14/14          std::allocator<std::__detail::_Hash_node<Peon*, false> >::allocator() [321]
[318]    0.0    0.00    0.00      14         __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::new_allocator() [318]
-----------------------------------------------
                0.00    0.00       4/14          Camera::doRotateRight() [141]
                0.00    0.00      10/14          Camera::doRotateLeft() [132]
[319]    0.0    0.00    0.00      14         HexViewport::rotation() const [319]
-----------------------------------------------
                0.00    0.00       4/14          Camera::doRotateRight() [141]
                0.00    0.00      10/14          Camera::doRotateLeft() [132]
[320]    0.0    0.00    0.00      14         Matrix22::operator*(Matrix22 const&) const [320]
                0.00    0.00      14/17          Matrix22::Matrix22(float, float, float, float) [274]
-----------------------------------------------
                0.00    0.00      14/14          std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::_Hashtable_ebo_helper() [328]
[321]    0.0    0.00    0.00      14         std::allocator<std::__detail::_Hash_node<Peon*, false> >::allocator() [321]
                0.00    0.00      14/14          __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::new_allocator() [318]
-----------------------------------------------
                0.00    0.00      14/14          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) [116]
[322]    0.0    0.00    0.00      14         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_allocate_buckets(unsigned long) [322]
                0.00    0.00      14/14          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_buckets(unsigned long) [325]
-----------------------------------------------
                0.00    0.00      14/14          std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::unordered_set() [324]
[323]    0.0    0.00    0.00      14         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable() [323]
                0.00    0.00      14/14          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_Hashtable_alloc() [327]
                0.00    0.00      14/44          std::__detail::_Hash_node_base::_Hash_node_base() [245]
                0.00    0.00      14/15          std::__detail::_Prime_rehash_policy::_Prime_rehash_policy(float) [314]
-----------------------------------------------
                0.00    0.00       1/14          GameEngine::GameEngine(World*) [403]
                0.00    0.00      13/14          Tile::Tile(FlatHexPosition, Peon*) [114]
[324]    0.0    0.00    0.00      14         std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::unordered_set() [324]
                0.00    0.00      14/14          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable() [323]
-----------------------------------------------
                0.00    0.00      14/14          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_allocate_buckets(unsigned long) [322]
[325]    0.0    0.00    0.00      14         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_buckets(unsigned long) [325]
                0.00    0.00      14/92          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_node_allocator() [218]
                0.00    0.00      14/28          std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<Peon*, false> >(std::allocator<std::__detail::_Hash_node<Peon*, false> > const&) [261]
                0.00    0.00      14/15          std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::allocate(std::allocator<std::__detail::_Hash_node_base*>&, unsigned long) [313]
                0.00    0.00      14/15          std::__detail::_Hash_node_base** std::__to_address<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base**) [316]
                0.00    0.00      14/30          std::allocator<std::__detail::_Hash_node_base*>::~allocator() [255]
-----------------------------------------------
                0.00    0.00      14/14          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [248]
[326]    0.0    0.00    0.00      14         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [326]
                0.00    0.00      14/15          std::pointer_traits<std::__detail::_Hash_node_base**>::pointer_to(std::__detail::_Hash_node_base*&) [311]
                0.00    0.00      14/92          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_node_allocator() [218]
                0.00    0.00      14/28          std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<Peon*, false> >(std::allocator<std::__detail::_Hash_node<Peon*, false> > const&) [261]
                0.00    0.00      14/15          std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::deallocate(std::allocator<std::__detail::_Hash_node_base*>&, std::__detail::_Hash_node_base**, unsigned long) [312]
                0.00    0.00      14/30          std::allocator<std::__detail::_Hash_node_base*>::~allocator() [255]
-----------------------------------------------
                0.00    0.00      14/14          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable() [323]
[327]    0.0    0.00    0.00      14         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_Hashtable_alloc() [327]
                0.00    0.00      14/14          std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::_Hashtable_ebo_helper() [328]
-----------------------------------------------
                0.00    0.00      14/14          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_Hashtable_alloc() [327]
[328]    0.0    0.00    0.00      14         std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::_Hashtable_ebo_helper() [328]
                0.00    0.00      14/14          std::allocator<std::__detail::_Hash_node<Peon*, false> >::allocator() [321]
-----------------------------------------------
                0.00    0.00      14/14          World::addObject(Peon*) [91]
[329]    0.0    0.00    0.00      14         bool std::__detail::operator==<std::pair<FlatHexPosition const, Tile>, true>(std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&, std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&) [329]
-----------------------------------------------
                0.00    0.00      13/13          std::allocator<std::__detail::_Hash_node<Peon*, false> >::allocator(std::allocator<std::__detail::_Hash_node<Peon*, false> > const&) [336]
[330]    0.0    0.00    0.00      13         __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::new_allocator(__gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> > const&) [330]
-----------------------------------------------
                0.00    0.00      13/13          std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::deallocate(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [342]
[331]    0.0    0.00    0.00      13         __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::deallocate(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [331]
-----------------------------------------------
                0.00    0.00      13/13          std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::allocate(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, unsigned long) [343]
[332]    0.0    0.00    0.00      13         __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::allocate(unsigned long, void const*) [332]
                0.00    0.00      13/13          __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::_M_max_size() const [333]
-----------------------------------------------
                0.00    0.00      13/13          __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::allocate(unsigned long, void const*) [332]
[333]    0.0    0.00    0.00      13         __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::_M_max_size() const [333]
-----------------------------------------------
                0.00    0.00      13/13          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable(std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >&&) [103]
[334]    0.0    0.00    0.00      13         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_uses_single_bucket() const [334]
                0.00    0.00      13/54          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const [235]
-----------------------------------------------
                0.00    0.00      13/13          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(FlatHexPosition const&, unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [149]
[335]    0.0    0.00    0.00      13         std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_store_code(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) const [335]
-----------------------------------------------
                0.00    0.00      13/13          std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::_Hashtable_ebo_helper(std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>&&) [351]
[336]    0.0    0.00    0.00      13         std::allocator<std::__detail::_Hash_node<Peon*, false> >::allocator(std::allocator<std::__detail::_Hash_node<Peon*, false> > const&) [336]
                0.00    0.00      13/13          __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::new_allocator(__gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> > const&) [330]
-----------------------------------------------
                0.00    0.00      13/13          std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<FlatHexPosition const&, Tile>(std::integral_constant<bool, true>, FlatHexPosition const&, Tile&&) [92]
[337]    0.0    0.00    0.00      13         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Scoped_node::~_Scoped_node() [337]
-----------------------------------------------
                0.00    0.00      13/13          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(FlatHexPosition const&, unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [149]
[338]    0.0    0.00    0.00      13         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [338]
                0.00    0.00      12/12916       std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>::_M_next() const [197]
                0.00    0.00      12/12903       std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const [198]
-----------------------------------------------
                0.00    0.00      13/13          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable(std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >&&) [103]
[339]    0.0    0.00    0.00      13         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_base_alloc() [339]
-----------------------------------------------
                0.00    0.00      13/13          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable(std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >&&) [103]
[340]    0.0    0.00    0.00      13         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_reset() [340]
                0.00    0.00      13/13          std::__detail::_Prime_rehash_policy::_M_reset() [349]
-----------------------------------------------
                0.00    0.00      13/13          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [348]
[341]    0.0    0.00    0.00      13         std::pointer_traits<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*>::pointer_to(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>&) [341]
                0.00    0.00      13/13          std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::addressof<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>&) [356]
-----------------------------------------------
                0.00    0.00      13/13          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [348]
[342]    0.0    0.00    0.00      13         std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::deallocate(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [342]
                0.00    0.00      13/13          __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::deallocate(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [331]
-----------------------------------------------
                0.00    0.00      13/13          std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_node<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [107]
[343]    0.0    0.00    0.00      13         std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::allocate(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, unsigned long) [343]
                0.00    0.00      13/13          __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::allocate(unsigned long, void const*) [332]
-----------------------------------------------
                0.00    0.00      13/13          std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<FlatHexPosition const&, Tile>(std::integral_constant<bool, true>, FlatHexPosition const&, Tile&&) [92]
[344]    0.0    0.00    0.00      13         std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool>::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&, bool, true>(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&, bool&&) [344]
                0.00    0.00      13/13          std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>& std::forward<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&>(std::remove_reference<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&>::type&) [355]
                0.00    0.00      13/29          bool&& std::forward<bool>(std::remove_reference<bool>::type&) [257]
-----------------------------------------------
                0.00    0.00      13/13          std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_node<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [107]
[345]    0.0    0.00    0.00      13         std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>::_Hash_node() [345]
                0.00    0.00      13/13          std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_Hash_node_value_base() [350]
-----------------------------------------------
                0.00    0.00      13/13          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable(std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >&&) [103]
[346]    0.0    0.00    0.00      13         std::__detail::_Hash_node_base::_Hash_node_base(std::__detail::_Hash_node_base*) [346]
-----------------------------------------------
                0.00    0.00      13/13          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable(std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >&&) [103]
[347]    0.0    0.00    0.00      13         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_Hashtable_alloc(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&&) [347]
                0.00    0.00      13/13          std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::_Hashtable_ebo_helper(std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>&&) [351]
-----------------------------------------------
                0.00    0.00      13/13          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [123]
[348]    0.0    0.00    0.00      13         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [348]
                0.00    0.00      13/13          std::pointer_traits<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*>::pointer_to(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>&) [341]
                0.00    0.00      13/54          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_node_allocator() [236]
                0.00    0.00      13/13          std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::deallocate(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [342]
-----------------------------------------------
                0.00    0.00      13/13          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_reset() [340]
[349]    0.0    0.00    0.00      13         std::__detail::_Prime_rehash_policy::_M_reset() [349]
-----------------------------------------------
                0.00    0.00      13/13          std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>::_Hash_node() [345]
[350]    0.0    0.00    0.00      13         std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_Hash_node_value_base() [350]
                0.00    0.00      13/44          std::__detail::_Hash_node_base::_Hash_node_base() [245]
-----------------------------------------------
                0.00    0.00      13/13          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_Hashtable_alloc(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&&) [347]
[351]    0.0    0.00    0.00      13         std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::_Hashtable_ebo_helper(std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>&&) [351]
                0.00    0.00      13/13          std::allocator<std::__detail::_Hash_node<Peon*, false> >::allocator(std::allocator<std::__detail::_Hash_node<Peon*, false> > const&) [336]
-----------------------------------------------
                0.00    0.00      13/13          std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::addressof<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>&) [356]
[352]    0.0    0.00    0.00      13         std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__addressof<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>&) [352]
-----------------------------------------------
                0.00    0.00      13/13          std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_node<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [107]
[353]    0.0    0.00    0.00      13         std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__to_address<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [353]
-----------------------------------------------
                0.00    0.00      13/13          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable(std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >&&) [103]
[354]    0.0    0.00    0.00      13         std::remove_reference<std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&>::type&& std::move<std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&>(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&) [354]
-----------------------------------------------
                0.00    0.00      13/13          std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool>::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&, bool, true>(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&, bool&&) [344]
[355]    0.0    0.00    0.00      13         std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>& std::forward<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&>(std::remove_reference<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&>::type&) [355]
-----------------------------------------------
                0.00    0.00      13/13          std::pointer_traits<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*>::pointer_to(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>&) [341]
[356]    0.0    0.00    0.00      13         std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::addressof<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>&) [356]
                0.00    0.00      13/13          std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__addressof<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>&) [352]
-----------------------------------------------
                0.00    0.00      12/12          World::removeObject(FlatHexPosition const&, Peon*) [95]
[357]    0.0    0.00    0.00      12         Tile::isEmpty() const [357]
                0.00    0.00      12/12          std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::size() const [359]
-----------------------------------------------
                0.00    0.00      12/12          std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::size() const [359]
[358]    0.0    0.00    0.00      12         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::size() const [358]
-----------------------------------------------
                0.00    0.00      12/12          Tile::isEmpty() const [357]
[359]    0.0    0.00    0.00      12         std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::size() const [359]
                0.00    0.00      12/12          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::size() const [358]
-----------------------------------------------
                0.00    0.00      12/12          std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_M_equals(Peon* const&, unsigned long, std::__detail::_Hash_node<Peon*, false>*) const [130]
[360]    0.0    0.00    0.00      12         std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_M_eq() const [360]
                0.00    0.00      12/12          std::__detail::_Hashtable_ebo_helper<0, std::equal_to<Peon*>, true>::_M_cget() const [361]
-----------------------------------------------
                0.00    0.00      12/12          std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_M_eq() const [360]
[361]    0.0    0.00    0.00      12         std::__detail::_Hashtable_ebo_helper<0, std::equal_to<Peon*>, true>::_M_cget() const [361]
-----------------------------------------------
                0.00    0.00      12/12          std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_M_equals(Peon* const&, unsigned long, std::__detail::_Hash_node<Peon*, false>*) const [130]
[362]    0.0    0.00    0.00      12         Peon*& std::__detail::_Identity::operator()<Peon*&>(Peon*&) const [362]
                0.00    0.00      12/12          Peon*& std::forward<Peon*&>(std::remove_reference<Peon*&>::type&) [367]
-----------------------------------------------
                0.00    0.00      12/12          std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_M_equals(Peon* const&, unsigned long, std::__detail::_Hash_node<Peon*, false>*) const [130]
[363]    0.0    0.00    0.00      12         std::equal_to<Peon*>::operator()(Peon* const&, Peon* const&) const [363]
-----------------------------------------------
                0.00    0.00      12/12          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<Peon*, false>*) [365]
[364]    0.0    0.00    0.00      12         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_remove_bucket_begin(unsigned long, std::__detail::_Hash_node<Peon*, false>*, unsigned long) [364]
-----------------------------------------------
                0.00    0.00      12/12          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(std::integral_constant<bool, true>, Peon* const&) [138]
[365]    0.0    0.00    0.00      12         std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<Peon*, false>*) [365]
                0.00    0.00      25/17960       std::__detail::_Hash_node<Peon*, false>::_M_next() const [184]
                0.00    0.00      12/12          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_remove_bucket_begin(unsigned long, std::__detail::_Hash_node<Peon*, false>*, unsigned long) [364]
                0.00    0.00      12/8990        std::__detail::_Node_iterator<Peon*, true, false>::_Node_iterator(std::__detail::_Hash_node<Peon*, false>*) [200]
                0.00    0.00      12/16          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_node(std::__detail::_Hash_node<Peon*, false>*) [301]
                0.00    0.00       1/16          std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_bucket_index(std::__detail::_Hash_node<Peon*, false>*) const [282]
-----------------------------------------------
                0.00    0.00      12/12          std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_M_equals(Peon* const&, unsigned long, std::__detail::_Hash_node<Peon*, false>*) const [130]
[366]    0.0    0.00    0.00      12         std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_Equal_hash_code<std::__detail::_Hash_node<Peon*, false> >::_S_equals(unsigned long, std::__detail::_Hash_node<Peon*, false> const&) [366]
-----------------------------------------------
                0.00    0.00      12/12          Peon*& std::__detail::_Identity::operator()<Peon*&>(Peon*&) const [362]
[367]    0.0    0.00    0.00      12         Peon*& std::forward<Peon*&>(std::remove_reference<Peon*&>::type&) [367]
-----------------------------------------------
                0.00    0.00      11/11          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<FlatHexPosition const, Tile>, false, true>) [126]
[368]    0.0    0.00    0.00      11         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_get_previous_node(unsigned long, std::__detail::_Hash_node_base*) [368]
-----------------------------------------------
                0.00    0.00      11/11          std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [127]
[369]    0.0    0.00    0.00      11         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_remove_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [369]
-----------------------------------------------
                0.00    0.00       9/9           Controller::rightClickAt(FlatHexPosition const&) [118]
[370]    0.0    0.00    0.00       9         ControllerState::selectedPeon() [370]
-----------------------------------------------
                0.00    0.00       9/9           std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&&) [66]
[371]    0.0    0.00    0.00       9         std::_Head_base<0ul, SpriteSheet*, false>::_Head_base<SpriteSheet*>(SpriteSheet*&&) [371]
                0.00    0.00       9/18          SpriteSheet*&& std::forward<SpriteSheet*>(std::remove_reference<SpriteSheet*>::type&) [272]
-----------------------------------------------
                0.00    0.00       9/9           std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&&) [67]
[372]    0.0    0.00    0.00       9         std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>::_Head_base<std::default_delete<SpriteSheet> >(std::default_delete<SpriteSheet>&&) [372]
                0.00    0.00       9/18          std::default_delete<SpriteSheet>&& std::forward<std::default_delete<SpriteSheet> >(std::remove_reference<std::default_delete<SpriteSheet> >::type&) [273]
-----------------------------------------------
                0.00    0.00       9/9           std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&&) [66]
[373]    0.0    0.00    0.00       9         std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_M_tail(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&) [373]
-----------------------------------------------
                0.00    0.00       9/9           std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&&) [66]
[374]    0.0    0.00    0.00       9         std::remove_reference<std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&>::type&& std::move<std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&>(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&) [374]
-----------------------------------------------
                0.00    0.00       9/9           std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::__uniq_ptr_impl(std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >&&) [69]
[375]    0.0    0.00    0.00       9         std::remove_reference<std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&>::type&& std::move<std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&>(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&) [375]
-----------------------------------------------
                0.00    0.00       1/6           SmallObjectRenderer::SmallObjectRenderer(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [78]
                0.00    0.00       1/6           TiledObjectRenderer::TiledObjectRenderer(HexViewport*, std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [79]
                0.00    0.00       2/6           main [1]
                0.00    0.00       2/6           AbstractRenderer::AbstractRenderer(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [88]
[376]    0.0    0.00    0.00       6         std::remove_reference<std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&>::type&& std::move<std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&>(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&) [376]
-----------------------------------------------
                0.00    0.00       5/5           Controller::leftClickAt(FlatHexPosition const&) [108]
[377]    0.0    0.00    0.00       5         ControllerState::selectPeon(Peon*) [377]
-----------------------------------------------
                0.00    0.00       4/4           std::_MakeUniq<SpriteSheet>::__single_object std::make_unique<SpriteSheet, SDL_Texture*&, int, int, unsigned int&, unsigned int&>(SDL_Texture*&, int&&, int&&, unsigned int&, unsigned int&) [399]
[378]    0.0    0.00    0.00       4         unsigned int& std::forward<unsigned int&>(std::remove_reference<unsigned int&>::type&) [378]
-----------------------------------------------
                0.00    0.00       4/4           std::_MakeUniq<SpriteSheet>::__single_object std::make_unique<SpriteSheet, SDL_Texture*&, int, int, unsigned int&, unsigned int&>(SDL_Texture*&, int&&, int&&, unsigned int&, unsigned int&) [399]
[379]    0.0    0.00    0.00       4         int&& std::forward<int>(std::remove_reference<int>::type&) [379]
-----------------------------------------------
                0.00    0.00       1/3           SpriteAsset::loadFromFile(char const*, SDL_Renderer*) [73]
                0.00    0.00       2/3           SpriteSheet::loadFromFile(char const*, unsigned int, unsigned int, SDL_Renderer*) [74]
[380]    0.0    0.00    0.00       3         SpriteSheet::recut(unsigned int, unsigned int) [380]
-----------------------------------------------
                0.00    0.00       3/3           SDLHandler::handleKeyDown(SDL_KeyboardEvent const&) [128]
[381]    0.0    0.00    0.00       3         AbstractCamera::scrollDown() [381]
-----------------------------------------------
                0.00    0.00       3/3           SDLHandler::handleKeyUp(SDL_KeyboardEvent const&) [271]
[382]    0.0    0.00    0.00       3         AbstractCamera::stopUDScroll() [382]
-----------------------------------------------
                0.00    0.00       2/2           std::_MakeUniq<SpriteSheet>::__single_object std::make_unique<SpriteSheet, SDL_Texture*&, int, int, unsigned int&, unsigned int&>(SDL_Texture*&, int&&, int&&, unsigned int&, unsigned int&) [399]
[383]    0.0    0.00    0.00       2         SpriteSheet::SpriteSheet(SDL_Texture*, int, int, unsigned int, unsigned int) [383]
-----------------------------------------------
                0.00    0.00       2/2           std::default_delete<SpriteSheet>::operator()(SpriteSheet*) const [387]
[384]    0.0    0.00    0.00       2         SpriteSheet::~SpriteSheet() [384]
-----------------------------------------------
                0.00    0.00       2/2           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [389]
[385]    0.0    0.00    0.00       2         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const [385]
-----------------------------------------------
                0.00    0.00       1/2           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear() [143]
                0.00    0.00       1/2           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) [419]
[386]    0.0    0.00    0.00       2         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_begin() const [386]
-----------------------------------------------
                0.00    0.00       2/2           std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::~unique_ptr() [38]
[387]    0.0    0.00    0.00       2         std::default_delete<SpriteSheet>::operator()(SpriteSheet*) const [387]
                0.00    0.00       2/2           SpriteSheet::~SpriteSheet() [384]
-----------------------------------------------
                0.00    0.00       1/2           std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [425]
                0.00    0.00       1/2           std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_buckets(unsigned long) [424]
[388]    0.0    0.00    0.00       2         std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > const&) [388]
                0.00    0.00       2/30          __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::new_allocator() [253]
-----------------------------------------------
                0.00    0.00       2/2           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets() [390]
[389]    0.0    0.00    0.00       2         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [389]
                0.00    0.00       2/2           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const [385]
                0.00    0.00       1/1           std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [425]
-----------------------------------------------
                0.00    0.00       1/2           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable() [144]
                0.00    0.00       1/2           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) [419]
[390]    0.0    0.00    0.00       2         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets() [390]
                0.00    0.00       2/2           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [389]
-----------------------------------------------
                0.00    0.00       2/2           std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_Tuple_impl() [394]
[391]    0.0    0.00    0.00       2         std::_Head_base<0ul, SpriteSheet*, false>::_Head_base() [391]
-----------------------------------------------
                0.00    0.00       2/2           std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_Tuple_impl() [395]
[392]    0.0    0.00    0.00       2         std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>::_Head_base() [392]
-----------------------------------------------
                0.00    0.00       2/2           std::_MakeUniq<SpriteSheet>::__single_object std::make_unique<SpriteSheet, SDL_Texture*&, int, int, unsigned int&, unsigned int&>(SDL_Texture*&, int&&, int&&, unsigned int&, unsigned int&) [399]
[393]    0.0    0.00    0.00       2         std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::unique_ptr<std::default_delete<SpriteSheet>, void>(SpriteSheet*) [393]
                0.00    0.00       2/2           std::__uniq_ptr_data<SpriteSheet, std::default_delete<SpriteSheet>, true, true>::__uniq_ptr_impl(SpriteSheet*) [396]
-----------------------------------------------
                0.00    0.00       2/2           std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >::tuple<true, true>() [398]
[394]    0.0    0.00    0.00       2         std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_Tuple_impl() [394]
                0.00    0.00       2/2           std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_Tuple_impl() [395]
                0.00    0.00       2/2           std::_Head_base<0ul, SpriteSheet*, false>::_Head_base() [391]
-----------------------------------------------
                0.00    0.00       2/2           std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_Tuple_impl() [394]
[395]    0.0    0.00    0.00       2         std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_Tuple_impl() [395]
                0.00    0.00       2/2           std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>::_Head_base() [392]
-----------------------------------------------
                0.00    0.00       2/2           std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::unique_ptr<std::default_delete<SpriteSheet>, void>(SpriteSheet*) [393]
[396]    0.0    0.00    0.00       2         std::__uniq_ptr_data<SpriteSheet, std::default_delete<SpriteSheet>, true, true>::__uniq_ptr_impl(SpriteSheet*) [396]
                0.00    0.00       2/2           std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::__uniq_ptr_impl(SpriteSheet*) [397]
-----------------------------------------------
                0.00    0.00       2/2           std::__uniq_ptr_data<SpriteSheet, std::default_delete<SpriteSheet>, true, true>::__uniq_ptr_impl(SpriteSheet*) [396]
[397]    0.0    0.00    0.00       2         std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::__uniq_ptr_impl(SpriteSheet*) [397]
                0.00    0.00       2/2           std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >::tuple<true, true>() [398]
                0.00    0.00       2/22          std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_ptr() [268]
-----------------------------------------------
                0.00    0.00       2/2           std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::__uniq_ptr_impl(SpriteSheet*) [397]
[398]    0.0    0.00    0.00       2         std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >::tuple<true, true>() [398]
                0.00    0.00       2/2           std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_Tuple_impl() [394]
-----------------------------------------------
                0.00    0.00       2/2           SpriteSheet::loadFromFile(char const*, unsigned int, unsigned int, SDL_Renderer*) [74]
[399]    0.0    0.00    0.00       2         std::_MakeUniq<SpriteSheet>::__single_object std::make_unique<SpriteSheet, SDL_Texture*&, int, int, unsigned int&, unsigned int&>(SDL_Texture*&, int&&, int&&, unsigned int&, unsigned int&) [399]
                0.00    0.00       4/4           int&& std::forward<int>(std::remove_reference<int>::type&) [379]
                0.00    0.00       4/4           unsigned int& std::forward<unsigned int&>(std::remove_reference<unsigned int&>::type&) [378]
                0.00    0.00       2/2           SDL_Texture*& std::forward<SDL_Texture*&>(std::remove_reference<SDL_Texture*&>::type&) [401]
                0.00    0.00       2/2           SpriteSheet::SpriteSheet(SDL_Texture*, int, int, unsigned int, unsigned int) [383]
                0.00    0.00       2/2           std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::unique_ptr<std::default_delete<SpriteSheet>, void>(SpriteSheet*) [393]
-----------------------------------------------
                0.00    0.00       2/2           std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::~unique_ptr() [38]
[400]    0.0    0.00    0.00       2         std::remove_reference<SpriteSheet*&>::type&& std::move<SpriteSheet*&>(SpriteSheet*&) [400]
-----------------------------------------------
                0.00    0.00       2/2           std::_MakeUniq<SpriteSheet>::__single_object std::make_unique<SpriteSheet, SDL_Texture*&, int, int, unsigned int&, unsigned int&>(SDL_Texture*&, int&&, int&&, unsigned int&, unsigned int&) [399]
[401]    0.0    0.00    0.00       2         SDL_Texture*& std::forward<SDL_Texture*&>(std::remove_reference<SDL_Texture*&>::type&) [401]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[402]    0.0    0.00    0.00       1         Controller::Controller(World*) [402]
                0.00    0.00       1/1           ControllerState::ControllerState() [409]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[403]    0.0    0.00    0.00       1         GameEngine::GameEngine(World*) [403]
                0.00    0.00       1/14          std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::unordered_set() [324]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[404]    0.0    0.00    0.00       1         SDLHandler::SDLHandler(AbstractCamera*, HexViewport*, Controller*) [404]
-----------------------------------------------
                0.00    0.00       1/1           SDLHandler::handleKeyDown(SDL_KeyboardEvent const&) [128]
[405]    0.0    0.00    0.00       1         AbstractCamera::scrollRight() [405]
-----------------------------------------------
                0.00    0.00       1/1           SDLHandler::handleKeyUp(SDL_KeyboardEvent const&) [271]
[406]    0.0    0.00    0.00       1         AbstractCamera::stopLRScroll() [406]
-----------------------------------------------
                0.00    0.00       1/1           Camera::Camera(int, int, int, int, int, int) [152]
[407]    0.0    0.00    0.00       1         AbstractCamera::AbstractCamera(float, float, int) [407]
-----------------------------------------------
                0.00    0.00       1/1           Controller::leftClickAt(FlatHexPosition const&) [108]
[408]    0.0    0.00    0.00       1         ControllerState::deselectPeon() [408]
-----------------------------------------------
                0.00    0.00       1/1           Controller::Controller(World*) [402]
[409]    0.0    0.00    0.00       1         ControllerState::ControllerState() [409]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[410]    0.0    0.00    0.00       1         RenderingEngine::RenderingEngine(Window*, HexViewport*, AbstractCamera*, World*, AbstractRenderer*, AbstractRenderer*) [410]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[411]    0.0    0.00    0.00       1         World::World(int, int) [411]
                0.00    0.00       1/1           std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::unordered_map() [423]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[412]    0.0    0.00    0.00       1         Window::createWindow(int, int) [412]
                0.00    0.00       1/1           Window::Window(SDL_Window*, SDL_Renderer*, int, int) [413]
-----------------------------------------------
                0.00    0.00       1/1           Window::createWindow(int, int) [412]
[413]    0.0    0.00    0.00       1         Window::Window(SDL_Window*, SDL_Renderer*, int, int) [413]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[414]    0.0    0.00    0.00       1         Window::~Window() [414]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::allocator() [417]
[415]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::new_allocator() [415]
-----------------------------------------------
                0.00    0.00       1/1           std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::~allocator() [418]
[416]    0.0    0.00    0.00       1         __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::~new_allocator() [416]
-----------------------------------------------
                0.00    0.00       1/1           std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >, true>::_Hashtable_ebo_helper() [428]
[417]    0.0    0.00    0.00       1         std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::allocator() [417]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::new_allocator() [415]
-----------------------------------------------
                0.00    0.00       1/1           std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >, true>::~_Hashtable_ebo_helper() [429]
[418]    0.0    0.00    0.00       1         std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::~allocator() [418]
                0.00    0.00       1/1           __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::~new_allocator() [416]
-----------------------------------------------
                0.00    0.00       1/1           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash(unsigned long, unsigned long const&) [421]
[419]    0.0    0.00    0.00       1         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) [419]
                0.00    0.00       1/1           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_allocate_buckets(unsigned long) [420]
                0.00    0.00       1/2           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_begin() const [386]
                0.00    0.00       1/2           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets() [390]
-----------------------------------------------
                0.00    0.00       1/1           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) [419]
[420]    0.0    0.00    0.00       1         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_allocate_buckets(unsigned long) [420]
                0.00    0.00       1/1           std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_buckets(unsigned long) [424]
-----------------------------------------------
                0.00    0.00       1/1           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(FlatHexPosition const&, unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [149]
[421]    0.0    0.00    0.00       1         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash(unsigned long, unsigned long const&) [421]
                0.00    0.00       1/1           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) [419]
-----------------------------------------------
                0.00    0.00       1/1           std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::unordered_map() [423]
[422]    0.0    0.00    0.00       1         std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Hashtable() [422]
                0.00    0.00       1/1           std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_Hashtable_alloc() [426]
                0.00    0.00       1/44          std::__detail::_Hash_node_base::_Hash_node_base() [245]
                0.00    0.00       1/15          std::__detail::_Prime_rehash_policy::_Prime_rehash_policy(float) [314]
-----------------------------------------------
                0.00    0.00       1/1           World::World(int, int) [411]
[423]    0.0    0.00    0.00       1         std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::unordered_map() [423]
                0.00    0.00       1/1           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Hashtable() [422]
-----------------------------------------------
                0.00    0.00       1/1           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_allocate_buckets(unsigned long) [420]
[424]    0.0    0.00    0.00       1         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_buckets(unsigned long) [424]
                0.00    0.00       1/54          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_node_allocator() [236]
                0.00    0.00       1/2           std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > const&) [388]
                0.00    0.00       1/15          std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::allocate(std::allocator<std::__detail::_Hash_node_base*>&, unsigned long) [313]
                0.00    0.00       1/15          std::__detail::_Hash_node_base** std::__to_address<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base**) [316]
                0.00    0.00       1/30          std::allocator<std::__detail::_Hash_node_base*>::~allocator() [255]
-----------------------------------------------
                0.00    0.00       1/1           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [389]
[425]    0.0    0.00    0.00       1         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [425]
                0.00    0.00       1/15          std::pointer_traits<std::__detail::_Hash_node_base**>::pointer_to(std::__detail::_Hash_node_base*&) [311]
                0.00    0.00       1/54          std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_node_allocator() [236]
                0.00    0.00       1/2           std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > const&) [388]
                0.00    0.00       1/15          std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::deallocate(std::allocator<std::__detail::_Hash_node_base*>&, std::__detail::_Hash_node_base**, unsigned long) [312]
                0.00    0.00       1/30          std::allocator<std::__detail::_Hash_node_base*>::~allocator() [255]
-----------------------------------------------
                0.00    0.00       1/1           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Hashtable() [422]
[426]    0.0    0.00    0.00       1         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_Hashtable_alloc() [426]
                0.00    0.00       1/1           std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >, true>::_Hashtable_ebo_helper() [428]
-----------------------------------------------
                0.00    0.00       1/1           std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable() [144]
[427]    0.0    0.00    0.00       1         std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::~_Hashtable_alloc() [427]
                0.00    0.00       1/1           std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >, true>::~_Hashtable_ebo_helper() [429]
-----------------------------------------------
                0.00    0.00       1/1           std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_Hashtable_alloc() [426]
[428]    0.0    0.00    0.00       1         std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >, true>::_Hashtable_ebo_helper() [428]
                0.00    0.00       1/1           std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::allocator() [417]
-----------------------------------------------
                0.00    0.00       1/1           std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::~_Hashtable_alloc() [427]
[429]    0.0    0.00    0.00       1         std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >, true>::~_Hashtable_ebo_helper() [429]
                0.00    0.00       1/1           std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::~allocator() [418]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2020 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [82] _GLOBAL__sub_I__ZN11HexViewport11ROTATE_LEFTE (HexViewport.cpp) [310] __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::_M_max_size() const [125] std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::erase(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>)
  [83] __static_initialization_and_destruction_0(int, int) (HexViewport.cpp) [280] __gnu_cxx::__aligned_buffer<Peon*>::_M_ptr() const [94] std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::emplace<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&)
 [108] Controller::leftClickAt(FlatHexPosition const&) [281] __gnu_cxx::__aligned_buffer<Peon*>::_M_addr() const [423] std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::unordered_map()
 [118] Controller::rightClickAt(FlatHexPosition const&) [22] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_node(unsigned long, FlatHexPosition const&, unsigned long) const [145] std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::~unordered_map()
 [402] Controller::Controller(World*) [198] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const [211] std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::end()
  [23] GameEngine::update()   [50] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_bucket_index(FlatHexPosition const&, unsigned long) const [81] std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::begin()
 [112] GameEngine::addPeon(Peon*) [25] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_find_before_node(unsigned long, FlatHexPosition const&, unsigned long) const [139] std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::erase(Peon* const&)
  [29] GameEngine::peonTick(Peon*) [385] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const [110] std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::insert(Peon* const&)
 [403] GameEngine::GameEngine(World*) [386] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_begin() const [324] std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::unordered_set()
 [148] GameEngine::~GameEngine() [133] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_find_node(unsigned long, Peon* const&, unsigned long) const [104] std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::unordered_set(std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >&&)
 [271] SDLHandler::handleKeyUp(SDL_KeyboardEvent const&) [282] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_bucket_index(std::__detail::_Hash_node<Peon*, false>*) const [98] std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::~unordered_set()
 [128] SDLHandler::handleKeyDown(SDL_KeyboardEvent const&) [246] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_bucket_index(Peon* const&, unsigned long) const [291] std::pointer_traits<std::__detail::_Hash_node<Peon*, false>*>::pointer_to(std::__detail::_Hash_node<Peon*, false>&)
  [56] SDLHandler::handleSDLEvents() [129] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_find_before_node(unsigned long, Peon* const&, unsigned long) const [341] std::pointer_traits<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*>::pointer_to(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>&)
 [212] SDLHandler::handleMouseMovement(SDL_MouseMotionEvent const&) [235] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_uses_single_bucket(std::__detail::_Hash_node_base**) const [311] std::pointer_traits<std::__detail::_Hash_node_base**>::pointer_to(std::__detail::_Hash_node_base*&)
  [57] SDLHandler::handleMouseButtonDown(SDL_MouseButtonEvent const&) [334] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_uses_single_bucket() const [68] std::__uniq_ptr_data<SpriteSheet, std::default_delete<SpriteSheet>, true, true>::__uniq_ptr_data(std::__uniq_ptr_data<SpriteSheet, std::default_delete<SpriteSheet>, true, true>&&)
 [404] SDLHandler::SDLHandler(AbstractCamera*, HexViewport*, Controller*) [206] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::end() const [396] std::__uniq_ptr_data<SpriteSheet, std::default_delete<SpriteSheet>, true, true>::__uniq_ptr_impl(SpriteSheet*)
 [238] HexViewport::target(FlatHexPosition const&) [358] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::size() const [40] std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_deleter()
 [134] HexViewport::rotation(Matrix22 const&) [71] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::begin() const [268] std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_ptr()
 [151] HexViewport::HexViewport(int, int, int, int) [62] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_begin() const [69] std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::__uniq_ptr_impl(std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >&&)
  [73] SpriteAsset::loadFromFile(char const*, SDL_Renderer*) [19] std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::get() const [397] std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::__uniq_ptr_impl(SpriteSheet*)
  [35] SpriteSheet::renderFrame(unsigned int, unsigned int, SDL_Renderer*, SDL_Rect const*) [153] std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::operator bool() const [292] std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::deallocate(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, std::__detail::_Hash_node<Peon*, false>*, unsigned long)
  [74] SpriteSheet::loadFromFile(char const*, unsigned int, unsigned int, SDL_Renderer*) [9] std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::operator->() const [293] void std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::destroy<Peon*>(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, Peon**)
 [380] SpriteSheet::recut(unsigned int, unsigned int) [207] std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::end() const [294] std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::allocate(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, unsigned long)
 [383] SpriteSheet::SpriteSheet(SDL_Texture*, int, int, unsigned int, unsigned int) [359] std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::size() const [295] void std::allocator_traits<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::construct<Peon*, Peon* const&>(std::allocator<std::__detail::_Hash_node<Peon*, false> >&, Peon**, Peon* const&)
 [384] SpriteSheet::~SpriteSheet() [72] std::unordered_set<Peon*, std::hash<Peon*>, std::equal_to<Peon*>, std::allocator<Peon*> >::begin() const [342] std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::deallocate(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long)
 [131] AbstractCamera::rotateLeft() [387] std::default_delete<SpriteSheet>::operator()(SpriteSheet*) const [121] void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::destroy<std::pair<FlatHexPosition const, Tile> >(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::pair<FlatHexPosition const, Tile>*)
 [381] AbstractCamera::scrollDown() [20] std::__uniq_ptr_impl<SpriteSheet, std::default_delete<SpriteSheet> >::_M_ptr() const [343] std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::allocate(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, unsigned long)
 [140] AbstractCamera::rotateRight() [223] std::integral_constant<bool, true>::operator bool() const [105] void std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::construct<std::pair<FlatHexPosition const, Tile>, FlatHexPosition const&, Tile>(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >&, std::pair<FlatHexPosition const, Tile>*, FlatHexPosition const&, Tile&&)
 [405] AbstractCamera::scrollRight() [240] std::hash<Peon*>::operator()(Peon*) const [312] std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::deallocate(std::allocator<std::__detail::_Hash_node_base*>&, std::__detail::_Hash_node_base**, unsigned long)
 [406] AbstractCamera::stopLRScroll() [283] std::__detail::_Hash_node<Peon*, false>* std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::operator()<Peon* const&>(Peon* const&) const [313] std::allocator_traits<std::allocator<std::__detail::_Hash_node_base*> >::allocate(std::allocator<std::__detail::_Hash_node_base*>&, unsigned long)
 [382] AbstractCamera::stopUDScroll() [184] std::__detail::_Hash_node<Peon*, false>::_M_next() const [106] std::pair<FlatHexPosition const, Tile>::pair<Tile, true>(FlatHexPosition const&, Tile&&)
 [168] AbstractCamera::getOrientation() [197] std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>::_M_next() const [122] std::pair<FlatHexPosition const, Tile>::~pair()
  [46] AbstractCamera::update() [186] decltype ((get<0>)((forward<std::pair<FlatHexPosition const, Tile>&>)({parm#1}))) std::__detail::_Select1st::operator()<std::pair<FlatHexPosition const, Tile>&>(std::pair<FlatHexPosition const, Tile>&) const [296] std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool>::pair<std::__detail::_Node_iterator<Peon*, true, false>&, bool, true>(std::__detail::_Node_iterator<Peon*, true, false>&, bool&&)
 [407] AbstractCamera::AbstractCamera(float, float, int) [76] std::__detail::_Node_iterator<Peon*, true, false>::operator*() const [344] std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool>::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&, bool, true>(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&, bool&&)
 [377] ControllerState::selectPeon(Peon*) [204] std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::operator->() const [70] std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >::tuple(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&&)
 [408] ControllerState::deselectPeon() [187] std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_extract() const [398] std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >::tuple<true, true>()
 [370] ControllerState::selectedPeon() [11] std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_hash_code(FlatHexPosition const&) const [224] void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*)
 [409] ControllerState::ControllerState() [335] std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_store_code(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) const [225] void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct<char*>(char*, char*, std::forward_iterator_tag)
 [258] FlatHexPosition::systemString[abi:cxx11](FlatHexPosition::System) [199] std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> const*, unsigned long) const [226] void std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_construct_aux<char*>(char*, char*, std::__false_type)
   [7] FlatHexPosition::tile(FlatHexPosition*) [169] std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_bucket_index(FlatHexPosition const&, unsigned long, unsigned long) const [227] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string<char*, void>(char*, char*, std::allocator<char> const&)
  [16] FlatHexPosition::tile() [170] std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h1() const [228] std::__cxx11::to_string(float)
 [154] FlatHexPosition::unit(FlatHexPosition*) [166] std::__detail::_Hash_code_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true>::_M_h2() const [297] std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_AllocNode(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&)
 [155] FlatHexPosition::unit() [241] std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_extract() const [298] std::__detail::_Hash_node<Peon*, false>::_Hash_node()
   [8] FlatHexPosition::convert(FlatHexPosition::System) [260] std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_hash_code(Peon* const&) const [345] std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>::_Hash_node()
  [33] FlatHexPosition::distance(FlatHexPosition const&, FlatHexPosition const&) [284] std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_store_code(std::__detail::_Hash_node<Peon*, false>*, unsigned long) const [299] std::__detail::_Insert_base<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_conjure_hashtable()
  [26] FlatHexPosition::FlatHexPosition(float, float, float, FlatHexPosition::System) [285] std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(std::__detail::_Hash_node<Peon*, false> const*, unsigned long) const [111] std::__detail::_Insert_base<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::insert(Peon* const&)
 [157] FlatHexPosition::FlatHexPosition(float, float, float, float, FlatHexPosition::System) [247] std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_bucket_index(Peon* const&, unsigned long, unsigned long) const [200] std::__detail::_Node_iterator<Peon*, true, false>::_Node_iterator(std::__detail::_Hash_node<Peon*, false>*)
  [24] FlatHexPosition::FlatHexPosition(FlatHexPosition::System) [242] std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h1() const [203] std::__detail::_Node_iterator<Peon*, true, false>::operator++()
  [14] FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition::System) [233] std::__detail::_Hash_code_base<Peon*, Peon*, std::__detail::_Identity, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false>::_M_h2() const [53] std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::_Node_iterator(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*)
  [43] FlatHexPosition::FlatHexPosition(FlatHexPosition const&, FlatHexPosition const&) [193] std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_eq() const [346] std::__detail::_Hash_node_base::_Hash_node_base(std::__detail::_Hash_node_base*)
  [47] FlatHexPosition::FlatHexPosition(float, float, FlatHexPosition::System) [44] std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_M_equals(FlatHexPosition const&, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) const [245] std::__detail::_Hash_node_base::_Hash_node_base()
  [89] FlatHexPosition::FlatHexPosition() [360] std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_M_eq() const [174] std::__detail::_Hashtable_base<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<true, false, true> >::_Equal_hash_code<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::_S_equals(unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> const&)
   [2] RenderingEngine::render() [130] std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_M_equals(Peon* const&, unsigned long, std::__detail::_Hash_node<Peon*, false>*) const [366] std::__detail::_Hashtable_base<Peon*, Peon*, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits<false, true, true> >::_Equal_hash_code<std::__detail::_Hash_node<Peon*, false> >::_S_equals(unsigned long, std::__detail::_Hash_node<Peon*, false> const&)
 [410] RenderingEngine::RenderingEngine(Window*, HexViewport*, AbstractCamera*, World*, AbstractRenderer*, AbstractRenderer*) [164] std::__detail::_Mod_range_hashing::operator()(unsigned long, unsigned long) const [300] std::__detail::_Hash_node<Peon*, false>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_node<Peon* const&>(Peon* const&)
  [88] AbstractRenderer::AbstractRenderer(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [75] std::__detail::_Node_const_iterator<Peon*, true, false>::operator*() const [218] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_node_allocator()
  [77] AbstractRenderer::~AbstractRenderer() [256] std::__detail::_Prime_rehash_policy::_M_state() const [301] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_node(std::__detail::_Hash_node<Peon*, false>*)
  [37] SmallObjectRenderer::renderAt(int, int, int, SDL_Renderer*) [286] std::__detail::_Hash_node_value_base<Peon*>::_M_v() const [325] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_allocate_buckets(unsigned long)
  [78] SmallObjectRenderer::SmallObjectRenderer(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [287] std::__detail::_Hash_node_value_base<Peon*>::_M_valptr() const [265] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_nodes(std::__detail::_Hash_node<Peon*, false>*)
  [86] SmallObjectRenderer::~SmallObjectRenderer() [194] std::__detail::_Hashtable_ebo_helper<0, HCEquals, true>::_M_cget() const [326] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long)
   [6] TiledObjectRenderer::renderAt(int, int, int, SDL_Renderer*) [188] std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Select1st, true>::_M_cget() const [302] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<Peon*, false>*)
  [79] TiledObjectRenderer::TiledObjectRenderer(HexViewport*, std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >) [243] std::__detail::_Hashtable_ebo_helper<0, std::__detail::_Identity, true>::_M_cget() const [347] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_Hashtable_alloc(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&&)
  [87] TiledObjectRenderer::~TiledObjectRenderer() [361] std::__detail::_Hashtable_ebo_helper<0, std::equal_to<Peon*>, true>::_M_cget() const [327] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::_Hashtable_alloc()
 [119] Peon::setTargetPos(FlatHexPosition const&) [171] std::__detail::_Hashtable_ebo_helper<1, HCHasher, true>::_M_cget() const [266] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >::~_Hashtable_alloc()
 [202] Peon::pos(FlatHexPosition const&) [244] std::__detail::_Hashtable_ebo_helper<1, std::hash<Peon*>, true>::_M_cget() const [107] std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_node<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&)
 [156] Peon::Peon(FlatHexPosition const&) [165] std::__detail::_Hashtable_ebo_helper<2, std::__detail::_Mod_range_hashing, true>::_M_cget() const [236] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_node_allocator()
 [136] Tile::erase(Peon*)    [250] Peon* const& std::__detail::_Identity::operator()<Peon* const&>(Peon* const&) const [123] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_node(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*)
 [147] Tile::insert(Peon*)   [362] Peon*& std::__detail::_Identity::operator()<Peon*&>(Peon*&) const [424] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_allocate_buckets(unsigned long)
 [100] Tile::Tile(Tile&&)    [363] std::equal_to<Peon*>::operator()(Peon* const&, Peon* const&) const [146] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_nodes(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*)
 [114] Tile::Tile(FlatHexPosition, Peon*) [321] std::allocator<std::__detail::_Hash_node<Peon*, false> >::allocator() [425] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long)
  [99] Tile::~Tile()         [336] std::allocator<std::__detail::_Hash_node<Peon*, false> >::allocator(std::allocator<std::__detail::_Hash_node<Peon*, false> > const&) [348] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_M_deallocate_node_ptr(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*)
  [18] math::mrnd(float)     [264] std::allocator<std::__detail::_Hash_node<Peon*, false> >::~allocator() [426] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::_Hashtable_alloc()
   [3] World::getContentAt(FlatHexPosition) [417] std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::allocator() [427] std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >::~_Hashtable_alloc()
  [95] World::removeObject(FlatHexPosition const&, Peon*) [418] std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::~allocator() [185] std::__detail::_Node_iterator_base<Peon*, false>::_M_incr()
  [91] World::addObject(Peon*) [261] std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<Peon*, false> >(std::allocator<std::__detail::_Hash_node<Peon*, false> > const&) [176] std::__detail::_Node_iterator_base<Peon*, false>::_Node_iterator_base(std::__detail::_Hash_node<Peon*, false>*)
 [411] World::World(int, int) [388] std::allocator<std::__detail::_Hash_node_base*>::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > const&) [49] std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true>::_Node_iterator_base(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*)
 [142] World::~World()       [255] std::allocator<std::__detail::_Hash_node_base*>::~allocator() [195] std::__detail::_Node_const_iterator<Peon*, true, false>::_Node_const_iterator(std::__detail::_Hash_node<Peon*, false>*)
 [132] Camera::doRotateLeft() [92] std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_emplace<FlatHexPosition const&, Tile>(std::integral_constant<bool, true>, FlatHexPosition const&, Tile&&) [201] std::__detail::_Node_const_iterator<Peon*, true, false>::operator++()
 [141] Camera::doRotateRight() [102] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Scoped_node::_Scoped_node<FlatHexPosition const&, Tile>(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> > >*, FlatHexPosition const&, Tile&&) [150] std::__detail::_Node_const_iterator<std::pair<FlatHexPosition const, Tile>, false, true>::_Node_const_iterator(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true> const&)
 [135] Camera::doUpdateLRScroll(float) [337] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Scoped_node::~_Scoped_node() [349] std::__detail::_Prime_rehash_policy::_M_reset()
 [113] Camera::doUpdateUDScroll(float) [419] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) [314] std::__detail::_Prime_rehash_policy::_Prime_rehash_policy(float)
 [152] Camera::Camera(int, int, int, int, int, int) [420] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_allocate_buckets(unsigned long) [61] std::__detail::_Hash_node_value_base<Peon*>::_M_v()
 [412] Window::createWindow(int, int) [368] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_get_previous_node(unsigned long, std::__detail::_Hash_node_base*) [183] std::__detail::_Hash_node_value_base<Peon*>::_M_valptr()
 [208] Window::clear()       [389] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [303] std::__detail::_Hash_node_value_base<Peon*>::_Hash_node_value_base()
  [52] Window::update()      [390] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_deallocate_buckets() [190] std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_M_v()
 [413] Window::Window(SDL_Window*, SDL_Renderer*, int, int) [149] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_unique_node(FlatHexPosition const&, unsigned long, unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [179] std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_M_valptr()
 [414] Window::~Window()     [338] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [350] std::__detail::_Hash_node_value_base<std::pair<FlatHexPosition const, Tile> >::_Hash_node_value_base()
 [274] Matrix22::Matrix22(float, float, float, float) [369] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_remove_bucket_begin(unsigned long, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [219] std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::_M_get()
 [221] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > __gnu_cxx::__to_xstring<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char>(int (*)(char*, unsigned long, char const*, __va_list_tag*), unsigned long, char const*, ...) [54] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::end() [351] std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::_Hashtable_ebo_helper(std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>&&)
 [275] __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::deallocate(std::__detail::_Hash_node<Peon*, false>*, unsigned long) [4] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::find(FlatHexPosition const&) [328] std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::_Hashtable_ebo_helper()
 [276] void __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::destroy<Peon*>(Peon**) [143] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::clear() [267] std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<Peon*, false> >, true>::~_Hashtable_ebo_helper()
 [277] __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::allocate(unsigned long, void const*) [124] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>) [237] std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >, true>::_M_get()
 [278] void __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::construct<Peon*, Peon* const&>(Peon**, Peon* const&) [126] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::erase(std::__detail::_Node_const_iterator<std::pair<FlatHexPosition const, Tile>, false, true>) [428] std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >, true>::_Hashtable_ebo_helper()
 [318] __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::new_allocator() [93] std::pair<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>, bool> std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::emplace<FlatHexPosition const&, Tile>(FlatHexPosition const&, Tile&&) [429] std::__detail::_Hashtable_ebo_helper<0, std::allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >, true>::~_Hashtable_ebo_helper()
 [330] __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::new_allocator(__gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> > const&) [127] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*) [329] bool std::__detail::operator==<std::pair<FlatHexPosition const, Tile>, true>(std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&, std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&)
 [263] __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::~new_allocator() [421] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_M_rehash(unsigned long, unsigned long const&) [175] bool std::__detail::operator!=<Peon*, false>(std::__detail::_Node_iterator_base<Peon*, false> const&, std::__detail::_Node_iterator_base<Peon*, false> const&)
 [331] __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::deallocate(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*, unsigned long) [422] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::_Hashtable() [51] bool std::__detail::operator!=<std::pair<FlatHexPosition const, Tile>, true>(std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&, std::__detail::_Node_iterator_base<std::pair<FlatHexPosition const, Tile>, true> const&)
 [120] void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::destroy<std::pair<FlatHexPosition const, Tile> >(std::pair<FlatHexPosition const, Tile>*) [144] std::_Hashtable<FlatHexPosition, std::pair<FlatHexPosition const, Tile>, std::allocator<std::pair<FlatHexPosition const, Tile> >, std::__detail::_Select1st, HCEquals, HCHasher, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<true, false, true> >::~_Hashtable() [229] std::iterator_traits<char*>::difference_type std::__distance<char*>(char*, char*, std::random_access_iterator_tag)
 [332] __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::allocate(unsigned long, void const*) [288] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Scoped_node::_Scoped_node(std::__detail::_Hash_node<Peon*, false>*, std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >*) [304] std::__detail::_Hash_node<Peon*, false>* std::__addressof<std::__detail::_Hash_node<Peon*, false> >(std::__detail::_Hash_node<Peon*, false>&)
 [101] void __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::construct<std::pair<FlatHexPosition const, Tile>, FlatHexPosition const&, Tile>(std::pair<FlatHexPosition const, Tile>*, FlatHexPosition const&, Tile&&) [289] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Scoped_node::~_Scoped_node() [352] std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__addressof<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>&)
 [415] __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::new_allocator() [339] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_base_alloc() [315] std::__detail::_Hash_node_base** std::__addressof<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base*&)
 [416] __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::~new_allocator() [116] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash_aux(unsigned long, std::integral_constant<bool, true>) [399] std::_MakeUniq<SpriteSheet>::__single_object std::make_unique<SpriteSheet, SDL_Texture*&, int, int, unsigned int&, unsigned int&>(SDL_Texture*&, int&&, int&&, unsigned int&, unsigned int&)
 [308] __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::deallocate(std::__detail::_Hash_node_base**, unsigned long) [322] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_allocate_buckets(unsigned long) [28] SpriteSheet* const& std::__get_helper<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> > const&)
 [309] __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::allocate(unsigned long, void const*) [248] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets(std::__detail::_Hash_node_base**, unsigned long) [269] SpriteSheet*& std::__get_helper<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&)
 [253] __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::new_allocator() [249] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_deallocate_buckets() [59] std::default_delete<SpriteSheet>& std::__get_helper<1ul, std::default_delete<SpriteSheet>>(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet>>&)
 [254] __gnu_cxx::new_allocator<std::__detail::_Hash_node_base*>::~new_allocator() [115] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_unique_node(Peon* const&, unsigned long, unsigned long, std::__detail::_Hash_node<Peon*, false>*, unsigned long) [305] std::__detail::_Hash_node<Peon*, false>* std::__to_address<std::__detail::_Hash_node<Peon*, false> >(std::__detail::_Hash_node<Peon*, false>*)
 [181] __gnu_cxx::__aligned_buffer<Peon*>::_M_ptr() [290] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert_bucket_begin(unsigned long, std::__detail::_Hash_node<Peon*, false>*) [353] std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::__to_address<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>*)
 [182] __gnu_cxx::__aligned_buffer<Peon*>::_M_addr() [364] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_remove_bucket_begin(unsigned long, std::__detail::_Hash_node<Peon*, false>*, unsigned long) [316] std::__detail::_Hash_node_base** std::__to_address<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base**)
 [177] __gnu_cxx::__aligned_buffer<std::pair<FlatHexPosition const, Tile> >::_M_ptr() [210] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::end() [230] std::iterator_traits<char*>::iterator_category std::__iterator_category<char*>(char* const&)
 [178] __gnu_cxx::__aligned_buffer<std::pair<FlatHexPosition const, Tile> >::_M_addr() [80] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::begin() [21] std::tuple_element<0ul, std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > >::type const& std::get<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > const&)
 [222] bool __gnu_cxx::__is_null_pointer<char>(char*) [96] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::clear() [270] std::tuple_element<0ul, std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > >::type& std::get<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&)
  [48] HexViewport::tileHeight() const [137] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::erase(Peon* const&) [191] std::tuple_element<0ul, std::pair<FlatHexPosition const, Tile> >::type& std::get<0ul, FlatHexPosition const, Tile>(std::pair<FlatHexPosition const, Tile>&)
  [42] HexViewport::upLeftCorner(FlatHexPosition*) const [138] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(std::integral_constant<bool, true>, Peon* const&) [41] std::tuple_element<1ul, std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> > >::type& std::get<1ul, SpriteSheet*, std::default_delete<SpriteSheet> >(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&)
 [209] HexViewport::viewPortAxis(FlatHexPosition*, FlatHexPosition*) const [365] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_erase(unsigned long, std::__detail::_Hash_node_base*, std::__detail::_Hash_node<Peon*, false>*) [214] std::remove_reference<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>::type&& std::move<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)
 [239] HexViewport::target() const [340] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_reset() [354] std::remove_reference<std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&>::type&& std::move<std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&>(std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<Peon*, false> > >&)
  [12] HexViewport::toPixel(FlatHexPosition const&, int*, int*) const [109] std::pair<std::__detail::_Node_iterator<Peon*, true, false>, bool> std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_insert<Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > >(Peon* const&, std::__detail::_AllocNode<std::allocator<std::__detail::_Hash_node<Peon*, false> > > const&, std::integral_constant<bool, true>, unsigned long) [400] std::remove_reference<SpriteSheet*&>::type&& std::move<SpriteSheet*&>(SpriteSheet*&)
 [319] HexViewport::rotation() const [117] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_M_rehash(unsigned long, unsigned long const&) [376] std::remove_reference<std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&>::type&& std::move<std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&>(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&)
  [58] HexViewport::fromPixel(int, int, FlatHexPosition*) const [103] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable(std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >&&) [374] std::remove_reference<std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&>::type&& std::move<std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&>(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&)
 [173] HexViewport::tileWidth() const [323] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::_Hashtable() [375] std::remove_reference<std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&>::type&& std::move<std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&>(std::tuple<SpriteSheet*, std::default_delete<SpriteSheet> >&)
  [34] SpriteSheet::width() const [97] std::_Hashtable<Peon*, Peon*, std::allocator<Peon*>, std::__detail::_Identity, std::equal_to<Peon*>, std::hash<Peon*>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, true, true> >::~_Hashtable() [217] Tile&& std::forward<Tile>(std::remove_reference<Tile>::type&)
 [167] SpriteSheet::height() const [60] std::_Head_base<0ul, SpriteSheet*, false>::_M_head(std::_Head_base<0ul, SpriteSheet*, false> const&) [272] SpriteSheet*&& std::forward<SpriteSheet*>(std::remove_reference<SpriteSheet*>::type&)
  [15] FlatHexPosition::tile() const [251] std::_Head_base<0ul, SpriteSheet*, false>::_M_head(std::_Head_base<0ul, SpriteSheet*, false>&) [220] FlatHexPosition const& std::forward<FlatHexPosition const&>(std::remove_reference<FlatHexPosition const&>::type&)
  [13] FlatHexPosition::convert(FlatHexPosition::System, FlatHexPosition*) const [391] std::_Head_base<0ul, SpriteSheet*, false>::_Head_base() [215] Peon* const& std::forward<Peon* const&>(std::remove_reference<Peon* const&>::type&)
 [259] FlatHexPosition::toString[abi:cxx11]() const [371] std::_Head_base<0ul, SpriteSheet*, false>::_Head_base<SpriteSheet*>(SpriteSheet*&&) [306] std::__detail::_Node_iterator<Peon*, true, false>& std::forward<std::__detail::_Node_iterator<Peon*, true, false>&>(std::remove_reference<std::__detail::_Node_iterator<Peon*, true, false>&>::type&)
  [85] FlatHexPosition::operator==(FlatHexPosition const&) const [63] std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>::_M_head(std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>&) [355] std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>& std::forward<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&>(std::remove_reference<std::__detail::_Node_iterator<std::pair<FlatHexPosition const, Tile>, false, true>&>::type&)
  [27] FlatHexPosition::operator-(FlatHexPosition const&) const [392] std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>::_Head_base() [401] SDL_Texture*& std::forward<SDL_Texture*&>(std::remove_reference<SDL_Texture*&>::type&)
  [32] FlatHexPosition::operator*(Matrix22 const&) const [372] std::_Head_base<1ul, std::default_delete<SpriteSheet>, true>::_Head_base<std::default_delete<SpriteSheet> >(std::default_delete<SpriteSheet>&&) [367] Peon*& std::forward<Peon*&>(std::remove_reference<Peon*&>::type&)
  [55] FlatHexPosition::operator*(float const&) const [189] FlatHexPosition const& std::__pair_get<0ul>::__get<FlatHexPosition const, Tile>(std::pair<FlatHexPosition const, Tile>&) [192] std::pair<FlatHexPosition const, Tile>& std::forward<std::pair<FlatHexPosition const, Tile>&>(std::remove_reference<std::pair<FlatHexPosition const, Tile>&>::type&)
  [90] FlatHexPosition::operator!=(FlatHexPosition const&) const [39] std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::get_deleter() [378] unsigned int& std::forward<unsigned int&>(std::remove_reference<unsigned int&>::type&)
  [17] FlatHexPosition::operator+(FlatHexPosition const&) const [65] std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::unique_ptr(std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >&&) [273] std::default_delete<SpriteSheet>&& std::forward<std::default_delete<SpriteSheet> >(std::remove_reference<std::default_delete<SpriteSheet> >::type&)
 [180] Peon::pos() const     [393] std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::unique_ptr<std::default_delete<SpriteSheet>, void>(SpriteSheet*) [257] bool&& std::forward<bool>(std::remove_reference<bool>::type&)
 [213] Peon::direction() const [38] std::unique_ptr<SpriteSheet, std::default_delete<SpriteSheet> >::~unique_ptr() [379] int&& std::forward<int>(std::remove_reference<int>::type&)
 [196] Peon::targetPos() const [30] std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> > const&) [231] std::iterator_traits<char*>::difference_type std::distance<char*>(char*, char*)
 [205] Tile::getContent() const [252] std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&) [307] std::__detail::_Hash_node<Peon*, false>* std::addressof<std::__detail::_Hash_node<Peon*, false> >(std::__detail::_Hash_node<Peon*, false>&)
 [357] Tile::isEmpty() const [373] std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_M_tail(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&) [356] std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>* std::addressof<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >(std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true>&)
  [31] World::width() const  [394] std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_Tuple_impl() [317] std::__detail::_Hash_node_base** std::addressof<std::__detail::_Hash_node_base*>(std::__detail::_Hash_node_base*&)
 [172] World::height() const  [66] std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<0ul, SpriteSheet*, std::default_delete<SpriteSheet> >&&) [216] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, char const*)
  [45] HCEquals::operator()(FlatHexPosition const&, FlatHexPosition const&) const [64] std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_M_head(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&) [232] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
  [10] HCHasher::operator()(FlatHexPosition const&) const [67] std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_Tuple_impl(std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >&&) [262] std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > std::operator+<char, std::char_traits<char>, std::allocator<char> >(char const*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)
 [320] Matrix22::operator*(Matrix22 const&) const [395] std::_Tuple_impl<1ul, std::default_delete<SpriteSheet> >::_Tuple_impl() [234] operator new(unsigned long, void*)
 [279] __gnu_cxx::new_allocator<std::__detail::_Hash_node<Peon*, false> >::_M_max_size() const [36] std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::end() [1] main
 [333] __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<FlatHexPosition const, Tile>, true> >::_M_max_size() const [5] std::unordered_map<FlatHexPosition, Tile, HCHasher, HCEquals, std::allocator<std::pair<FlatHexPosition const, Tile> > >::find(FlatHexPosition const&)
